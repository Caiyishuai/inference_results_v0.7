// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/ssd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/ssd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class Ssd_MaskHeadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ssd_MaskHead>
     _instance;
} _Ssd_MaskHead_default_instance_;
class SsdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ssd>
     _instance;
} _Ssd_default_instance_;
class SsdFeatureExtractorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SsdFeatureExtractor>
     _instance;
} _SsdFeatureExtractor_default_instance_;
class FeaturePyramidNetworksDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FeaturePyramidNetworks>
     _instance;
} _FeaturePyramidNetworks_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fssd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, mask_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, mask_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, masks_are_class_agnostic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, mask_prediction_conv_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, mask_prediction_num_conv_layers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, convolve_then_upsample_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, mask_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, mask_loss_sample_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd_MaskHead, initial_crop_size_),
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  0,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, num_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, image_resizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, feature_extractor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, box_coder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, matcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, similarity_calculator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, encode_background_as_zeros_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, negative_class_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, box_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, anchor_generator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, post_processing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, normalize_loss_by_num_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, normalize_loc_loss_by_codesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, freeze_batchnorm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, inplace_batchnorm_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, add_background_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, explicit_background_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, use_confidences_as_targets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, implicit_example_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ssd, mask_head_config_),
  10,
  0,
  1,
  2,
  3,
  4,
  11,
  18,
  5,
  6,
  7,
  19,
  12,
  8,
  13,
  14,
  20,
  15,
  16,
  17,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, depth_multiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, min_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, override_base_feature_extractor_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, pad_to_multiple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, use_explicit_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, use_depthwise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, fpn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, replace_preprocessor_with_placeholder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdFeatureExtractor, num_layers_),
  0,
  7,
  8,
  1,
  3,
  9,
  4,
  5,
  2,
  6,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePyramidNetworks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePyramidNetworks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePyramidNetworks, min_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePyramidNetworks, max_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePyramidNetworks, additional_layer_depth_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(Ssd_MaskHead)},
  { 25, 51, sizeof(Ssd)},
  { 72, 88, sizeof(SsdFeatureExtractor)},
  { 99, 107, sizeof(FeaturePyramidNetworks)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ssd_MaskHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ssd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SsdFeatureExtractor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeaturePyramidNetworks_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/ssd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbox_5fcoder_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fhyperparams_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fregion_5fsimilarity_5fcalculator_2eproto::InitDefaults();
  _Ssd_MaskHead_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ssd_MaskHead_default_instance_);_Ssd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ssd_default_instance_);_SsdFeatureExtractor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SsdFeatureExtractor_default_instance_);_FeaturePyramidNetworks_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FeaturePyramidNetworks_default_instance_);_Ssd_MaskHead_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->image_resizer_ = const_cast< ::object_detection::protos::ImageResizer*>(
      ::object_detection::protos::ImageResizer::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->feature_extractor_ = const_cast< ::object_detection::protos::SsdFeatureExtractor*>(
      ::object_detection::protos::SsdFeatureExtractor::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->box_coder_ = const_cast< ::object_detection::protos::BoxCoder*>(
      ::object_detection::protos::BoxCoder::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->matcher_ = const_cast< ::object_detection::protos::Matcher*>(
      ::object_detection::protos::Matcher::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->similarity_calculator_ = const_cast< ::object_detection::protos::RegionSimilarityCalculator*>(
      ::object_detection::protos::RegionSimilarityCalculator::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->box_predictor_ = const_cast< ::object_detection::protos::BoxPredictor*>(
      ::object_detection::protos::BoxPredictor::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->anchor_generator_ = const_cast< ::object_detection::protos::AnchorGenerator*>(
      ::object_detection::protos::AnchorGenerator::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->post_processing_ = const_cast< ::object_detection::protos::PostProcessing*>(
      ::object_detection::protos::PostProcessing::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->loss_ = const_cast< ::object_detection::protos::Loss*>(
      ::object_detection::protos::Loss::internal_default_instance());
  _Ssd_default_instance_._instance.get_mutable()->mask_head_config_ = const_cast< ::object_detection::protos::Ssd_MaskHead*>(
      ::object_detection::protos::Ssd_MaskHead::internal_default_instance());
  _SsdFeatureExtractor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _SsdFeatureExtractor_default_instance_._instance.get_mutable()->fpn_ = const_cast< ::object_detection::protos::FeaturePyramidNetworks*>(
      ::object_detection::protos::FeaturePyramidNetworks::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!object_detection/protos/ssd.proto\022\027obj"
      "ect_detection.protos\032.object_detection/p"
      "rotos/anchor_generator.proto\032\'object_det"
      "ection/protos/box_coder.proto\032+object_de"
      "tection/protos/box_predictor.proto\032)obje"
      "ct_detection/protos/hyperparams.proto\032+o"
      "bject_detection/protos/image_resizer.pro"
      "to\032$object_detection/protos/losses.proto"
      "\032%object_detection/protos/matcher.proto\032"
      "-object_detection/protos/post_processing"
      ".proto\032:object_detection/protos/region_s"
      "imilarity_calculator.proto\"\247\013\n\003Ssd\022\023\n\013nu"
      "m_classes\030\001 \001(\005\022<\n\rimage_resizer\030\002 \001(\0132%"
      ".object_detection.protos.ImageResizer\022G\n"
      "\021feature_extractor\030\003 \001(\0132,.object_detect"
      "ion.protos.SsdFeatureExtractor\0224\n\tbox_co"
      "der\030\004 \001(\0132!.object_detection.protos.BoxC"
      "oder\0221\n\007matcher\030\005 \001(\0132 .object_detection"
      ".protos.Matcher\022R\n\025similarity_calculator"
      "\030\006 \001(\01323.object_detection.protos.RegionS"
      "imilarityCalculator\022)\n\032encode_background"
      "_as_zeros\030\014 \001(\010:\005false\022 \n\025negative_class"
      "_weight\030\r \001(\002:\0011\022<\n\rbox_predictor\030\007 \001(\0132"
      "%.object_detection.protos.BoxPredictor\022B"
      "\n\020anchor_generator\030\010 \001(\0132(.object_detect"
      "ion.protos.AnchorGenerator\022@\n\017post_proce"
      "ssing\030\t \001(\0132\'.object_detection.protos.Po"
      "stProcessing\022+\n\035normalize_loss_by_num_ma"
      "tches\030\n \001(\010:\004true\022-\n\036normalize_loc_loss_"
      "by_codesize\030\016 \001(\010:\005false\022+\n\004loss\030\013 \001(\0132\035"
      ".object_detection.protos.Loss\022\037\n\020freeze_"
      "batchnorm\030\020 \001(\010:\005false\022\'\n\030inplace_batchn"
      "orm_update\030\017 \001(\010:\005false\022\"\n\024add_backgroun"
      "d_class\030\025 \001(\010:\004true\022(\n\031explicit_backgrou"
      "nd_class\030\030 \001(\010:\005false\022)\n\032use_confidences"
      "_as_targets\030\026 \001(\010:\005false\022\"\n\027implicit_exa"
      "mple_weight\030\027 \001(\002:\0011\022\?\n\020mask_head_config"
      "\030\031 \001(\0132%.object_detection.protos.Ssd.Mas"
      "kHead\032\204\003\n\010MaskHead\022\027\n\013mask_height\030\001 \001(\005:"
      "\00215\022\026\n\nmask_width\030\002 \001(\005:\00215\022&\n\030masks_are"
      "_class_agnostic\030\003 \001(\010:\004true\022\'\n\032mask_pred"
      "iction_conv_depth\030\004 \001(\005:\003256\022*\n\037mask_pre"
      "diction_num_conv_layers\030\005 \001(\005:\0012\022+\n\034conv"
      "olve_then_upsample_masks\030\006 \001(\010:\005false\022\033\n"
      "\020mask_loss_weight\030\007 \001(\002:\0015\022!\n\025mask_loss_"
      "sample_size\030\010 \001(\005:\00216\022>\n\020conv_hyperparam"
      "s\030\t \001(\0132$.object_detection.protos.Hyperp"
      "arams\022\035\n\021initial_crop_size\030\n \001(\005:\00215\"\303\003\n"
      "\023SsdFeatureExtractor\022\014\n\004type\030\001 \001(\t\022\033\n\020de"
      "pth_multiplier\030\002 \001(\002:\0011\022\025\n\tmin_depth\030\003 \001"
      "(\005:\00216\022>\n\020conv_hyperparams\030\004 \001(\0132$.objec"
      "t_detection.protos.Hyperparams\022:\n+overri"
      "de_base_feature_extractor_hyperparams\030\t "
      "\001(\010:\005false\022\032\n\017pad_to_multiple\030\005 \001(\005:\0011\022#"
      "\n\024use_explicit_padding\030\007 \001(\010:\005false\022\034\n\ru"
      "se_depthwise\030\010 \001(\010:\005false\022<\n\003fpn\030\n \001(\0132/"
      ".object_detection.protos.FeaturePyramidN"
      "etworks\0224\n%replace_preprocessor_with_pla"
      "ceholder\030\013 \001(\010:\005false\022\025\n\nnum_layers\030\014 \001("
      "\005:\0016J\004\010\006\020\007\"i\n\026FeaturePyramidNetworks\022\024\n\t"
      "min_level\030\001 \001(\005:\0013\022\024\n\tmax_level\030\002 \001(\005:\0017"
      "\022#\n\026additional_layer_depth\030\003 \001(\005:\003256"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/ssd.proto", &protobuf_RegisterTypes);
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbox_5fcoder_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fhyperparams_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2flosses_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fregion_5fsimilarity_5fcalculator_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fssd_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssd_MaskHead::kMaskHeightFieldNumber;
const int Ssd_MaskHead::kMaskWidthFieldNumber;
const int Ssd_MaskHead::kMasksAreClassAgnosticFieldNumber;
const int Ssd_MaskHead::kMaskPredictionConvDepthFieldNumber;
const int Ssd_MaskHead::kMaskPredictionNumConvLayersFieldNumber;
const int Ssd_MaskHead::kConvolveThenUpsampleMasksFieldNumber;
const int Ssd_MaskHead::kMaskLossWeightFieldNumber;
const int Ssd_MaskHead::kMaskLossSampleSizeFieldNumber;
const int Ssd_MaskHead::kConvHyperparamsFieldNumber;
const int Ssd_MaskHead::kInitialCropSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssd_MaskHead::Ssd_MaskHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Ssd.MaskHead)
}
Ssd_MaskHead::Ssd_MaskHead(const Ssd_MaskHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = NULL;
  }
  ::memcpy(&convolve_then_upsample_masks_, &from.convolve_then_upsample_masks_,
    static_cast<size_t>(reinterpret_cast<char*>(&initial_crop_size_) -
    reinterpret_cast<char*>(&convolve_then_upsample_masks_)) + sizeof(initial_crop_size_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Ssd.MaskHead)
}

void Ssd_MaskHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convolve_then_upsample_masks_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(convolve_then_upsample_masks_));
  mask_height_ = 15;
  mask_width_ = 15;
  masks_are_class_agnostic_ = true;
  mask_prediction_conv_depth_ = 256;
  mask_prediction_num_conv_layers_ = 2;
  mask_loss_weight_ = 5;
  mask_loss_sample_size_ = 16;
  initial_crop_size_ = 15;
}

Ssd_MaskHead::~Ssd_MaskHead() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Ssd.MaskHead)
  SharedDtor();
}

void Ssd_MaskHead::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
}

void Ssd_MaskHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssd_MaskHead::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssd_MaskHead& Ssd_MaskHead::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ssd_MaskHead* Ssd_MaskHead::New(::google::protobuf::Arena* arena) const {
  Ssd_MaskHead* n = new Ssd_MaskHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssd_MaskHead::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Ssd.MaskHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_conv_hyperparams()) {
    GOOGLE_DCHECK(conv_hyperparams_ != NULL);
    conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    convolve_then_upsample_masks_ = false;
    mask_height_ = 15;
    mask_width_ = 15;
    masks_are_class_agnostic_ = true;
    mask_prediction_conv_depth_ = 256;
    mask_prediction_num_conv_layers_ = 2;
    mask_loss_weight_ = 5;
  }
  if (cached_has_bits & 768u) {
    mask_loss_sample_size_ = 16;
    initial_crop_size_ = 15;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ssd_MaskHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Ssd.MaskHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mask_height = 1 [default = 15];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mask_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_width = 2 [default = 15];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mask_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool masks_are_class_agnostic = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_masks_are_class_agnostic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masks_are_class_agnostic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_prediction_conv_depth = 4 [default = 256];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_mask_prediction_conv_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_prediction_conv_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mask_prediction_num_conv_layers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_prediction_num_conv_layers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convolve_then_upsample_masks = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_convolve_then_upsample_masks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convolve_then_upsample_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mask_loss_weight = 7 [default = 5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_mask_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mask_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_loss_sample_size = 8 [default = 16];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_mask_loss_sample_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_loss_sample_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_crop_size = 10 [default = 15];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_initial_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Ssd.MaskHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Ssd.MaskHead)
  return false;
#undef DO_
}

void Ssd_MaskHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Ssd.MaskHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mask_height = 1 [default = 15];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mask_height(), output);
  }

  // optional int32 mask_width = 2 [default = 15];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mask_width(), output);
  }

  // optional bool masks_are_class_agnostic = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->masks_are_class_agnostic(), output);
  }

  // optional int32 mask_prediction_conv_depth = 4 [default = 256];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mask_prediction_conv_depth(), output);
  }

  // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mask_prediction_num_conv_layers(), output);
  }

  // optional bool convolve_then_upsample_masks = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->convolve_then_upsample_masks(), output);
  }

  // optional float mask_loss_weight = 7 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mask_loss_weight(), output);
  }

  // optional int32 mask_loss_sample_size = 8 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mask_loss_sample_size(), output);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->conv_hyperparams_, output);
  }

  // optional int32 initial_crop_size = 10 [default = 15];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->initial_crop_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Ssd.MaskHead)
}

::google::protobuf::uint8* Ssd_MaskHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Ssd.MaskHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 mask_height = 1 [default = 15];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mask_height(), target);
  }

  // optional int32 mask_width = 2 [default = 15];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mask_width(), target);
  }

  // optional bool masks_are_class_agnostic = 3 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->masks_are_class_agnostic(), target);
  }

  // optional int32 mask_prediction_conv_depth = 4 [default = 256];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mask_prediction_conv_depth(), target);
  }

  // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mask_prediction_num_conv_layers(), target);
  }

  // optional bool convolve_then_upsample_masks = 6 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->convolve_then_upsample_masks(), target);
  }

  // optional float mask_loss_weight = 7 [default = 5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mask_loss_weight(), target);
  }

  // optional int32 mask_loss_sample_size = 8 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mask_loss_sample_size(), target);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->conv_hyperparams_, deterministic, target);
  }

  // optional int32 initial_crop_size = 10 [default = 15];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->initial_crop_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Ssd.MaskHead)
  return target;
}

size_t Ssd_MaskHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Ssd.MaskHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
    if (has_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conv_hyperparams_);
    }

    // optional bool convolve_then_upsample_masks = 6 [default = false];
    if (has_convolve_then_upsample_masks()) {
      total_size += 1 + 1;
    }

    // optional int32 mask_height = 1 [default = 15];
    if (has_mask_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_height());
    }

    // optional int32 mask_width = 2 [default = 15];
    if (has_mask_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_width());
    }

    // optional bool masks_are_class_agnostic = 3 [default = true];
    if (has_masks_are_class_agnostic()) {
      total_size += 1 + 1;
    }

    // optional int32 mask_prediction_conv_depth = 4 [default = 256];
    if (has_mask_prediction_conv_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_prediction_conv_depth());
    }

    // optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
    if (has_mask_prediction_num_conv_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_prediction_num_conv_layers());
    }

    // optional float mask_loss_weight = 7 [default = 5];
    if (has_mask_loss_weight()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 mask_loss_sample_size = 8 [default = 16];
    if (has_mask_loss_sample_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_loss_sample_size());
    }

    // optional int32 initial_crop_size = 10 [default = 15];
    if (has_initial_crop_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_crop_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssd_MaskHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Ssd.MaskHead)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssd_MaskHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssd_MaskHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Ssd.MaskHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Ssd.MaskHead)
    MergeFrom(*source);
  }
}

void Ssd_MaskHead::MergeFrom(const Ssd_MaskHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Ssd.MaskHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      convolve_then_upsample_masks_ = from.convolve_then_upsample_masks_;
    }
    if (cached_has_bits & 0x00000004u) {
      mask_height_ = from.mask_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      mask_width_ = from.mask_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      masks_are_class_agnostic_ = from.masks_are_class_agnostic_;
    }
    if (cached_has_bits & 0x00000020u) {
      mask_prediction_conv_depth_ = from.mask_prediction_conv_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      mask_prediction_num_conv_layers_ = from.mask_prediction_num_conv_layers_;
    }
    if (cached_has_bits & 0x00000080u) {
      mask_loss_weight_ = from.mask_loss_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      mask_loss_sample_size_ = from.mask_loss_sample_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      initial_crop_size_ = from.initial_crop_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ssd_MaskHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Ssd.MaskHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssd_MaskHead::CopyFrom(const Ssd_MaskHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Ssd.MaskHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssd_MaskHead::IsInitialized() const {
  return true;
}

void Ssd_MaskHead::Swap(Ssd_MaskHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssd_MaskHead::InternalSwap(Ssd_MaskHead* other) {
  using std::swap;
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(convolve_then_upsample_masks_, other->convolve_then_upsample_masks_);
  swap(mask_height_, other->mask_height_);
  swap(mask_width_, other->mask_width_);
  swap(masks_are_class_agnostic_, other->masks_are_class_agnostic_);
  swap(mask_prediction_conv_depth_, other->mask_prediction_conv_depth_);
  swap(mask_prediction_num_conv_layers_, other->mask_prediction_num_conv_layers_);
  swap(mask_loss_weight_, other->mask_loss_weight_);
  swap(mask_loss_sample_size_, other->mask_loss_sample_size_);
  swap(initial_crop_size_, other->initial_crop_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssd_MaskHead::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ssd_MaskHead

// optional int32 mask_height = 1 [default = 15];
bool Ssd_MaskHead::has_mask_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ssd_MaskHead::set_has_mask_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Ssd_MaskHead::clear_has_mask_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ssd_MaskHead::clear_mask_height() {
  mask_height_ = 15;
  clear_has_mask_height();
}
::google::protobuf::int32 Ssd_MaskHead::mask_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.mask_height)
  return mask_height_;
}
void Ssd_MaskHead::set_mask_height(::google::protobuf::int32 value) {
  set_has_mask_height();
  mask_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.mask_height)
}

// optional int32 mask_width = 2 [default = 15];
bool Ssd_MaskHead::has_mask_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ssd_MaskHead::set_has_mask_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Ssd_MaskHead::clear_has_mask_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ssd_MaskHead::clear_mask_width() {
  mask_width_ = 15;
  clear_has_mask_width();
}
::google::protobuf::int32 Ssd_MaskHead::mask_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.mask_width)
  return mask_width_;
}
void Ssd_MaskHead::set_mask_width(::google::protobuf::int32 value) {
  set_has_mask_width();
  mask_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.mask_width)
}

// optional bool masks_are_class_agnostic = 3 [default = true];
bool Ssd_MaskHead::has_masks_are_class_agnostic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ssd_MaskHead::set_has_masks_are_class_agnostic() {
  _has_bits_[0] |= 0x00000010u;
}
void Ssd_MaskHead::clear_has_masks_are_class_agnostic() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ssd_MaskHead::clear_masks_are_class_agnostic() {
  masks_are_class_agnostic_ = true;
  clear_has_masks_are_class_agnostic();
}
bool Ssd_MaskHead::masks_are_class_agnostic() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.masks_are_class_agnostic)
  return masks_are_class_agnostic_;
}
void Ssd_MaskHead::set_masks_are_class_agnostic(bool value) {
  set_has_masks_are_class_agnostic();
  masks_are_class_agnostic_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.masks_are_class_agnostic)
}

// optional int32 mask_prediction_conv_depth = 4 [default = 256];
bool Ssd_MaskHead::has_mask_prediction_conv_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ssd_MaskHead::set_has_mask_prediction_conv_depth() {
  _has_bits_[0] |= 0x00000020u;
}
void Ssd_MaskHead::clear_has_mask_prediction_conv_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ssd_MaskHead::clear_mask_prediction_conv_depth() {
  mask_prediction_conv_depth_ = 256;
  clear_has_mask_prediction_conv_depth();
}
::google::protobuf::int32 Ssd_MaskHead::mask_prediction_conv_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.mask_prediction_conv_depth)
  return mask_prediction_conv_depth_;
}
void Ssd_MaskHead::set_mask_prediction_conv_depth(::google::protobuf::int32 value) {
  set_has_mask_prediction_conv_depth();
  mask_prediction_conv_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.mask_prediction_conv_depth)
}

// optional int32 mask_prediction_num_conv_layers = 5 [default = 2];
bool Ssd_MaskHead::has_mask_prediction_num_conv_layers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ssd_MaskHead::set_has_mask_prediction_num_conv_layers() {
  _has_bits_[0] |= 0x00000040u;
}
void Ssd_MaskHead::clear_has_mask_prediction_num_conv_layers() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ssd_MaskHead::clear_mask_prediction_num_conv_layers() {
  mask_prediction_num_conv_layers_ = 2;
  clear_has_mask_prediction_num_conv_layers();
}
::google::protobuf::int32 Ssd_MaskHead::mask_prediction_num_conv_layers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.mask_prediction_num_conv_layers)
  return mask_prediction_num_conv_layers_;
}
void Ssd_MaskHead::set_mask_prediction_num_conv_layers(::google::protobuf::int32 value) {
  set_has_mask_prediction_num_conv_layers();
  mask_prediction_num_conv_layers_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.mask_prediction_num_conv_layers)
}

// optional bool convolve_then_upsample_masks = 6 [default = false];
bool Ssd_MaskHead::has_convolve_then_upsample_masks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ssd_MaskHead::set_has_convolve_then_upsample_masks() {
  _has_bits_[0] |= 0x00000002u;
}
void Ssd_MaskHead::clear_has_convolve_then_upsample_masks() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ssd_MaskHead::clear_convolve_then_upsample_masks() {
  convolve_then_upsample_masks_ = false;
  clear_has_convolve_then_upsample_masks();
}
bool Ssd_MaskHead::convolve_then_upsample_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.convolve_then_upsample_masks)
  return convolve_then_upsample_masks_;
}
void Ssd_MaskHead::set_convolve_then_upsample_masks(bool value) {
  set_has_convolve_then_upsample_masks();
  convolve_then_upsample_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.convolve_then_upsample_masks)
}

// optional float mask_loss_weight = 7 [default = 5];
bool Ssd_MaskHead::has_mask_loss_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ssd_MaskHead::set_has_mask_loss_weight() {
  _has_bits_[0] |= 0x00000080u;
}
void Ssd_MaskHead::clear_has_mask_loss_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ssd_MaskHead::clear_mask_loss_weight() {
  mask_loss_weight_ = 5;
  clear_has_mask_loss_weight();
}
float Ssd_MaskHead::mask_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.mask_loss_weight)
  return mask_loss_weight_;
}
void Ssd_MaskHead::set_mask_loss_weight(float value) {
  set_has_mask_loss_weight();
  mask_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.mask_loss_weight)
}

// optional int32 mask_loss_sample_size = 8 [default = 16];
bool Ssd_MaskHead::has_mask_loss_sample_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ssd_MaskHead::set_has_mask_loss_sample_size() {
  _has_bits_[0] |= 0x00000100u;
}
void Ssd_MaskHead::clear_has_mask_loss_sample_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ssd_MaskHead::clear_mask_loss_sample_size() {
  mask_loss_sample_size_ = 16;
  clear_has_mask_loss_sample_size();
}
::google::protobuf::int32 Ssd_MaskHead::mask_loss_sample_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.mask_loss_sample_size)
  return mask_loss_sample_size_;
}
void Ssd_MaskHead::set_mask_loss_sample_size(::google::protobuf::int32 value) {
  set_has_mask_loss_sample_size();
  mask_loss_sample_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.mask_loss_sample_size)
}

// optional .object_detection.protos.Hyperparams conv_hyperparams = 9;
bool Ssd_MaskHead::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ssd_MaskHead::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
void Ssd_MaskHead::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ssd_MaskHead::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& Ssd_MaskHead::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* Ssd_MaskHead::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.MaskHead.conv_hyperparams)
  return conv_hyperparams_;
}
::object_detection::protos::Hyperparams* Ssd_MaskHead::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.MaskHead.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
void Ssd_MaskHead::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.MaskHead.conv_hyperparams)
}

// optional int32 initial_crop_size = 10 [default = 15];
bool Ssd_MaskHead::has_initial_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ssd_MaskHead::set_has_initial_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
void Ssd_MaskHead::clear_has_initial_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ssd_MaskHead::clear_initial_crop_size() {
  initial_crop_size_ = 15;
  clear_has_initial_crop_size();
}
::google::protobuf::int32 Ssd_MaskHead::initial_crop_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.MaskHead.initial_crop_size)
  return initial_crop_size_;
}
void Ssd_MaskHead::set_initial_crop_size(::google::protobuf::int32 value) {
  set_has_initial_crop_size();
  initial_crop_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.MaskHead.initial_crop_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssd::kNumClassesFieldNumber;
const int Ssd::kImageResizerFieldNumber;
const int Ssd::kFeatureExtractorFieldNumber;
const int Ssd::kBoxCoderFieldNumber;
const int Ssd::kMatcherFieldNumber;
const int Ssd::kSimilarityCalculatorFieldNumber;
const int Ssd::kEncodeBackgroundAsZerosFieldNumber;
const int Ssd::kNegativeClassWeightFieldNumber;
const int Ssd::kBoxPredictorFieldNumber;
const int Ssd::kAnchorGeneratorFieldNumber;
const int Ssd::kPostProcessingFieldNumber;
const int Ssd::kNormalizeLossByNumMatchesFieldNumber;
const int Ssd::kNormalizeLocLossByCodesizeFieldNumber;
const int Ssd::kLossFieldNumber;
const int Ssd::kFreezeBatchnormFieldNumber;
const int Ssd::kInplaceBatchnormUpdateFieldNumber;
const int Ssd::kAddBackgroundClassFieldNumber;
const int Ssd::kExplicitBackgroundClassFieldNumber;
const int Ssd::kUseConfidencesAsTargetsFieldNumber;
const int Ssd::kImplicitExampleWeightFieldNumber;
const int Ssd::kMaskHeadConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssd::Ssd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Ssd)
}
Ssd::Ssd(const Ssd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_resizer()) {
    image_resizer_ = new ::object_detection::protos::ImageResizer(*from.image_resizer_);
  } else {
    image_resizer_ = NULL;
  }
  if (from.has_feature_extractor()) {
    feature_extractor_ = new ::object_detection::protos::SsdFeatureExtractor(*from.feature_extractor_);
  } else {
    feature_extractor_ = NULL;
  }
  if (from.has_box_coder()) {
    box_coder_ = new ::object_detection::protos::BoxCoder(*from.box_coder_);
  } else {
    box_coder_ = NULL;
  }
  if (from.has_matcher()) {
    matcher_ = new ::object_detection::protos::Matcher(*from.matcher_);
  } else {
    matcher_ = NULL;
  }
  if (from.has_similarity_calculator()) {
    similarity_calculator_ = new ::object_detection::protos::RegionSimilarityCalculator(*from.similarity_calculator_);
  } else {
    similarity_calculator_ = NULL;
  }
  if (from.has_box_predictor()) {
    box_predictor_ = new ::object_detection::protos::BoxPredictor(*from.box_predictor_);
  } else {
    box_predictor_ = NULL;
  }
  if (from.has_anchor_generator()) {
    anchor_generator_ = new ::object_detection::protos::AnchorGenerator(*from.anchor_generator_);
  } else {
    anchor_generator_ = NULL;
  }
  if (from.has_post_processing()) {
    post_processing_ = new ::object_detection::protos::PostProcessing(*from.post_processing_);
  } else {
    post_processing_ = NULL;
  }
  if (from.has_loss()) {
    loss_ = new ::object_detection::protos::Loss(*from.loss_);
  } else {
    loss_ = NULL;
  }
  if (from.has_mask_head_config()) {
    mask_head_config_ = new ::object_detection::protos::Ssd_MaskHead(*from.mask_head_config_);
  } else {
    mask_head_config_ = NULL;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_background_class_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(add_background_class_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Ssd)
}

void Ssd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&image_resizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_confidences_as_targets_) -
      reinterpret_cast<char*>(&image_resizer_)) + sizeof(use_confidences_as_targets_));
  implicit_example_weight_ = 1;
  negative_class_weight_ = 1;
  normalize_loss_by_num_matches_ = true;
  add_background_class_ = true;
}

Ssd::~Ssd() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Ssd)
  SharedDtor();
}

void Ssd::SharedDtor() {
  if (this != internal_default_instance()) delete image_resizer_;
  if (this != internal_default_instance()) delete feature_extractor_;
  if (this != internal_default_instance()) delete box_coder_;
  if (this != internal_default_instance()) delete matcher_;
  if (this != internal_default_instance()) delete similarity_calculator_;
  if (this != internal_default_instance()) delete box_predictor_;
  if (this != internal_default_instance()) delete anchor_generator_;
  if (this != internal_default_instance()) delete post_processing_;
  if (this != internal_default_instance()) delete loss_;
  if (this != internal_default_instance()) delete mask_head_config_;
}

void Ssd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ssd::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ssd& Ssd::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ssd* Ssd::New(::google::protobuf::Arena* arena) const {
  Ssd* n = new Ssd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ssd::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Ssd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(image_resizer_ != NULL);
      image_resizer_->::object_detection::protos::ImageResizer::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feature_extractor_ != NULL);
      feature_extractor_->::object_detection::protos::SsdFeatureExtractor::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(box_coder_ != NULL);
      box_coder_->::object_detection::protos::BoxCoder::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(matcher_ != NULL);
      matcher_->::object_detection::protos::Matcher::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(similarity_calculator_ != NULL);
      similarity_calculator_->::object_detection::protos::RegionSimilarityCalculator::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(box_predictor_ != NULL);
      box_predictor_->::object_detection::protos::BoxPredictor::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(anchor_generator_ != NULL);
      anchor_generator_->::object_detection::protos::AnchorGenerator::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(post_processing_ != NULL);
      post_processing_->::object_detection::protos::PostProcessing::Clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(loss_ != NULL);
      loss_->::object_detection::protos::Loss::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(mask_head_config_ != NULL);
      mask_head_config_->::object_detection::protos::Ssd_MaskHead::Clear();
    }
  }
  if (cached_has_bits & 64512u) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&explicit_background_class_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(explicit_background_class_));
  }
  if (cached_has_bits & 2031616u) {
    use_confidences_as_targets_ = false;
    implicit_example_weight_ = 1;
    negative_class_weight_ = 1;
    normalize_loss_by_num_matches_ = true;
    add_background_class_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ssd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Ssd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_classes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ImageResizer image_resizer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BoxCoder box_coder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_coder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Matcher matcher = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_similarity_calculator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BoxPredictor box_predictor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.PostProcessing post_processing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_processing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize_loss_by_num_matches = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_normalize_loss_by_num_matches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_loss_by_num_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Loss loss = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encode_background_as_zeros = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_encode_background_as_zeros();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encode_background_as_zeros_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float negative_class_weight = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_negative_class_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &negative_class_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_normalize_loc_loss_by_codesize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_loc_loss_by_codesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inplace_batchnorm_update = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_inplace_batchnorm_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inplace_batchnorm_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool freeze_batchnorm = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_freeze_batchnorm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freeze_batchnorm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool add_background_class = 21 [default = true];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_add_background_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_background_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_confidences_as_targets = 22 [default = false];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_use_confidences_as_targets();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_confidences_as_targets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float implicit_example_weight = 23 [default = 1];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_implicit_example_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &implicit_example_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool explicit_background_class = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_explicit_background_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &explicit_background_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mask_head_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Ssd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Ssd)
  return false;
#undef DO_
}

void Ssd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Ssd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_classes(), output);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_resizer_, output);
  }

  // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->feature_extractor_, output);
  }

  // optional .object_detection.protos.BoxCoder box_coder = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->box_coder_, output);
  }

  // optional .object_detection.protos.Matcher matcher = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->matcher_, output);
  }

  // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->similarity_calculator_, output);
  }

  // optional .object_detection.protos.BoxPredictor box_predictor = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->box_predictor_, output);
  }

  // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->anchor_generator_, output);
  }

  // optional .object_detection.protos.PostProcessing post_processing = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->post_processing_, output);
  }

  // optional bool normalize_loss_by_num_matches = 10 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->normalize_loss_by_num_matches(), output);
  }

  // optional .object_detection.protos.Loss loss = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->loss_, output);
  }

  // optional bool encode_background_as_zeros = 12 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->encode_background_as_zeros(), output);
  }

  // optional float negative_class_weight = 13 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->negative_class_weight(), output);
  }

  // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->normalize_loc_loss_by_codesize(), output);
  }

  // optional bool inplace_batchnorm_update = 15 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->inplace_batchnorm_update(), output);
  }

  // optional bool freeze_batchnorm = 16 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->freeze_batchnorm(), output);
  }

  // optional bool add_background_class = 21 [default = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->add_background_class(), output);
  }

  // optional bool use_confidences_as_targets = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->use_confidences_as_targets(), output);
  }

  // optional float implicit_example_weight = 23 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->implicit_example_weight(), output);
  }

  // optional bool explicit_background_class = 24 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->explicit_background_class(), output);
  }

  // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->mask_head_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Ssd)
}

::google::protobuf::uint8* Ssd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Ssd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_classes(), target);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->image_resizer_, deterministic, target);
  }

  // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->feature_extractor_, deterministic, target);
  }

  // optional .object_detection.protos.BoxCoder box_coder = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->box_coder_, deterministic, target);
  }

  // optional .object_detection.protos.Matcher matcher = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->matcher_, deterministic, target);
  }

  // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->similarity_calculator_, deterministic, target);
  }

  // optional .object_detection.protos.BoxPredictor box_predictor = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->box_predictor_, deterministic, target);
  }

  // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->anchor_generator_, deterministic, target);
  }

  // optional .object_detection.protos.PostProcessing post_processing = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->post_processing_, deterministic, target);
  }

  // optional bool normalize_loss_by_num_matches = 10 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->normalize_loss_by_num_matches(), target);
  }

  // optional .object_detection.protos.Loss loss = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->loss_, deterministic, target);
  }

  // optional bool encode_background_as_zeros = 12 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->encode_background_as_zeros(), target);
  }

  // optional float negative_class_weight = 13 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->negative_class_weight(), target);
  }

  // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->normalize_loc_loss_by_codesize(), target);
  }

  // optional bool inplace_batchnorm_update = 15 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->inplace_batchnorm_update(), target);
  }

  // optional bool freeze_batchnorm = 16 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->freeze_batchnorm(), target);
  }

  // optional bool add_background_class = 21 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->add_background_class(), target);
  }

  // optional bool use_confidences_as_targets = 22 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->use_confidences_as_targets(), target);
  }

  // optional float implicit_example_weight = 23 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->implicit_example_weight(), target);
  }

  // optional bool explicit_background_class = 24 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->explicit_background_class(), target);
  }

  // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->mask_head_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Ssd)
  return target;
}

size_t Ssd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Ssd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.ImageResizer image_resizer = 2;
    if (has_image_resizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_resizer_);
    }

    // optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
    if (has_feature_extractor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feature_extractor_);
    }

    // optional .object_detection.protos.BoxCoder box_coder = 4;
    if (has_box_coder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->box_coder_);
    }

    // optional .object_detection.protos.Matcher matcher = 5;
    if (has_matcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->matcher_);
    }

    // optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
    if (has_similarity_calculator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->similarity_calculator_);
    }

    // optional .object_detection.protos.BoxPredictor box_predictor = 7;
    if (has_box_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->box_predictor_);
    }

    // optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
    if (has_anchor_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->anchor_generator_);
    }

    // optional .object_detection.protos.PostProcessing post_processing = 9;
    if (has_post_processing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->post_processing_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .object_detection.protos.Loss loss = 11;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->loss_);
    }

    // optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
    if (has_mask_head_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mask_head_config_);
    }

    // optional int32 num_classes = 1;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional bool encode_background_as_zeros = 12 [default = false];
    if (has_encode_background_as_zeros()) {
      total_size += 1 + 1;
    }

    // optional bool normalize_loc_loss_by_codesize = 14 [default = false];
    if (has_normalize_loc_loss_by_codesize()) {
      total_size += 1 + 1;
    }

    // optional bool freeze_batchnorm = 16 [default = false];
    if (has_freeze_batchnorm()) {
      total_size += 2 + 1;
    }

    // optional bool inplace_batchnorm_update = 15 [default = false];
    if (has_inplace_batchnorm_update()) {
      total_size += 1 + 1;
    }

    // optional bool explicit_background_class = 24 [default = false];
    if (has_explicit_background_class()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bool use_confidences_as_targets = 22 [default = false];
    if (has_use_confidences_as_targets()) {
      total_size += 2 + 1;
    }

    // optional float implicit_example_weight = 23 [default = 1];
    if (has_implicit_example_weight()) {
      total_size += 2 + 4;
    }

    // optional float negative_class_weight = 13 [default = 1];
    if (has_negative_class_weight()) {
      total_size += 1 + 4;
    }

    // optional bool normalize_loss_by_num_matches = 10 [default = true];
    if (has_normalize_loss_by_num_matches()) {
      total_size += 1 + 1;
    }

    // optional bool add_background_class = 21 [default = true];
    if (has_add_background_class()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ssd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Ssd)
  GOOGLE_DCHECK_NE(&from, this);
  const Ssd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ssd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Ssd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Ssd)
    MergeFrom(*source);
  }
}

void Ssd::MergeFrom(const Ssd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Ssd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_image_resizer()->::object_detection::protos::ImageResizer::MergeFrom(from.image_resizer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_feature_extractor()->::object_detection::protos::SsdFeatureExtractor::MergeFrom(from.feature_extractor());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_box_coder()->::object_detection::protos::BoxCoder::MergeFrom(from.box_coder());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_matcher()->::object_detection::protos::Matcher::MergeFrom(from.matcher());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_similarity_calculator()->::object_detection::protos::RegionSimilarityCalculator::MergeFrom(from.similarity_calculator());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_box_predictor()->::object_detection::protos::BoxPredictor::MergeFrom(from.box_predictor());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_anchor_generator()->::object_detection::protos::AnchorGenerator::MergeFrom(from.anchor_generator());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_post_processing()->::object_detection::protos::PostProcessing::MergeFrom(from.post_processing());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_loss()->::object_detection::protos::Loss::MergeFrom(from.loss());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_mask_head_config()->::object_detection::protos::Ssd_MaskHead::MergeFrom(from.mask_head_config());
    }
    if (cached_has_bits & 0x00000400u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000800u) {
      encode_background_as_zeros_ = from.encode_background_as_zeros_;
    }
    if (cached_has_bits & 0x00001000u) {
      normalize_loc_loss_by_codesize_ = from.normalize_loc_loss_by_codesize_;
    }
    if (cached_has_bits & 0x00002000u) {
      freeze_batchnorm_ = from.freeze_batchnorm_;
    }
    if (cached_has_bits & 0x00004000u) {
      inplace_batchnorm_update_ = from.inplace_batchnorm_update_;
    }
    if (cached_has_bits & 0x00008000u) {
      explicit_background_class_ = from.explicit_background_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      use_confidences_as_targets_ = from.use_confidences_as_targets_;
    }
    if (cached_has_bits & 0x00020000u) {
      implicit_example_weight_ = from.implicit_example_weight_;
    }
    if (cached_has_bits & 0x00040000u) {
      negative_class_weight_ = from.negative_class_weight_;
    }
    if (cached_has_bits & 0x00080000u) {
      normalize_loss_by_num_matches_ = from.normalize_loss_by_num_matches_;
    }
    if (cached_has_bits & 0x00100000u) {
      add_background_class_ = from.add_background_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ssd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Ssd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ssd::CopyFrom(const Ssd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Ssd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssd::IsInitialized() const {
  return true;
}

void Ssd::Swap(Ssd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssd::InternalSwap(Ssd* other) {
  using std::swap;
  swap(image_resizer_, other->image_resizer_);
  swap(feature_extractor_, other->feature_extractor_);
  swap(box_coder_, other->box_coder_);
  swap(matcher_, other->matcher_);
  swap(similarity_calculator_, other->similarity_calculator_);
  swap(box_predictor_, other->box_predictor_);
  swap(anchor_generator_, other->anchor_generator_);
  swap(post_processing_, other->post_processing_);
  swap(loss_, other->loss_);
  swap(mask_head_config_, other->mask_head_config_);
  swap(num_classes_, other->num_classes_);
  swap(encode_background_as_zeros_, other->encode_background_as_zeros_);
  swap(normalize_loc_loss_by_codesize_, other->normalize_loc_loss_by_codesize_);
  swap(freeze_batchnorm_, other->freeze_batchnorm_);
  swap(inplace_batchnorm_update_, other->inplace_batchnorm_update_);
  swap(explicit_background_class_, other->explicit_background_class_);
  swap(use_confidences_as_targets_, other->use_confidences_as_targets_);
  swap(implicit_example_weight_, other->implicit_example_weight_);
  swap(negative_class_weight_, other->negative_class_weight_);
  swap(normalize_loss_by_num_matches_, other->normalize_loss_by_num_matches_);
  swap(add_background_class_, other->add_background_class_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ssd::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ssd

// optional int32 num_classes = 1;
bool Ssd::has_num_classes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ssd::set_has_num_classes() {
  _has_bits_[0] |= 0x00000400u;
}
void Ssd::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ssd::clear_num_classes() {
  num_classes_ = 0;
  clear_has_num_classes();
}
::google::protobuf::int32 Ssd::num_classes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.num_classes)
  return num_classes_;
}
void Ssd::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.num_classes)
}

// optional .object_detection.protos.ImageResizer image_resizer = 2;
bool Ssd::has_image_resizer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ssd::set_has_image_resizer() {
  _has_bits_[0] |= 0x00000001u;
}
void Ssd::clear_has_image_resizer() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ssd::clear_image_resizer() {
  if (image_resizer_ != NULL) image_resizer_->::object_detection::protos::ImageResizer::Clear();
  clear_has_image_resizer();
}
const ::object_detection::protos::ImageResizer& Ssd::image_resizer() const {
  const ::object_detection::protos::ImageResizer* p = image_resizer_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.image_resizer)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ImageResizer*>(
      &::object_detection::protos::_ImageResizer_default_instance_);
}
::object_detection::protos::ImageResizer* Ssd::mutable_image_resizer() {
  set_has_image_resizer();
  if (image_resizer_ == NULL) {
    image_resizer_ = new ::object_detection::protos::ImageResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.image_resizer)
  return image_resizer_;
}
::object_detection::protos::ImageResizer* Ssd::release_image_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.image_resizer)
  clear_has_image_resizer();
  ::object_detection::protos::ImageResizer* temp = image_resizer_;
  image_resizer_ = NULL;
  return temp;
}
void Ssd::set_allocated_image_resizer(::object_detection::protos::ImageResizer* image_resizer) {
  delete image_resizer_;
  image_resizer_ = image_resizer;
  if (image_resizer) {
    set_has_image_resizer();
  } else {
    clear_has_image_resizer();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.image_resizer)
}

// optional .object_detection.protos.SsdFeatureExtractor feature_extractor = 3;
bool Ssd::has_feature_extractor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ssd::set_has_feature_extractor() {
  _has_bits_[0] |= 0x00000002u;
}
void Ssd::clear_has_feature_extractor() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ssd::clear_feature_extractor() {
  if (feature_extractor_ != NULL) feature_extractor_->::object_detection::protos::SsdFeatureExtractor::Clear();
  clear_has_feature_extractor();
}
const ::object_detection::protos::SsdFeatureExtractor& Ssd::feature_extractor() const {
  const ::object_detection::protos::SsdFeatureExtractor* p = feature_extractor_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.feature_extractor)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::SsdFeatureExtractor*>(
      &::object_detection::protos::_SsdFeatureExtractor_default_instance_);
}
::object_detection::protos::SsdFeatureExtractor* Ssd::mutable_feature_extractor() {
  set_has_feature_extractor();
  if (feature_extractor_ == NULL) {
    feature_extractor_ = new ::object_detection::protos::SsdFeatureExtractor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.feature_extractor)
  return feature_extractor_;
}
::object_detection::protos::SsdFeatureExtractor* Ssd::release_feature_extractor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.feature_extractor)
  clear_has_feature_extractor();
  ::object_detection::protos::SsdFeatureExtractor* temp = feature_extractor_;
  feature_extractor_ = NULL;
  return temp;
}
void Ssd::set_allocated_feature_extractor(::object_detection::protos::SsdFeatureExtractor* feature_extractor) {
  delete feature_extractor_;
  feature_extractor_ = feature_extractor;
  if (feature_extractor) {
    set_has_feature_extractor();
  } else {
    clear_has_feature_extractor();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.feature_extractor)
}

// optional .object_detection.protos.BoxCoder box_coder = 4;
bool Ssd::has_box_coder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ssd::set_has_box_coder() {
  _has_bits_[0] |= 0x00000004u;
}
void Ssd::clear_has_box_coder() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ssd::clear_box_coder() {
  if (box_coder_ != NULL) box_coder_->::object_detection::protos::BoxCoder::Clear();
  clear_has_box_coder();
}
const ::object_detection::protos::BoxCoder& Ssd::box_coder() const {
  const ::object_detection::protos::BoxCoder* p = box_coder_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.box_coder)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::BoxCoder*>(
      &::object_detection::protos::_BoxCoder_default_instance_);
}
::object_detection::protos::BoxCoder* Ssd::mutable_box_coder() {
  set_has_box_coder();
  if (box_coder_ == NULL) {
    box_coder_ = new ::object_detection::protos::BoxCoder;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.box_coder)
  return box_coder_;
}
::object_detection::protos::BoxCoder* Ssd::release_box_coder() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.box_coder)
  clear_has_box_coder();
  ::object_detection::protos::BoxCoder* temp = box_coder_;
  box_coder_ = NULL;
  return temp;
}
void Ssd::set_allocated_box_coder(::object_detection::protos::BoxCoder* box_coder) {
  delete box_coder_;
  box_coder_ = box_coder;
  if (box_coder) {
    set_has_box_coder();
  } else {
    clear_has_box_coder();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.box_coder)
}

// optional .object_detection.protos.Matcher matcher = 5;
bool Ssd::has_matcher() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ssd::set_has_matcher() {
  _has_bits_[0] |= 0x00000008u;
}
void Ssd::clear_has_matcher() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ssd::clear_matcher() {
  if (matcher_ != NULL) matcher_->::object_detection::protos::Matcher::Clear();
  clear_has_matcher();
}
const ::object_detection::protos::Matcher& Ssd::matcher() const {
  const ::object_detection::protos::Matcher* p = matcher_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.matcher)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Matcher*>(
      &::object_detection::protos::_Matcher_default_instance_);
}
::object_detection::protos::Matcher* Ssd::mutable_matcher() {
  set_has_matcher();
  if (matcher_ == NULL) {
    matcher_ = new ::object_detection::protos::Matcher;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.matcher)
  return matcher_;
}
::object_detection::protos::Matcher* Ssd::release_matcher() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.matcher)
  clear_has_matcher();
  ::object_detection::protos::Matcher* temp = matcher_;
  matcher_ = NULL;
  return temp;
}
void Ssd::set_allocated_matcher(::object_detection::protos::Matcher* matcher) {
  delete matcher_;
  matcher_ = matcher;
  if (matcher) {
    set_has_matcher();
  } else {
    clear_has_matcher();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.matcher)
}

// optional .object_detection.protos.RegionSimilarityCalculator similarity_calculator = 6;
bool Ssd::has_similarity_calculator() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ssd::set_has_similarity_calculator() {
  _has_bits_[0] |= 0x00000010u;
}
void Ssd::clear_has_similarity_calculator() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ssd::clear_similarity_calculator() {
  if (similarity_calculator_ != NULL) similarity_calculator_->::object_detection::protos::RegionSimilarityCalculator::Clear();
  clear_has_similarity_calculator();
}
const ::object_detection::protos::RegionSimilarityCalculator& Ssd::similarity_calculator() const {
  const ::object_detection::protos::RegionSimilarityCalculator* p = similarity_calculator_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.similarity_calculator)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::RegionSimilarityCalculator*>(
      &::object_detection::protos::_RegionSimilarityCalculator_default_instance_);
}
::object_detection::protos::RegionSimilarityCalculator* Ssd::mutable_similarity_calculator() {
  set_has_similarity_calculator();
  if (similarity_calculator_ == NULL) {
    similarity_calculator_ = new ::object_detection::protos::RegionSimilarityCalculator;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.similarity_calculator)
  return similarity_calculator_;
}
::object_detection::protos::RegionSimilarityCalculator* Ssd::release_similarity_calculator() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.similarity_calculator)
  clear_has_similarity_calculator();
  ::object_detection::protos::RegionSimilarityCalculator* temp = similarity_calculator_;
  similarity_calculator_ = NULL;
  return temp;
}
void Ssd::set_allocated_similarity_calculator(::object_detection::protos::RegionSimilarityCalculator* similarity_calculator) {
  delete similarity_calculator_;
  similarity_calculator_ = similarity_calculator;
  if (similarity_calculator) {
    set_has_similarity_calculator();
  } else {
    clear_has_similarity_calculator();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.similarity_calculator)
}

// optional bool encode_background_as_zeros = 12 [default = false];
bool Ssd::has_encode_background_as_zeros() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Ssd::set_has_encode_background_as_zeros() {
  _has_bits_[0] |= 0x00000800u;
}
void Ssd::clear_has_encode_background_as_zeros() {
  _has_bits_[0] &= ~0x00000800u;
}
void Ssd::clear_encode_background_as_zeros() {
  encode_background_as_zeros_ = false;
  clear_has_encode_background_as_zeros();
}
bool Ssd::encode_background_as_zeros() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.encode_background_as_zeros)
  return encode_background_as_zeros_;
}
void Ssd::set_encode_background_as_zeros(bool value) {
  set_has_encode_background_as_zeros();
  encode_background_as_zeros_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.encode_background_as_zeros)
}

// optional float negative_class_weight = 13 [default = 1];
bool Ssd::has_negative_class_weight() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Ssd::set_has_negative_class_weight() {
  _has_bits_[0] |= 0x00040000u;
}
void Ssd::clear_has_negative_class_weight() {
  _has_bits_[0] &= ~0x00040000u;
}
void Ssd::clear_negative_class_weight() {
  negative_class_weight_ = 1;
  clear_has_negative_class_weight();
}
float Ssd::negative_class_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.negative_class_weight)
  return negative_class_weight_;
}
void Ssd::set_negative_class_weight(float value) {
  set_has_negative_class_weight();
  negative_class_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.negative_class_weight)
}

// optional .object_detection.protos.BoxPredictor box_predictor = 7;
bool Ssd::has_box_predictor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ssd::set_has_box_predictor() {
  _has_bits_[0] |= 0x00000020u;
}
void Ssd::clear_has_box_predictor() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ssd::clear_box_predictor() {
  if (box_predictor_ != NULL) box_predictor_->::object_detection::protos::BoxPredictor::Clear();
  clear_has_box_predictor();
}
const ::object_detection::protos::BoxPredictor& Ssd::box_predictor() const {
  const ::object_detection::protos::BoxPredictor* p = box_predictor_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.box_predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::BoxPredictor*>(
      &::object_detection::protos::_BoxPredictor_default_instance_);
}
::object_detection::protos::BoxPredictor* Ssd::mutable_box_predictor() {
  set_has_box_predictor();
  if (box_predictor_ == NULL) {
    box_predictor_ = new ::object_detection::protos::BoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.box_predictor)
  return box_predictor_;
}
::object_detection::protos::BoxPredictor* Ssd::release_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.box_predictor)
  clear_has_box_predictor();
  ::object_detection::protos::BoxPredictor* temp = box_predictor_;
  box_predictor_ = NULL;
  return temp;
}
void Ssd::set_allocated_box_predictor(::object_detection::protos::BoxPredictor* box_predictor) {
  delete box_predictor_;
  box_predictor_ = box_predictor;
  if (box_predictor) {
    set_has_box_predictor();
  } else {
    clear_has_box_predictor();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.box_predictor)
}

// optional .object_detection.protos.AnchorGenerator anchor_generator = 8;
bool Ssd::has_anchor_generator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ssd::set_has_anchor_generator() {
  _has_bits_[0] |= 0x00000040u;
}
void Ssd::clear_has_anchor_generator() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ssd::clear_anchor_generator() {
  if (anchor_generator_ != NULL) anchor_generator_->::object_detection::protos::AnchorGenerator::Clear();
  clear_has_anchor_generator();
}
const ::object_detection::protos::AnchorGenerator& Ssd::anchor_generator() const {
  const ::object_detection::protos::AnchorGenerator* p = anchor_generator_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.anchor_generator)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::AnchorGenerator*>(
      &::object_detection::protos::_AnchorGenerator_default_instance_);
}
::object_detection::protos::AnchorGenerator* Ssd::mutable_anchor_generator() {
  set_has_anchor_generator();
  if (anchor_generator_ == NULL) {
    anchor_generator_ = new ::object_detection::protos::AnchorGenerator;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.anchor_generator)
  return anchor_generator_;
}
::object_detection::protos::AnchorGenerator* Ssd::release_anchor_generator() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.anchor_generator)
  clear_has_anchor_generator();
  ::object_detection::protos::AnchorGenerator* temp = anchor_generator_;
  anchor_generator_ = NULL;
  return temp;
}
void Ssd::set_allocated_anchor_generator(::object_detection::protos::AnchorGenerator* anchor_generator) {
  delete anchor_generator_;
  anchor_generator_ = anchor_generator;
  if (anchor_generator) {
    set_has_anchor_generator();
  } else {
    clear_has_anchor_generator();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.anchor_generator)
}

// optional .object_detection.protos.PostProcessing post_processing = 9;
bool Ssd::has_post_processing() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ssd::set_has_post_processing() {
  _has_bits_[0] |= 0x00000080u;
}
void Ssd::clear_has_post_processing() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ssd::clear_post_processing() {
  if (post_processing_ != NULL) post_processing_->::object_detection::protos::PostProcessing::Clear();
  clear_has_post_processing();
}
const ::object_detection::protos::PostProcessing& Ssd::post_processing() const {
  const ::object_detection::protos::PostProcessing* p = post_processing_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.post_processing)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::PostProcessing*>(
      &::object_detection::protos::_PostProcessing_default_instance_);
}
::object_detection::protos::PostProcessing* Ssd::mutable_post_processing() {
  set_has_post_processing();
  if (post_processing_ == NULL) {
    post_processing_ = new ::object_detection::protos::PostProcessing;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.post_processing)
  return post_processing_;
}
::object_detection::protos::PostProcessing* Ssd::release_post_processing() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.post_processing)
  clear_has_post_processing();
  ::object_detection::protos::PostProcessing* temp = post_processing_;
  post_processing_ = NULL;
  return temp;
}
void Ssd::set_allocated_post_processing(::object_detection::protos::PostProcessing* post_processing) {
  delete post_processing_;
  post_processing_ = post_processing;
  if (post_processing) {
    set_has_post_processing();
  } else {
    clear_has_post_processing();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.post_processing)
}

// optional bool normalize_loss_by_num_matches = 10 [default = true];
bool Ssd::has_normalize_loss_by_num_matches() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Ssd::set_has_normalize_loss_by_num_matches() {
  _has_bits_[0] |= 0x00080000u;
}
void Ssd::clear_has_normalize_loss_by_num_matches() {
  _has_bits_[0] &= ~0x00080000u;
}
void Ssd::clear_normalize_loss_by_num_matches() {
  normalize_loss_by_num_matches_ = true;
  clear_has_normalize_loss_by_num_matches();
}
bool Ssd::normalize_loss_by_num_matches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.normalize_loss_by_num_matches)
  return normalize_loss_by_num_matches_;
}
void Ssd::set_normalize_loss_by_num_matches(bool value) {
  set_has_normalize_loss_by_num_matches();
  normalize_loss_by_num_matches_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.normalize_loss_by_num_matches)
}

// optional bool normalize_loc_loss_by_codesize = 14 [default = false];
bool Ssd::has_normalize_loc_loss_by_codesize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Ssd::set_has_normalize_loc_loss_by_codesize() {
  _has_bits_[0] |= 0x00001000u;
}
void Ssd::clear_has_normalize_loc_loss_by_codesize() {
  _has_bits_[0] &= ~0x00001000u;
}
void Ssd::clear_normalize_loc_loss_by_codesize() {
  normalize_loc_loss_by_codesize_ = false;
  clear_has_normalize_loc_loss_by_codesize();
}
bool Ssd::normalize_loc_loss_by_codesize() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.normalize_loc_loss_by_codesize)
  return normalize_loc_loss_by_codesize_;
}
void Ssd::set_normalize_loc_loss_by_codesize(bool value) {
  set_has_normalize_loc_loss_by_codesize();
  normalize_loc_loss_by_codesize_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.normalize_loc_loss_by_codesize)
}

// optional .object_detection.protos.Loss loss = 11;
bool Ssd::has_loss() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ssd::set_has_loss() {
  _has_bits_[0] |= 0x00000100u;
}
void Ssd::clear_has_loss() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ssd::clear_loss() {
  if (loss_ != NULL) loss_->::object_detection::protos::Loss::Clear();
  clear_has_loss();
}
const ::object_detection::protos::Loss& Ssd::loss() const {
  const ::object_detection::protos::Loss* p = loss_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.loss)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Loss*>(
      &::object_detection::protos::_Loss_default_instance_);
}
::object_detection::protos::Loss* Ssd::mutable_loss() {
  set_has_loss();
  if (loss_ == NULL) {
    loss_ = new ::object_detection::protos::Loss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.loss)
  return loss_;
}
::object_detection::protos::Loss* Ssd::release_loss() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.loss)
  clear_has_loss();
  ::object_detection::protos::Loss* temp = loss_;
  loss_ = NULL;
  return temp;
}
void Ssd::set_allocated_loss(::object_detection::protos::Loss* loss) {
  delete loss_;
  loss_ = loss;
  if (loss) {
    set_has_loss();
  } else {
    clear_has_loss();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.loss)
}

// optional bool freeze_batchnorm = 16 [default = false];
bool Ssd::has_freeze_batchnorm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Ssd::set_has_freeze_batchnorm() {
  _has_bits_[0] |= 0x00002000u;
}
void Ssd::clear_has_freeze_batchnorm() {
  _has_bits_[0] &= ~0x00002000u;
}
void Ssd::clear_freeze_batchnorm() {
  freeze_batchnorm_ = false;
  clear_has_freeze_batchnorm();
}
bool Ssd::freeze_batchnorm() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.freeze_batchnorm)
  return freeze_batchnorm_;
}
void Ssd::set_freeze_batchnorm(bool value) {
  set_has_freeze_batchnorm();
  freeze_batchnorm_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.freeze_batchnorm)
}

// optional bool inplace_batchnorm_update = 15 [default = false];
bool Ssd::has_inplace_batchnorm_update() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Ssd::set_has_inplace_batchnorm_update() {
  _has_bits_[0] |= 0x00004000u;
}
void Ssd::clear_has_inplace_batchnorm_update() {
  _has_bits_[0] &= ~0x00004000u;
}
void Ssd::clear_inplace_batchnorm_update() {
  inplace_batchnorm_update_ = false;
  clear_has_inplace_batchnorm_update();
}
bool Ssd::inplace_batchnorm_update() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.inplace_batchnorm_update)
  return inplace_batchnorm_update_;
}
void Ssd::set_inplace_batchnorm_update(bool value) {
  set_has_inplace_batchnorm_update();
  inplace_batchnorm_update_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.inplace_batchnorm_update)
}

// optional bool add_background_class = 21 [default = true];
bool Ssd::has_add_background_class() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Ssd::set_has_add_background_class() {
  _has_bits_[0] |= 0x00100000u;
}
void Ssd::clear_has_add_background_class() {
  _has_bits_[0] &= ~0x00100000u;
}
void Ssd::clear_add_background_class() {
  add_background_class_ = true;
  clear_has_add_background_class();
}
bool Ssd::add_background_class() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.add_background_class)
  return add_background_class_;
}
void Ssd::set_add_background_class(bool value) {
  set_has_add_background_class();
  add_background_class_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.add_background_class)
}

// optional bool explicit_background_class = 24 [default = false];
bool Ssd::has_explicit_background_class() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Ssd::set_has_explicit_background_class() {
  _has_bits_[0] |= 0x00008000u;
}
void Ssd::clear_has_explicit_background_class() {
  _has_bits_[0] &= ~0x00008000u;
}
void Ssd::clear_explicit_background_class() {
  explicit_background_class_ = false;
  clear_has_explicit_background_class();
}
bool Ssd::explicit_background_class() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.explicit_background_class)
  return explicit_background_class_;
}
void Ssd::set_explicit_background_class(bool value) {
  set_has_explicit_background_class();
  explicit_background_class_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.explicit_background_class)
}

// optional bool use_confidences_as_targets = 22 [default = false];
bool Ssd::has_use_confidences_as_targets() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Ssd::set_has_use_confidences_as_targets() {
  _has_bits_[0] |= 0x00010000u;
}
void Ssd::clear_has_use_confidences_as_targets() {
  _has_bits_[0] &= ~0x00010000u;
}
void Ssd::clear_use_confidences_as_targets() {
  use_confidences_as_targets_ = false;
  clear_has_use_confidences_as_targets();
}
bool Ssd::use_confidences_as_targets() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.use_confidences_as_targets)
  return use_confidences_as_targets_;
}
void Ssd::set_use_confidences_as_targets(bool value) {
  set_has_use_confidences_as_targets();
  use_confidences_as_targets_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.use_confidences_as_targets)
}

// optional float implicit_example_weight = 23 [default = 1];
bool Ssd::has_implicit_example_weight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Ssd::set_has_implicit_example_weight() {
  _has_bits_[0] |= 0x00020000u;
}
void Ssd::clear_has_implicit_example_weight() {
  _has_bits_[0] &= ~0x00020000u;
}
void Ssd::clear_implicit_example_weight() {
  implicit_example_weight_ = 1;
  clear_has_implicit_example_weight();
}
float Ssd::implicit_example_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.implicit_example_weight)
  return implicit_example_weight_;
}
void Ssd::set_implicit_example_weight(float value) {
  set_has_implicit_example_weight();
  implicit_example_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Ssd.implicit_example_weight)
}

// optional .object_detection.protos.Ssd.MaskHead mask_head_config = 25;
bool Ssd::has_mask_head_config() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ssd::set_has_mask_head_config() {
  _has_bits_[0] |= 0x00000200u;
}
void Ssd::clear_has_mask_head_config() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ssd::clear_mask_head_config() {
  if (mask_head_config_ != NULL) mask_head_config_->::object_detection::protos::Ssd_MaskHead::Clear();
  clear_has_mask_head_config();
}
const ::object_detection::protos::Ssd_MaskHead& Ssd::mask_head_config() const {
  const ::object_detection::protos::Ssd_MaskHead* p = mask_head_config_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Ssd.mask_head_config)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Ssd_MaskHead*>(
      &::object_detection::protos::_Ssd_MaskHead_default_instance_);
}
::object_detection::protos::Ssd_MaskHead* Ssd::mutable_mask_head_config() {
  set_has_mask_head_config();
  if (mask_head_config_ == NULL) {
    mask_head_config_ = new ::object_detection::protos::Ssd_MaskHead;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Ssd.mask_head_config)
  return mask_head_config_;
}
::object_detection::protos::Ssd_MaskHead* Ssd::release_mask_head_config() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Ssd.mask_head_config)
  clear_has_mask_head_config();
  ::object_detection::protos::Ssd_MaskHead* temp = mask_head_config_;
  mask_head_config_ = NULL;
  return temp;
}
void Ssd::set_allocated_mask_head_config(::object_detection::protos::Ssd_MaskHead* mask_head_config) {
  delete mask_head_config_;
  mask_head_config_ = mask_head_config;
  if (mask_head_config) {
    set_has_mask_head_config();
  } else {
    clear_has_mask_head_config();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Ssd.mask_head_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SsdFeatureExtractor::kTypeFieldNumber;
const int SsdFeatureExtractor::kDepthMultiplierFieldNumber;
const int SsdFeatureExtractor::kMinDepthFieldNumber;
const int SsdFeatureExtractor::kConvHyperparamsFieldNumber;
const int SsdFeatureExtractor::kOverrideBaseFeatureExtractorHyperparamsFieldNumber;
const int SsdFeatureExtractor::kPadToMultipleFieldNumber;
const int SsdFeatureExtractor::kUseExplicitPaddingFieldNumber;
const int SsdFeatureExtractor::kUseDepthwiseFieldNumber;
const int SsdFeatureExtractor::kFpnFieldNumber;
const int SsdFeatureExtractor::kReplacePreprocessorWithPlaceholderFieldNumber;
const int SsdFeatureExtractor::kNumLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SsdFeatureExtractor::SsdFeatureExtractor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SsdFeatureExtractor)
}
SsdFeatureExtractor::SsdFeatureExtractor(const SsdFeatureExtractor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = NULL;
  }
  if (from.has_fpn()) {
    fpn_ = new ::object_detection::protos::FeaturePyramidNetworks(*from.fpn_);
  } else {
    fpn_ = NULL;
  }
  ::memcpy(&override_base_feature_extractor_hyperparams_, &from.override_base_feature_extractor_hyperparams_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_layers_) -
    reinterpret_cast<char*>(&override_base_feature_extractor_hyperparams_)) + sizeof(num_layers_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SsdFeatureExtractor)
}

void SsdFeatureExtractor::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replace_preprocessor_with_placeholder_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(replace_preprocessor_with_placeholder_));
  depth_multiplier_ = 1;
  min_depth_ = 16;
  pad_to_multiple_ = 1;
  num_layers_ = 6;
}

SsdFeatureExtractor::~SsdFeatureExtractor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SsdFeatureExtractor)
  SharedDtor();
}

void SsdFeatureExtractor::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete conv_hyperparams_;
  if (this != internal_default_instance()) delete fpn_;
}

void SsdFeatureExtractor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SsdFeatureExtractor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SsdFeatureExtractor& SsdFeatureExtractor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SsdFeatureExtractor* SsdFeatureExtractor::New(::google::protobuf::Arena* arena) const {
  SsdFeatureExtractor* n = new SsdFeatureExtractor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SsdFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SsdFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conv_hyperparams_ != NULL);
      conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(fpn_ != NULL);
      fpn_->::object_detection::protos::FeaturePyramidNetworks::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&override_base_feature_extractor_hyperparams_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replace_preprocessor_with_placeholder_) -
        reinterpret_cast<char*>(&override_base_feature_extractor_hyperparams_)) + sizeof(replace_preprocessor_with_placeholder_));
    depth_multiplier_ = 1;
  }
  if (cached_has_bits & 1792u) {
    min_depth_ = 16;
    pad_to_multiple_ = 1;
    num_layers_ = 6;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SsdFeatureExtractor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SsdFeatureExtractor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.SsdFeatureExtractor.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float depth_multiplier = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_depth_multiplier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_depth = 3 [default = 16];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pad_to_multiple = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pad_to_multiple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_to_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_explicit_padding = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_use_explicit_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_explicit_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_depthwise = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_use_depthwise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_depthwise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_override_base_feature_extractor_hyperparams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &override_base_feature_extractor_hyperparams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fpn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool replace_preprocessor_with_placeholder = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_replace_preprocessor_with_placeholder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replace_preprocessor_with_placeholder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_layers = 12 [default = 6];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_num_layers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SsdFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SsdFeatureExtractor)
  return false;
#undef DO_
}

void SsdFeatureExtractor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SsdFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.SsdFeatureExtractor.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional float depth_multiplier = 2 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->depth_multiplier(), output);
  }

  // optional int32 min_depth = 3 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_depth(), output);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->conv_hyperparams_, output);
  }

  // optional int32 pad_to_multiple = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pad_to_multiple(), output);
  }

  // optional bool use_explicit_padding = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_explicit_padding(), output);
  }

  // optional bool use_depthwise = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_depthwise(), output);
  }

  // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->override_base_feature_extractor_hyperparams(), output);
  }

  // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fpn_, output);
  }

  // optional bool replace_preprocessor_with_placeholder = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->replace_preprocessor_with_placeholder(), output);
  }

  // optional int32 num_layers = 12 [default = 6];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->num_layers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SsdFeatureExtractor)
}

::google::protobuf::uint8* SsdFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SsdFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.SsdFeatureExtractor.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional float depth_multiplier = 2 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->depth_multiplier(), target);
  }

  // optional int32 min_depth = 3 [default = 16];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_depth(), target);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->conv_hyperparams_, deterministic, target);
  }

  // optional int32 pad_to_multiple = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pad_to_multiple(), target);
  }

  // optional bool use_explicit_padding = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_explicit_padding(), target);
  }

  // optional bool use_depthwise = 8 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_depthwise(), target);
  }

  // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->override_base_feature_extractor_hyperparams(), target);
  }

  // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->fpn_, deterministic, target);
  }

  // optional bool replace_preprocessor_with_placeholder = 11 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->replace_preprocessor_with_placeholder(), target);
  }

  // optional int32 num_layers = 12 [default = 6];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->num_layers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SsdFeatureExtractor)
  return target;
}

size_t SsdFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SsdFeatureExtractor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
    if (has_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conv_hyperparams_);
    }

    // optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
    if (has_fpn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fpn_);
    }

    // optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
    if (has_override_base_feature_extractor_hyperparams()) {
      total_size += 1 + 1;
    }

    // optional bool use_explicit_padding = 7 [default = false];
    if (has_use_explicit_padding()) {
      total_size += 1 + 1;
    }

    // optional bool use_depthwise = 8 [default = false];
    if (has_use_depthwise()) {
      total_size += 1 + 1;
    }

    // optional bool replace_preprocessor_with_placeholder = 11 [default = false];
    if (has_replace_preprocessor_with_placeholder()) {
      total_size += 1 + 1;
    }

    // optional float depth_multiplier = 2 [default = 1];
    if (has_depth_multiplier()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 min_depth = 3 [default = 16];
    if (has_min_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_depth());
    }

    // optional int32 pad_to_multiple = 5 [default = 1];
    if (has_pad_to_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_to_multiple());
    }

    // optional int32 num_layers = 12 [default = 6];
    if (has_num_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SsdFeatureExtractor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SsdFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const SsdFeatureExtractor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SsdFeatureExtractor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SsdFeatureExtractor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SsdFeatureExtractor)
    MergeFrom(*source);
  }
}

void SsdFeatureExtractor::MergeFrom(const SsdFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SsdFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_fpn()->::object_detection::protos::FeaturePyramidNetworks::MergeFrom(from.fpn());
    }
    if (cached_has_bits & 0x00000008u) {
      override_base_feature_extractor_hyperparams_ = from.override_base_feature_extractor_hyperparams_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_explicit_padding_ = from.use_explicit_padding_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_depthwise_ = from.use_depthwise_;
    }
    if (cached_has_bits & 0x00000040u) {
      replace_preprocessor_with_placeholder_ = from.replace_preprocessor_with_placeholder_;
    }
    if (cached_has_bits & 0x00000080u) {
      depth_multiplier_ = from.depth_multiplier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      min_depth_ = from.min_depth_;
    }
    if (cached_has_bits & 0x00000200u) {
      pad_to_multiple_ = from.pad_to_multiple_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_layers_ = from.num_layers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SsdFeatureExtractor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SsdFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsdFeatureExtractor::CopyFrom(const SsdFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SsdFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsdFeatureExtractor::IsInitialized() const {
  return true;
}

void SsdFeatureExtractor::Swap(SsdFeatureExtractor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SsdFeatureExtractor::InternalSwap(SsdFeatureExtractor* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(fpn_, other->fpn_);
  swap(override_base_feature_extractor_hyperparams_, other->override_base_feature_extractor_hyperparams_);
  swap(use_explicit_padding_, other->use_explicit_padding_);
  swap(use_depthwise_, other->use_depthwise_);
  swap(replace_preprocessor_with_placeholder_, other->replace_preprocessor_with_placeholder_);
  swap(depth_multiplier_, other->depth_multiplier_);
  swap(min_depth_, other->min_depth_);
  swap(pad_to_multiple_, other->pad_to_multiple_);
  swap(num_layers_, other->num_layers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SsdFeatureExtractor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SsdFeatureExtractor

// optional string type = 1;
bool SsdFeatureExtractor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SsdFeatureExtractor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void SsdFeatureExtractor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void SsdFeatureExtractor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& SsdFeatureExtractor::type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.type)
  return type_.GetNoArena();
}
void SsdFeatureExtractor::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.type)
}
#if LANG_CXX11
void SsdFeatureExtractor::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.SsdFeatureExtractor.type)
}
#endif
void SsdFeatureExtractor::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.SsdFeatureExtractor.type)
}
void SsdFeatureExtractor::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.SsdFeatureExtractor.type)
}
::std::string* SsdFeatureExtractor::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SsdFeatureExtractor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SsdFeatureExtractor::release_type() {
  // @@protoc_insertion_point(field_release:object_detection.protos.SsdFeatureExtractor.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SsdFeatureExtractor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.SsdFeatureExtractor.type)
}

// optional float depth_multiplier = 2 [default = 1];
bool SsdFeatureExtractor::has_depth_multiplier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SsdFeatureExtractor::set_has_depth_multiplier() {
  _has_bits_[0] |= 0x00000080u;
}
void SsdFeatureExtractor::clear_has_depth_multiplier() {
  _has_bits_[0] &= ~0x00000080u;
}
void SsdFeatureExtractor::clear_depth_multiplier() {
  depth_multiplier_ = 1;
  clear_has_depth_multiplier();
}
float SsdFeatureExtractor::depth_multiplier() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.depth_multiplier)
  return depth_multiplier_;
}
void SsdFeatureExtractor::set_depth_multiplier(float value) {
  set_has_depth_multiplier();
  depth_multiplier_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.depth_multiplier)
}

// optional int32 min_depth = 3 [default = 16];
bool SsdFeatureExtractor::has_min_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SsdFeatureExtractor::set_has_min_depth() {
  _has_bits_[0] |= 0x00000100u;
}
void SsdFeatureExtractor::clear_has_min_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
void SsdFeatureExtractor::clear_min_depth() {
  min_depth_ = 16;
  clear_has_min_depth();
}
::google::protobuf::int32 SsdFeatureExtractor::min_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.min_depth)
  return min_depth_;
}
void SsdFeatureExtractor::set_min_depth(::google::protobuf::int32 value) {
  set_has_min_depth();
  min_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.min_depth)
}

// optional .object_detection.protos.Hyperparams conv_hyperparams = 4;
bool SsdFeatureExtractor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SsdFeatureExtractor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000002u;
}
void SsdFeatureExtractor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000002u;
}
void SsdFeatureExtractor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& SsdFeatureExtractor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* SsdFeatureExtractor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SsdFeatureExtractor.conv_hyperparams)
  return conv_hyperparams_;
}
::object_detection::protos::Hyperparams* SsdFeatureExtractor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.SsdFeatureExtractor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
void SsdFeatureExtractor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.SsdFeatureExtractor.conv_hyperparams)
}

// optional bool override_base_feature_extractor_hyperparams = 9 [default = false];
bool SsdFeatureExtractor::has_override_base_feature_extractor_hyperparams() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SsdFeatureExtractor::set_has_override_base_feature_extractor_hyperparams() {
  _has_bits_[0] |= 0x00000008u;
}
void SsdFeatureExtractor::clear_has_override_base_feature_extractor_hyperparams() {
  _has_bits_[0] &= ~0x00000008u;
}
void SsdFeatureExtractor::clear_override_base_feature_extractor_hyperparams() {
  override_base_feature_extractor_hyperparams_ = false;
  clear_has_override_base_feature_extractor_hyperparams();
}
bool SsdFeatureExtractor::override_base_feature_extractor_hyperparams() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.override_base_feature_extractor_hyperparams)
  return override_base_feature_extractor_hyperparams_;
}
void SsdFeatureExtractor::set_override_base_feature_extractor_hyperparams(bool value) {
  set_has_override_base_feature_extractor_hyperparams();
  override_base_feature_extractor_hyperparams_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.override_base_feature_extractor_hyperparams)
}

// optional int32 pad_to_multiple = 5 [default = 1];
bool SsdFeatureExtractor::has_pad_to_multiple() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SsdFeatureExtractor::set_has_pad_to_multiple() {
  _has_bits_[0] |= 0x00000200u;
}
void SsdFeatureExtractor::clear_has_pad_to_multiple() {
  _has_bits_[0] &= ~0x00000200u;
}
void SsdFeatureExtractor::clear_pad_to_multiple() {
  pad_to_multiple_ = 1;
  clear_has_pad_to_multiple();
}
::google::protobuf::int32 SsdFeatureExtractor::pad_to_multiple() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.pad_to_multiple)
  return pad_to_multiple_;
}
void SsdFeatureExtractor::set_pad_to_multiple(::google::protobuf::int32 value) {
  set_has_pad_to_multiple();
  pad_to_multiple_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.pad_to_multiple)
}

// optional bool use_explicit_padding = 7 [default = false];
bool SsdFeatureExtractor::has_use_explicit_padding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SsdFeatureExtractor::set_has_use_explicit_padding() {
  _has_bits_[0] |= 0x00000010u;
}
void SsdFeatureExtractor::clear_has_use_explicit_padding() {
  _has_bits_[0] &= ~0x00000010u;
}
void SsdFeatureExtractor::clear_use_explicit_padding() {
  use_explicit_padding_ = false;
  clear_has_use_explicit_padding();
}
bool SsdFeatureExtractor::use_explicit_padding() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.use_explicit_padding)
  return use_explicit_padding_;
}
void SsdFeatureExtractor::set_use_explicit_padding(bool value) {
  set_has_use_explicit_padding();
  use_explicit_padding_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.use_explicit_padding)
}

// optional bool use_depthwise = 8 [default = false];
bool SsdFeatureExtractor::has_use_depthwise() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SsdFeatureExtractor::set_has_use_depthwise() {
  _has_bits_[0] |= 0x00000020u;
}
void SsdFeatureExtractor::clear_has_use_depthwise() {
  _has_bits_[0] &= ~0x00000020u;
}
void SsdFeatureExtractor::clear_use_depthwise() {
  use_depthwise_ = false;
  clear_has_use_depthwise();
}
bool SsdFeatureExtractor::use_depthwise() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.use_depthwise)
  return use_depthwise_;
}
void SsdFeatureExtractor::set_use_depthwise(bool value) {
  set_has_use_depthwise();
  use_depthwise_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.use_depthwise)
}

// optional .object_detection.protos.FeaturePyramidNetworks fpn = 10;
bool SsdFeatureExtractor::has_fpn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SsdFeatureExtractor::set_has_fpn() {
  _has_bits_[0] |= 0x00000004u;
}
void SsdFeatureExtractor::clear_has_fpn() {
  _has_bits_[0] &= ~0x00000004u;
}
void SsdFeatureExtractor::clear_fpn() {
  if (fpn_ != NULL) fpn_->::object_detection::protos::FeaturePyramidNetworks::Clear();
  clear_has_fpn();
}
const ::object_detection::protos::FeaturePyramidNetworks& SsdFeatureExtractor::fpn() const {
  const ::object_detection::protos::FeaturePyramidNetworks* p = fpn_;
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.fpn)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::FeaturePyramidNetworks*>(
      &::object_detection::protos::_FeaturePyramidNetworks_default_instance_);
}
::object_detection::protos::FeaturePyramidNetworks* SsdFeatureExtractor::mutable_fpn() {
  set_has_fpn();
  if (fpn_ == NULL) {
    fpn_ = new ::object_detection::protos::FeaturePyramidNetworks;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SsdFeatureExtractor.fpn)
  return fpn_;
}
::object_detection::protos::FeaturePyramidNetworks* SsdFeatureExtractor::release_fpn() {
  // @@protoc_insertion_point(field_release:object_detection.protos.SsdFeatureExtractor.fpn)
  clear_has_fpn();
  ::object_detection::protos::FeaturePyramidNetworks* temp = fpn_;
  fpn_ = NULL;
  return temp;
}
void SsdFeatureExtractor::set_allocated_fpn(::object_detection::protos::FeaturePyramidNetworks* fpn) {
  delete fpn_;
  fpn_ = fpn;
  if (fpn) {
    set_has_fpn();
  } else {
    clear_has_fpn();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.SsdFeatureExtractor.fpn)
}

// optional bool replace_preprocessor_with_placeholder = 11 [default = false];
bool SsdFeatureExtractor::has_replace_preprocessor_with_placeholder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SsdFeatureExtractor::set_has_replace_preprocessor_with_placeholder() {
  _has_bits_[0] |= 0x00000040u;
}
void SsdFeatureExtractor::clear_has_replace_preprocessor_with_placeholder() {
  _has_bits_[0] &= ~0x00000040u;
}
void SsdFeatureExtractor::clear_replace_preprocessor_with_placeholder() {
  replace_preprocessor_with_placeholder_ = false;
  clear_has_replace_preprocessor_with_placeholder();
}
bool SsdFeatureExtractor::replace_preprocessor_with_placeholder() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.replace_preprocessor_with_placeholder)
  return replace_preprocessor_with_placeholder_;
}
void SsdFeatureExtractor::set_replace_preprocessor_with_placeholder(bool value) {
  set_has_replace_preprocessor_with_placeholder();
  replace_preprocessor_with_placeholder_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.replace_preprocessor_with_placeholder)
}

// optional int32 num_layers = 12 [default = 6];
bool SsdFeatureExtractor::has_num_layers() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SsdFeatureExtractor::set_has_num_layers() {
  _has_bits_[0] |= 0x00000400u;
}
void SsdFeatureExtractor::clear_has_num_layers() {
  _has_bits_[0] &= ~0x00000400u;
}
void SsdFeatureExtractor::clear_num_layers() {
  num_layers_ = 6;
  clear_has_num_layers();
}
::google::protobuf::int32 SsdFeatureExtractor::num_layers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdFeatureExtractor.num_layers)
  return num_layers_;
}
void SsdFeatureExtractor::set_num_layers(::google::protobuf::int32 value) {
  set_has_num_layers();
  num_layers_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdFeatureExtractor.num_layers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeaturePyramidNetworks::kMinLevelFieldNumber;
const int FeaturePyramidNetworks::kMaxLevelFieldNumber;
const int FeaturePyramidNetworks::kAdditionalLayerDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeaturePyramidNetworks::FeaturePyramidNetworks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FeaturePyramidNetworks)
}
FeaturePyramidNetworks::FeaturePyramidNetworks(const FeaturePyramidNetworks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&additional_layer_depth_, &from.additional_layer_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&additional_layer_depth_)) + sizeof(max_level_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FeaturePyramidNetworks)
}

void FeaturePyramidNetworks::SharedCtor() {
  _cached_size_ = 0;
  additional_layer_depth_ = 256;
  min_level_ = 3;
  max_level_ = 7;
}

FeaturePyramidNetworks::~FeaturePyramidNetworks() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FeaturePyramidNetworks)
  SharedDtor();
}

void FeaturePyramidNetworks::SharedDtor() {
}

void FeaturePyramidNetworks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeaturePyramidNetworks::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeaturePyramidNetworks& FeaturePyramidNetworks::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeaturePyramidNetworks* FeaturePyramidNetworks::New(::google::protobuf::Arena* arena) const {
  FeaturePyramidNetworks* n = new FeaturePyramidNetworks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeaturePyramidNetworks::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FeaturePyramidNetworks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    additional_layer_depth_ = 256;
    min_level_ = 3;
    max_level_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeaturePyramidNetworks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FeaturePyramidNetworks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_level = 1 [default = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_level = 2 [default = 7];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 additional_layer_depth = 3 [default = 256];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_additional_layer_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &additional_layer_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FeaturePyramidNetworks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FeaturePyramidNetworks)
  return false;
#undef DO_
}

void FeaturePyramidNetworks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FeaturePyramidNetworks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_level = 1 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_level(), output);
  }

  // optional int32 max_level = 2 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_level(), output);
  }

  // optional int32 additional_layer_depth = 3 [default = 256];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->additional_layer_depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FeaturePyramidNetworks)
}

::google::protobuf::uint8* FeaturePyramidNetworks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FeaturePyramidNetworks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_level = 1 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_level(), target);
  }

  // optional int32 max_level = 2 [default = 7];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_level(), target);
  }

  // optional int32 additional_layer_depth = 3 [default = 256];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->additional_layer_depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FeaturePyramidNetworks)
  return target;
}

size_t FeaturePyramidNetworks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FeaturePyramidNetworks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 additional_layer_depth = 3 [default = 256];
    if (has_additional_layer_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->additional_layer_depth());
    }

    // optional int32 min_level = 1 [default = 3];
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 2 [default = 7];
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeaturePyramidNetworks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FeaturePyramidNetworks)
  GOOGLE_DCHECK_NE(&from, this);
  const FeaturePyramidNetworks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeaturePyramidNetworks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FeaturePyramidNetworks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FeaturePyramidNetworks)
    MergeFrom(*source);
  }
}

void FeaturePyramidNetworks::MergeFrom(const FeaturePyramidNetworks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FeaturePyramidNetworks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      additional_layer_depth_ = from.additional_layer_depth_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_level_ = from.min_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_level_ = from.max_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeaturePyramidNetworks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FeaturePyramidNetworks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturePyramidNetworks::CopyFrom(const FeaturePyramidNetworks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FeaturePyramidNetworks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturePyramidNetworks::IsInitialized() const {
  return true;
}

void FeaturePyramidNetworks::Swap(FeaturePyramidNetworks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeaturePyramidNetworks::InternalSwap(FeaturePyramidNetworks* other) {
  using std::swap;
  swap(additional_layer_depth_, other->additional_layer_depth_);
  swap(min_level_, other->min_level_);
  swap(max_level_, other->max_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeaturePyramidNetworks::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fssd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeaturePyramidNetworks

// optional int32 min_level = 1 [default = 3];
bool FeaturePyramidNetworks::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeaturePyramidNetworks::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
void FeaturePyramidNetworks::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeaturePyramidNetworks::clear_min_level() {
  min_level_ = 3;
  clear_has_min_level();
}
::google::protobuf::int32 FeaturePyramidNetworks::min_level() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FeaturePyramidNetworks.min_level)
  return min_level_;
}
void FeaturePyramidNetworks::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FeaturePyramidNetworks.min_level)
}

// optional int32 max_level = 2 [default = 7];
bool FeaturePyramidNetworks::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeaturePyramidNetworks::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
void FeaturePyramidNetworks::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeaturePyramidNetworks::clear_max_level() {
  max_level_ = 7;
  clear_has_max_level();
}
::google::protobuf::int32 FeaturePyramidNetworks::max_level() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FeaturePyramidNetworks.max_level)
  return max_level_;
}
void FeaturePyramidNetworks::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FeaturePyramidNetworks.max_level)
}

// optional int32 additional_layer_depth = 3 [default = 256];
bool FeaturePyramidNetworks::has_additional_layer_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeaturePyramidNetworks::set_has_additional_layer_depth() {
  _has_bits_[0] |= 0x00000001u;
}
void FeaturePyramidNetworks::clear_has_additional_layer_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeaturePyramidNetworks::clear_additional_layer_depth() {
  additional_layer_depth_ = 256;
  clear_has_additional_layer_depth();
}
::google::protobuf::int32 FeaturePyramidNetworks::additional_layer_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FeaturePyramidNetworks.additional_layer_depth)
  return additional_layer_depth_;
}
void FeaturePyramidNetworks::set_additional_layer_depth(::google::protobuf::int32 value) {
  set_has_additional_layer_depth();
  additional_layer_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FeaturePyramidNetworks.additional_layer_depth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
