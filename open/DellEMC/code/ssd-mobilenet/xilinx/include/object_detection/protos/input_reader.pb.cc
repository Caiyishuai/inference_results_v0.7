// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/input_reader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/input_reader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class InputReaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InputReader>
     _instance;
  const ::object_detection::protos::TFRecordInputReader* tf_record_input_reader_;
  const ::object_detection::protos::ExternalInputReader* external_input_reader_;
} _InputReader_default_instance_;
class TFRecordInputReaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TFRecordInputReader>
     _instance;
} _TFRecordInputReader_default_instance_;
class ExternalInputReaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExternalInputReader>
     _instance;
} _ExternalInputReader_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, label_map_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, shuffle_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, filenames_shuffle_buffer_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_epochs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, sample_1_of_n_examples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_readers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_parallel_batches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_prefetch_batches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, queue_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, min_after_dequeue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, read_block_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, prefetch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_parallel_map_calls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_additional_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, num_keypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, max_number_of_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, load_multiclass_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, load_instance_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, mask_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, use_display_name_),
  offsetof(InputReaderDefaultTypeInternal, tf_record_input_reader_),
  offsetof(InputReaderDefaultTypeInternal, external_input_reader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputReader, input_reader_),
  1,
  0,
  8,
  13,
  14,
  2,
  21,
  11,
  18,
  19,
  9,
  10,
  17,
  15,
  16,
  7,
  3,
  20,
  4,
  5,
  12,
  6,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFRecordInputReader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFRecordInputReader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFRecordInputReader, input_path_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalInputReader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalInputReader, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalInputReader, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, sizeof(InputReader)},
  { 54, 60, sizeof(TFRecordInputReader)},
  { 61, 66, sizeof(ExternalInputReader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputReader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TFRecordInputReader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExternalInputReader_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/input_reader.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _InputReader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InputReader_default_instance_);_TFRecordInputReader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TFRecordInputReader_default_instance_);_ExternalInputReader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExternalInputReader_default_instance_);_InputReader_default_instance_.tf_record_input_reader_ = const_cast< ::object_detection::protos::TFRecordInputReader*>(
      ::object_detection::protos::TFRecordInputReader::internal_default_instance());
  _InputReader_default_instance_.external_input_reader_ = const_cast< ::object_detection::protos::ExternalInputReader*>(
      ::object_detection::protos::ExternalInputReader::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*object_detection/protos/input_reader.p"
      "roto\022\027object_detection.protos\"\252\007\n\013InputR"
      "eader\022\016\n\004name\030\027 \001(\t:\000\022\030\n\016label_map_path\030"
      "\001 \001(\t:\000\022\025\n\007shuffle\030\002 \001(\010:\004true\022!\n\023shuffl"
      "e_buffer_size\030\013 \001(\r:\0042048\022*\n\035filenames_s"
      "huffle_buffer_size\030\014 \001(\r:\003100\022\025\n\nnum_epo"
      "chs\030\005 \001(\r:\0010\022!\n\026sample_1_of_n_examples\030\026"
      " \001(\r:\0011\022\027\n\013num_readers\030\006 \001(\r:\00264\022\037\n\024num_"
      "parallel_batches\030\023 \001(\r:\0018\022\037\n\024num_prefetc"
      "h_batches\030\024 \001(\005:\0012\022 \n\016queue_capacity\030\003 \001"
      "(\r:\0042000B\002\030\001\022#\n\021min_after_dequeue\030\004 \001(\r:"
      "\0041000B\002\030\001\022\035\n\021read_block_length\030\017 \001(\r:\00232"
      "\022\036\n\rprefetch_size\030\r \001(\r:\003512B\002\030\001\022&\n\026num_"
      "parallel_map_calls\030\016 \001(\r:\00264B\002\030\001\022\"\n\027num_"
      "additional_channels\030\022 \001(\005:\0010\022\030\n\rnum_keyp"
      "oints\030\020 \001(\r:\0010\022 \n\023max_number_of_boxes\030\025 "
      "\001(\005:\003100\022%\n\026load_multiclass_scores\030\030 \001(\010"
      ":\005false\022\"\n\023load_instance_masks\030\007 \001(\010:\005fa"
      "lse\022M\n\tmask_type\030\n \001(\0162).object_detectio"
      "n.protos.InstanceMaskType:\017NUMERICAL_MAS"
      "KS\022\037\n\020use_display_name\030\021 \001(\010:\005false\022N\n\026t"
      "f_record_input_reader\030\010 \001(\0132,.object_det"
      "ection.protos.TFRecordInputReaderH\000\022M\n\025e"
      "xternal_input_reader\030\t \001(\0132,.object_dete"
      "ction.protos.ExternalInputReaderH\000B\016\n\014in"
      "put_reader\")\n\023TFRecordInputReader\022\022\n\ninp"
      "ut_path\030\001 \003(\t\"\034\n\023ExternalInputReader*\005\010\001"
      "\020\350\007*C\n\020InstanceMaskType\022\013\n\007DEFAULT\020\000\022\023\n\017"
      "NUMERICAL_MASKS\020\001\022\r\n\tPNG_MASKS\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/input_reader.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto

const ::google::protobuf::EnumDescriptor* InstanceMaskType_descriptor() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_enum_descriptors[0];
}
bool InstanceMaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputReader::kNameFieldNumber;
const int InputReader::kLabelMapPathFieldNumber;
const int InputReader::kShuffleFieldNumber;
const int InputReader::kShuffleBufferSizeFieldNumber;
const int InputReader::kFilenamesShuffleBufferSizeFieldNumber;
const int InputReader::kNumEpochsFieldNumber;
const int InputReader::kSample1OfNExamplesFieldNumber;
const int InputReader::kNumReadersFieldNumber;
const int InputReader::kNumParallelBatchesFieldNumber;
const int InputReader::kNumPrefetchBatchesFieldNumber;
const int InputReader::kQueueCapacityFieldNumber;
const int InputReader::kMinAfterDequeueFieldNumber;
const int InputReader::kReadBlockLengthFieldNumber;
const int InputReader::kPrefetchSizeFieldNumber;
const int InputReader::kNumParallelMapCallsFieldNumber;
const int InputReader::kNumAdditionalChannelsFieldNumber;
const int InputReader::kNumKeypointsFieldNumber;
const int InputReader::kMaxNumberOfBoxesFieldNumber;
const int InputReader::kLoadMulticlassScoresFieldNumber;
const int InputReader::kLoadInstanceMasksFieldNumber;
const int InputReader::kMaskTypeFieldNumber;
const int InputReader::kUseDisplayNameFieldNumber;
const int InputReader::kTfRecordInputReaderFieldNumber;
const int InputReader::kExternalInputReaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputReader::InputReader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.InputReader)
}
InputReader::InputReader(const InputReader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_map_path()) {
    label_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_map_path_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&num_epochs_, &from.num_epochs_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_1_of_n_examples_) -
    reinterpret_cast<char*>(&num_epochs_)) + sizeof(sample_1_of_n_examples_));
  clear_has_input_reader();
  switch (from.input_reader_case()) {
    case kTfRecordInputReader: {
      mutable_tf_record_input_reader()->::object_detection::protos::TFRecordInputReader::MergeFrom(from.tf_record_input_reader());
      break;
    }
    case kExternalInputReader: {
      mutable_external_input_reader()->::object_detection::protos::ExternalInputReader::MergeFrom(from.external_input_reader());
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.InputReader)
}

void InputReader::SharedCtor() {
  _cached_size_ = 0;
  label_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_epochs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_additional_channels_) -
      reinterpret_cast<char*>(&num_epochs_)) + sizeof(num_additional_channels_));
  shuffle_ = true;
  queue_capacity_ = 2000u;
  min_after_dequeue_ = 1000u;
  num_readers_ = 64u;
  mask_type_ = 1;
  shuffle_buffer_size_ = 2048u;
  filenames_shuffle_buffer_size_ = 100u;
  prefetch_size_ = 512u;
  num_parallel_map_calls_ = 64u;
  read_block_length_ = 32u;
  num_parallel_batches_ = 8u;
  num_prefetch_batches_ = 2;
  max_number_of_boxes_ = 100;
  sample_1_of_n_examples_ = 1u;
  clear_has_input_reader();
}

InputReader::~InputReader() {
  // @@protoc_insertion_point(destructor:object_detection.protos.InputReader)
  SharedDtor();
}

void InputReader::SharedDtor() {
  label_map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_input_reader()) {
    clear_input_reader();
  }
}

void InputReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputReader::descriptor() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InputReader& InputReader::default_instance() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputReader* InputReader::New(::google::protobuf::Arena* arena) const {
  InputReader* n = new InputReader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputReader::clear_input_reader() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.InputReader)
  switch (input_reader_case()) {
    case kTfRecordInputReader: {
      delete input_reader_.tf_record_input_reader_;
      break;
    }
    case kExternalInputReader: {
      delete input_reader_.external_input_reader_;
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_READER_NOT_SET;
}


void InputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.InputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!label_map_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_map_path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&num_epochs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_additional_channels_) -
        reinterpret_cast<char*>(&num_epochs_)) + sizeof(num_additional_channels_));
  }
  if (cached_has_bits & 65280u) {
    shuffle_ = true;
    queue_capacity_ = 2000u;
    min_after_dequeue_ = 1000u;
    num_readers_ = 64u;
    mask_type_ = 1;
    shuffle_buffer_size_ = 2048u;
    filenames_shuffle_buffer_size_ = 100u;
    prefetch_size_ = 512u;
  }
  if (cached_has_bits & 4128768u) {
    num_parallel_map_calls_ = 64u;
    read_block_length_ = 32u;
    num_parallel_batches_ = 8u;
    num_prefetch_batches_ = 2;
    max_number_of_boxes_ = 100;
    sample_1_of_n_examples_ = 1u;
  }
  clear_input_reader();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InputReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.InputReader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label_map_path = 1 [default = ""];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_map_path().data(), static_cast<int>(this->label_map_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.InputReader.label_map_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shuffle = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_shuffle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_queue_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_min_after_dequeue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_after_dequeue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_epochs = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_epochs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_readers = 6 [default = 64];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_readers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_readers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool load_instance_masks = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_load_instance_masks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_instance_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tf_record_input_reader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_input_reader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::InstanceMaskType_IsValid(value)) {
            set_mask_type(static_cast< ::object_detection::protos::InstanceMaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shuffle_buffer_size = 11 [default = 2048];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_shuffle_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shuffle_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_filenames_shuffle_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filenames_shuffle_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_prefetch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_num_parallel_map_calls();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_parallel_map_calls_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 read_block_length = 15 [default = 32];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_read_block_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_block_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_keypoints = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_num_keypoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_keypoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_display_name = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_use_display_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_display_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_additional_channels = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_num_additional_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_additional_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_parallel_batches = 19 [default = 8];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_num_parallel_batches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_parallel_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_prefetch_batches = 20 [default = 2];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_num_prefetch_batches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_prefetch_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_number_of_boxes = 21 [default = 100];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_max_number_of_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sample_1_of_n_examples = 22 [default = 1];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_sample_1_of_n_examples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_1_of_n_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 23 [default = ""];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.InputReader.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool load_multiclass_scores = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_load_multiclass_scores();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_multiclass_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.InputReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.InputReader)
  return false;
#undef DO_
}

void InputReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.InputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label_map_path = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_map_path().data(), static_cast<int>(this->label_map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.InputReader.label_map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label_map_path(), output);
  }

  // optional bool shuffle = 2 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shuffle(), output);
  }

  // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queue_capacity(), output);
  }

  // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->min_after_dequeue(), output);
  }

  // optional uint32 num_epochs = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_epochs(), output);
  }

  // optional uint32 num_readers = 6 [default = 64];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_readers(), output);
  }

  // optional bool load_instance_masks = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->load_instance_masks(), output);
  }

  switch (input_reader_case()) {
    case kTfRecordInputReader:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *input_reader_.tf_record_input_reader_, output);
      break;
    case kExternalInputReader:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *input_reader_.external_input_reader_, output);
      break;
    default: ;
  }
  // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->mask_type(), output);
  }

  // optional uint32 shuffle_buffer_size = 11 [default = 2048];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->shuffle_buffer_size(), output);
  }

  // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->filenames_shuffle_buffer_size(), output);
  }

  // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->prefetch_size(), output);
  }

  // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_parallel_map_calls(), output);
  }

  // optional uint32 read_block_length = 15 [default = 32];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->read_block_length(), output);
  }

  // optional uint32 num_keypoints = 16 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->num_keypoints(), output);
  }

  // optional bool use_display_name = 17 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->use_display_name(), output);
  }

  // optional int32 num_additional_channels = 18 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->num_additional_channels(), output);
  }

  // optional uint32 num_parallel_batches = 19 [default = 8];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->num_parallel_batches(), output);
  }

  // optional int32 num_prefetch_batches = 20 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->num_prefetch_batches(), output);
  }

  // optional int32 max_number_of_boxes = 21 [default = 100];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->max_number_of_boxes(), output);
  }

  // optional uint32 sample_1_of_n_examples = 22 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->sample_1_of_n_examples(), output);
  }

  // optional string name = 23 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.InputReader.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->name(), output);
  }

  // optional bool load_multiclass_scores = 24 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->load_multiclass_scores(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.InputReader)
}

::google::protobuf::uint8* InputReader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.InputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label_map_path = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_map_path().data(), static_cast<int>(this->label_map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.InputReader.label_map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label_map_path(), target);
  }

  // optional bool shuffle = 2 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shuffle(), target);
  }

  // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queue_capacity(), target);
  }

  // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->min_after_dequeue(), target);
  }

  // optional uint32 num_epochs = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_epochs(), target);
  }

  // optional uint32 num_readers = 6 [default = 64];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_readers(), target);
  }

  // optional bool load_instance_masks = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->load_instance_masks(), target);
  }

  switch (input_reader_case()) {
    case kTfRecordInputReader:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *input_reader_.tf_record_input_reader_, deterministic, target);
      break;
    case kExternalInputReader:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *input_reader_.external_input_reader_, deterministic, target);
      break;
    default: ;
  }
  // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->mask_type(), target);
  }

  // optional uint32 shuffle_buffer_size = 11 [default = 2048];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->shuffle_buffer_size(), target);
  }

  // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->filenames_shuffle_buffer_size(), target);
  }

  // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->prefetch_size(), target);
  }

  // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_parallel_map_calls(), target);
  }

  // optional uint32 read_block_length = 15 [default = 32];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->read_block_length(), target);
  }

  // optional uint32 num_keypoints = 16 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->num_keypoints(), target);
  }

  // optional bool use_display_name = 17 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->use_display_name(), target);
  }

  // optional int32 num_additional_channels = 18 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->num_additional_channels(), target);
  }

  // optional uint32 num_parallel_batches = 19 [default = 8];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->num_parallel_batches(), target);
  }

  // optional int32 num_prefetch_batches = 20 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->num_prefetch_batches(), target);
  }

  // optional int32 max_number_of_boxes = 21 [default = 100];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->max_number_of_boxes(), target);
  }

  // optional uint32 sample_1_of_n_examples = 22 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->sample_1_of_n_examples(), target);
  }

  // optional string name = 23 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.InputReader.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->name(), target);
  }

  // optional bool load_multiclass_scores = 24 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->load_multiclass_scores(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.InputReader)
  return target;
}

size_t InputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.InputReader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string label_map_path = 1 [default = ""];
    if (has_label_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_map_path());
    }

    // optional string name = 23 [default = ""];
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 num_epochs = 5 [default = 0];
    if (has_num_epochs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_epochs());
    }

    // optional uint32 num_keypoints = 16 [default = 0];
    if (has_num_keypoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_keypoints());
    }

    // optional bool load_multiclass_scores = 24 [default = false];
    if (has_load_multiclass_scores()) {
      total_size += 2 + 1;
    }

    // optional bool load_instance_masks = 7 [default = false];
    if (has_load_instance_masks()) {
      total_size += 1 + 1;
    }

    // optional bool use_display_name = 17 [default = false];
    if (has_use_display_name()) {
      total_size += 2 + 1;
    }

    // optional int32 num_additional_channels = 18 [default = 0];
    if (has_num_additional_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_additional_channels());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool shuffle = 2 [default = true];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
    if (has_queue_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_capacity());
    }

    // optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
    if (has_min_after_dequeue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_after_dequeue());
    }

    // optional uint32 num_readers = 6 [default = 64];
    if (has_num_readers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_readers());
    }

    // optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
    if (has_mask_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mask_type());
    }

    // optional uint32 shuffle_buffer_size = 11 [default = 2048];
    if (has_shuffle_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shuffle_buffer_size());
    }

    // optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
    if (has_filenames_shuffle_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filenames_shuffle_buffer_size());
    }

    // optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
    if (has_prefetch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch_size());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
    if (has_num_parallel_map_calls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_parallel_map_calls());
    }

    // optional uint32 read_block_length = 15 [default = 32];
    if (has_read_block_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_block_length());
    }

    // optional uint32 num_parallel_batches = 19 [default = 8];
    if (has_num_parallel_batches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_parallel_batches());
    }

    // optional int32 num_prefetch_batches = 20 [default = 2];
    if (has_num_prefetch_batches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_prefetch_batches());
    }

    // optional int32 max_number_of_boxes = 21 [default = 100];
    if (has_max_number_of_boxes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_boxes());
    }

    // optional uint32 sample_1_of_n_examples = 22 [default = 1];
    if (has_sample_1_of_n_examples()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_1_of_n_examples());
    }

  }
  switch (input_reader_case()) {
    // optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
    case kTfRecordInputReader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *input_reader_.tf_record_input_reader_);
      break;
    }
    // optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
    case kExternalInputReader: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *input_reader_.external_input_reader_);
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputReader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const InputReader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputReader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.InputReader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.InputReader)
    MergeFrom(*source);
  }
}

void InputReader::MergeFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.InputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label_map_path();
      label_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_map_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      num_epochs_ = from.num_epochs_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_keypoints_ = from.num_keypoints_;
    }
    if (cached_has_bits & 0x00000010u) {
      load_multiclass_scores_ = from.load_multiclass_scores_;
    }
    if (cached_has_bits & 0x00000020u) {
      load_instance_masks_ = from.load_instance_masks_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_display_name_ = from.use_display_name_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_additional_channels_ = from.num_additional_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000200u) {
      queue_capacity_ = from.queue_capacity_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_after_dequeue_ = from.min_after_dequeue_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_readers_ = from.num_readers_;
    }
    if (cached_has_bits & 0x00001000u) {
      mask_type_ = from.mask_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      shuffle_buffer_size_ = from.shuffle_buffer_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      filenames_shuffle_buffer_size_ = from.filenames_shuffle_buffer_size_;
    }
    if (cached_has_bits & 0x00008000u) {
      prefetch_size_ = from.prefetch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      num_parallel_map_calls_ = from.num_parallel_map_calls_;
    }
    if (cached_has_bits & 0x00020000u) {
      read_block_length_ = from.read_block_length_;
    }
    if (cached_has_bits & 0x00040000u) {
      num_parallel_batches_ = from.num_parallel_batches_;
    }
    if (cached_has_bits & 0x00080000u) {
      num_prefetch_batches_ = from.num_prefetch_batches_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_number_of_boxes_ = from.max_number_of_boxes_;
    }
    if (cached_has_bits & 0x00200000u) {
      sample_1_of_n_examples_ = from.sample_1_of_n_examples_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.input_reader_case()) {
    case kTfRecordInputReader: {
      mutable_tf_record_input_reader()->::object_detection::protos::TFRecordInputReader::MergeFrom(from.tf_record_input_reader());
      break;
    }
    case kExternalInputReader: {
      mutable_external_input_reader()->::object_detection::protos::ExternalInputReader::MergeFrom(from.external_input_reader());
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
}

void InputReader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputReader::CopyFrom(const InputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.InputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputReader::IsInitialized() const {
  switch (input_reader_case()) {
    case kTfRecordInputReader: {
      break;
    }
    case kExternalInputReader: {
      if (has_external_input_reader()) {
        if (!this->external_input_reader().IsInitialized()) return false;
      }
      break;
    }
    case INPUT_READER_NOT_SET: {
      break;
    }
  }
  return true;
}

void InputReader::Swap(InputReader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputReader::InternalSwap(InputReader* other) {
  using std::swap;
  label_map_path_.Swap(&other->label_map_path_);
  name_.Swap(&other->name_);
  swap(num_epochs_, other->num_epochs_);
  swap(num_keypoints_, other->num_keypoints_);
  swap(load_multiclass_scores_, other->load_multiclass_scores_);
  swap(load_instance_masks_, other->load_instance_masks_);
  swap(use_display_name_, other->use_display_name_);
  swap(num_additional_channels_, other->num_additional_channels_);
  swap(shuffle_, other->shuffle_);
  swap(queue_capacity_, other->queue_capacity_);
  swap(min_after_dequeue_, other->min_after_dequeue_);
  swap(num_readers_, other->num_readers_);
  swap(mask_type_, other->mask_type_);
  swap(shuffle_buffer_size_, other->shuffle_buffer_size_);
  swap(filenames_shuffle_buffer_size_, other->filenames_shuffle_buffer_size_);
  swap(prefetch_size_, other->prefetch_size_);
  swap(num_parallel_map_calls_, other->num_parallel_map_calls_);
  swap(read_block_length_, other->read_block_length_);
  swap(num_parallel_batches_, other->num_parallel_batches_);
  swap(num_prefetch_batches_, other->num_prefetch_batches_);
  swap(max_number_of_boxes_, other->max_number_of_boxes_);
  swap(sample_1_of_n_examples_, other->sample_1_of_n_examples_);
  swap(input_reader_, other->input_reader_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputReader::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputReader

// optional string name = 23 [default = ""];
bool InputReader::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InputReader::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void InputReader::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void InputReader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& InputReader::name() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.name)
  return name_.GetNoArena();
}
void InputReader::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.name)
}
#if LANG_CXX11
void InputReader::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.InputReader.name)
}
#endif
void InputReader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.InputReader.name)
}
void InputReader::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.InputReader.name)
}
::std::string* InputReader::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InputReader::release_name() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InputReader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.name)
}

// optional string label_map_path = 1 [default = ""];
bool InputReader::has_label_map_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InputReader::set_has_label_map_path() {
  _has_bits_[0] |= 0x00000001u;
}
void InputReader::clear_has_label_map_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void InputReader::clear_label_map_path() {
  label_map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_path();
}
const ::std::string& InputReader::label_map_path() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.label_map_path)
  return label_map_path_.GetNoArena();
}
void InputReader::set_label_map_path(const ::std::string& value) {
  set_has_label_map_path();
  label_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.label_map_path)
}
#if LANG_CXX11
void InputReader::set_label_map_path(::std::string&& value) {
  set_has_label_map_path();
  label_map_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.InputReader.label_map_path)
}
#endif
void InputReader::set_label_map_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label_map_path();
  label_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.InputReader.label_map_path)
}
void InputReader::set_label_map_path(const char* value, size_t size) {
  set_has_label_map_path();
  label_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.InputReader.label_map_path)
}
::std::string* InputReader::mutable_label_map_path() {
  set_has_label_map_path();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.label_map_path)
  return label_map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InputReader::release_label_map_path() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.label_map_path)
  clear_has_label_map_path();
  return label_map_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InputReader::set_allocated_label_map_path(::std::string* label_map_path) {
  if (label_map_path != NULL) {
    set_has_label_map_path();
  } else {
    clear_has_label_map_path();
  }
  label_map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_path);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.label_map_path)
}

// optional bool shuffle = 2 [default = true];
bool InputReader::has_shuffle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void InputReader::set_has_shuffle() {
  _has_bits_[0] |= 0x00000100u;
}
void InputReader::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000100u;
}
void InputReader::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
bool InputReader::shuffle() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.shuffle)
  return shuffle_;
}
void InputReader::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.shuffle)
}

// optional uint32 shuffle_buffer_size = 11 [default = 2048];
bool InputReader::has_shuffle_buffer_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void InputReader::set_has_shuffle_buffer_size() {
  _has_bits_[0] |= 0x00002000u;
}
void InputReader::clear_has_shuffle_buffer_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void InputReader::clear_shuffle_buffer_size() {
  shuffle_buffer_size_ = 2048u;
  clear_has_shuffle_buffer_size();
}
::google::protobuf::uint32 InputReader::shuffle_buffer_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.shuffle_buffer_size)
  return shuffle_buffer_size_;
}
void InputReader::set_shuffle_buffer_size(::google::protobuf::uint32 value) {
  set_has_shuffle_buffer_size();
  shuffle_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.shuffle_buffer_size)
}

// optional uint32 filenames_shuffle_buffer_size = 12 [default = 100];
bool InputReader::has_filenames_shuffle_buffer_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void InputReader::set_has_filenames_shuffle_buffer_size() {
  _has_bits_[0] |= 0x00004000u;
}
void InputReader::clear_has_filenames_shuffle_buffer_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void InputReader::clear_filenames_shuffle_buffer_size() {
  filenames_shuffle_buffer_size_ = 100u;
  clear_has_filenames_shuffle_buffer_size();
}
::google::protobuf::uint32 InputReader::filenames_shuffle_buffer_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.filenames_shuffle_buffer_size)
  return filenames_shuffle_buffer_size_;
}
void InputReader::set_filenames_shuffle_buffer_size(::google::protobuf::uint32 value) {
  set_has_filenames_shuffle_buffer_size();
  filenames_shuffle_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.filenames_shuffle_buffer_size)
}

// optional uint32 num_epochs = 5 [default = 0];
bool InputReader::has_num_epochs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InputReader::set_has_num_epochs() {
  _has_bits_[0] |= 0x00000004u;
}
void InputReader::clear_has_num_epochs() {
  _has_bits_[0] &= ~0x00000004u;
}
void InputReader::clear_num_epochs() {
  num_epochs_ = 0u;
  clear_has_num_epochs();
}
::google::protobuf::uint32 InputReader::num_epochs() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_epochs)
  return num_epochs_;
}
void InputReader::set_num_epochs(::google::protobuf::uint32 value) {
  set_has_num_epochs();
  num_epochs_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_epochs)
}

// optional uint32 sample_1_of_n_examples = 22 [default = 1];
bool InputReader::has_sample_1_of_n_examples() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void InputReader::set_has_sample_1_of_n_examples() {
  _has_bits_[0] |= 0x00200000u;
}
void InputReader::clear_has_sample_1_of_n_examples() {
  _has_bits_[0] &= ~0x00200000u;
}
void InputReader::clear_sample_1_of_n_examples() {
  sample_1_of_n_examples_ = 1u;
  clear_has_sample_1_of_n_examples();
}
::google::protobuf::uint32 InputReader::sample_1_of_n_examples() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.sample_1_of_n_examples)
  return sample_1_of_n_examples_;
}
void InputReader::set_sample_1_of_n_examples(::google::protobuf::uint32 value) {
  set_has_sample_1_of_n_examples();
  sample_1_of_n_examples_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.sample_1_of_n_examples)
}

// optional uint32 num_readers = 6 [default = 64];
bool InputReader::has_num_readers() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void InputReader::set_has_num_readers() {
  _has_bits_[0] |= 0x00000800u;
}
void InputReader::clear_has_num_readers() {
  _has_bits_[0] &= ~0x00000800u;
}
void InputReader::clear_num_readers() {
  num_readers_ = 64u;
  clear_has_num_readers();
}
::google::protobuf::uint32 InputReader::num_readers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_readers)
  return num_readers_;
}
void InputReader::set_num_readers(::google::protobuf::uint32 value) {
  set_has_num_readers();
  num_readers_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_readers)
}

// optional uint32 num_parallel_batches = 19 [default = 8];
bool InputReader::has_num_parallel_batches() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void InputReader::set_has_num_parallel_batches() {
  _has_bits_[0] |= 0x00040000u;
}
void InputReader::clear_has_num_parallel_batches() {
  _has_bits_[0] &= ~0x00040000u;
}
void InputReader::clear_num_parallel_batches() {
  num_parallel_batches_ = 8u;
  clear_has_num_parallel_batches();
}
::google::protobuf::uint32 InputReader::num_parallel_batches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_parallel_batches)
  return num_parallel_batches_;
}
void InputReader::set_num_parallel_batches(::google::protobuf::uint32 value) {
  set_has_num_parallel_batches();
  num_parallel_batches_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_parallel_batches)
}

// optional int32 num_prefetch_batches = 20 [default = 2];
bool InputReader::has_num_prefetch_batches() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void InputReader::set_has_num_prefetch_batches() {
  _has_bits_[0] |= 0x00080000u;
}
void InputReader::clear_has_num_prefetch_batches() {
  _has_bits_[0] &= ~0x00080000u;
}
void InputReader::clear_num_prefetch_batches() {
  num_prefetch_batches_ = 2;
  clear_has_num_prefetch_batches();
}
::google::protobuf::int32 InputReader::num_prefetch_batches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_prefetch_batches)
  return num_prefetch_batches_;
}
void InputReader::set_num_prefetch_batches(::google::protobuf::int32 value) {
  set_has_num_prefetch_batches();
  num_prefetch_batches_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_prefetch_batches)
}

// optional uint32 queue_capacity = 3 [default = 2000, deprecated = true];
bool InputReader::has_queue_capacity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void InputReader::set_has_queue_capacity() {
  _has_bits_[0] |= 0x00000200u;
}
void InputReader::clear_has_queue_capacity() {
  _has_bits_[0] &= ~0x00000200u;
}
void InputReader::clear_queue_capacity() {
  queue_capacity_ = 2000u;
  clear_has_queue_capacity();
}
::google::protobuf::uint32 InputReader::queue_capacity() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.queue_capacity)
  return queue_capacity_;
}
void InputReader::set_queue_capacity(::google::protobuf::uint32 value) {
  set_has_queue_capacity();
  queue_capacity_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.queue_capacity)
}

// optional uint32 min_after_dequeue = 4 [default = 1000, deprecated = true];
bool InputReader::has_min_after_dequeue() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void InputReader::set_has_min_after_dequeue() {
  _has_bits_[0] |= 0x00000400u;
}
void InputReader::clear_has_min_after_dequeue() {
  _has_bits_[0] &= ~0x00000400u;
}
void InputReader::clear_min_after_dequeue() {
  min_after_dequeue_ = 1000u;
  clear_has_min_after_dequeue();
}
::google::protobuf::uint32 InputReader::min_after_dequeue() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.min_after_dequeue)
  return min_after_dequeue_;
}
void InputReader::set_min_after_dequeue(::google::protobuf::uint32 value) {
  set_has_min_after_dequeue();
  min_after_dequeue_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.min_after_dequeue)
}

// optional uint32 read_block_length = 15 [default = 32];
bool InputReader::has_read_block_length() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void InputReader::set_has_read_block_length() {
  _has_bits_[0] |= 0x00020000u;
}
void InputReader::clear_has_read_block_length() {
  _has_bits_[0] &= ~0x00020000u;
}
void InputReader::clear_read_block_length() {
  read_block_length_ = 32u;
  clear_has_read_block_length();
}
::google::protobuf::uint32 InputReader::read_block_length() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.read_block_length)
  return read_block_length_;
}
void InputReader::set_read_block_length(::google::protobuf::uint32 value) {
  set_has_read_block_length();
  read_block_length_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.read_block_length)
}

// optional uint32 prefetch_size = 13 [default = 512, deprecated = true];
bool InputReader::has_prefetch_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void InputReader::set_has_prefetch_size() {
  _has_bits_[0] |= 0x00008000u;
}
void InputReader::clear_has_prefetch_size() {
  _has_bits_[0] &= ~0x00008000u;
}
void InputReader::clear_prefetch_size() {
  prefetch_size_ = 512u;
  clear_has_prefetch_size();
}
::google::protobuf::uint32 InputReader::prefetch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.prefetch_size)
  return prefetch_size_;
}
void InputReader::set_prefetch_size(::google::protobuf::uint32 value) {
  set_has_prefetch_size();
  prefetch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.prefetch_size)
}

// optional uint32 num_parallel_map_calls = 14 [default = 64, deprecated = true];
bool InputReader::has_num_parallel_map_calls() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void InputReader::set_has_num_parallel_map_calls() {
  _has_bits_[0] |= 0x00010000u;
}
void InputReader::clear_has_num_parallel_map_calls() {
  _has_bits_[0] &= ~0x00010000u;
}
void InputReader::clear_num_parallel_map_calls() {
  num_parallel_map_calls_ = 64u;
  clear_has_num_parallel_map_calls();
}
::google::protobuf::uint32 InputReader::num_parallel_map_calls() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_parallel_map_calls)
  return num_parallel_map_calls_;
}
void InputReader::set_num_parallel_map_calls(::google::protobuf::uint32 value) {
  set_has_num_parallel_map_calls();
  num_parallel_map_calls_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_parallel_map_calls)
}

// optional int32 num_additional_channels = 18 [default = 0];
bool InputReader::has_num_additional_channels() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void InputReader::set_has_num_additional_channels() {
  _has_bits_[0] |= 0x00000080u;
}
void InputReader::clear_has_num_additional_channels() {
  _has_bits_[0] &= ~0x00000080u;
}
void InputReader::clear_num_additional_channels() {
  num_additional_channels_ = 0;
  clear_has_num_additional_channels();
}
::google::protobuf::int32 InputReader::num_additional_channels() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_additional_channels)
  return num_additional_channels_;
}
void InputReader::set_num_additional_channels(::google::protobuf::int32 value) {
  set_has_num_additional_channels();
  num_additional_channels_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_additional_channels)
}

// optional uint32 num_keypoints = 16 [default = 0];
bool InputReader::has_num_keypoints() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InputReader::set_has_num_keypoints() {
  _has_bits_[0] |= 0x00000008u;
}
void InputReader::clear_has_num_keypoints() {
  _has_bits_[0] &= ~0x00000008u;
}
void InputReader::clear_num_keypoints() {
  num_keypoints_ = 0u;
  clear_has_num_keypoints();
}
::google::protobuf::uint32 InputReader::num_keypoints() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.num_keypoints)
  return num_keypoints_;
}
void InputReader::set_num_keypoints(::google::protobuf::uint32 value) {
  set_has_num_keypoints();
  num_keypoints_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.num_keypoints)
}

// optional int32 max_number_of_boxes = 21 [default = 100];
bool InputReader::has_max_number_of_boxes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void InputReader::set_has_max_number_of_boxes() {
  _has_bits_[0] |= 0x00100000u;
}
void InputReader::clear_has_max_number_of_boxes() {
  _has_bits_[0] &= ~0x00100000u;
}
void InputReader::clear_max_number_of_boxes() {
  max_number_of_boxes_ = 100;
  clear_has_max_number_of_boxes();
}
::google::protobuf::int32 InputReader::max_number_of_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.max_number_of_boxes)
  return max_number_of_boxes_;
}
void InputReader::set_max_number_of_boxes(::google::protobuf::int32 value) {
  set_has_max_number_of_boxes();
  max_number_of_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.max_number_of_boxes)
}

// optional bool load_multiclass_scores = 24 [default = false];
bool InputReader::has_load_multiclass_scores() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InputReader::set_has_load_multiclass_scores() {
  _has_bits_[0] |= 0x00000010u;
}
void InputReader::clear_has_load_multiclass_scores() {
  _has_bits_[0] &= ~0x00000010u;
}
void InputReader::clear_load_multiclass_scores() {
  load_multiclass_scores_ = false;
  clear_has_load_multiclass_scores();
}
bool InputReader::load_multiclass_scores() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.load_multiclass_scores)
  return load_multiclass_scores_;
}
void InputReader::set_load_multiclass_scores(bool value) {
  set_has_load_multiclass_scores();
  load_multiclass_scores_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.load_multiclass_scores)
}

// optional bool load_instance_masks = 7 [default = false];
bool InputReader::has_load_instance_masks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InputReader::set_has_load_instance_masks() {
  _has_bits_[0] |= 0x00000020u;
}
void InputReader::clear_has_load_instance_masks() {
  _has_bits_[0] &= ~0x00000020u;
}
void InputReader::clear_load_instance_masks() {
  load_instance_masks_ = false;
  clear_has_load_instance_masks();
}
bool InputReader::load_instance_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.load_instance_masks)
  return load_instance_masks_;
}
void InputReader::set_load_instance_masks(bool value) {
  set_has_load_instance_masks();
  load_instance_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.load_instance_masks)
}

// optional .object_detection.protos.InstanceMaskType mask_type = 10 [default = NUMERICAL_MASKS];
bool InputReader::has_mask_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void InputReader::set_has_mask_type() {
  _has_bits_[0] |= 0x00001000u;
}
void InputReader::clear_has_mask_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void InputReader::clear_mask_type() {
  mask_type_ = 1;
  clear_has_mask_type();
}
::object_detection::protos::InstanceMaskType InputReader::mask_type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.mask_type)
  return static_cast< ::object_detection::protos::InstanceMaskType >(mask_type_);
}
void InputReader::set_mask_type(::object_detection::protos::InstanceMaskType value) {
  assert(::object_detection::protos::InstanceMaskType_IsValid(value));
  set_has_mask_type();
  mask_type_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.mask_type)
}

// optional bool use_display_name = 17 [default = false];
bool InputReader::has_use_display_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InputReader::set_has_use_display_name() {
  _has_bits_[0] |= 0x00000040u;
}
void InputReader::clear_has_use_display_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void InputReader::clear_use_display_name() {
  use_display_name_ = false;
  clear_has_use_display_name();
}
bool InputReader::use_display_name() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.use_display_name)
  return use_display_name_;
}
void InputReader::set_use_display_name(bool value) {
  set_has_use_display_name();
  use_display_name_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.InputReader.use_display_name)
}

// optional .object_detection.protos.TFRecordInputReader tf_record_input_reader = 8;
bool InputReader::has_tf_record_input_reader() const {
  return input_reader_case() == kTfRecordInputReader;
}
void InputReader::set_has_tf_record_input_reader() {
  _oneof_case_[0] = kTfRecordInputReader;
}
void InputReader::clear_tf_record_input_reader() {
  if (has_tf_record_input_reader()) {
    delete input_reader_.tf_record_input_reader_;
    clear_has_input_reader();
  }
}
 const ::object_detection::protos::TFRecordInputReader& InputReader::tf_record_input_reader() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.tf_record_input_reader)
  return has_tf_record_input_reader()
      ? *input_reader_.tf_record_input_reader_
      : ::object_detection::protos::TFRecordInputReader::default_instance();
}
::object_detection::protos::TFRecordInputReader* InputReader::mutable_tf_record_input_reader() {
  if (!has_tf_record_input_reader()) {
    clear_input_reader();
    set_has_tf_record_input_reader();
    input_reader_.tf_record_input_reader_ = new ::object_detection::protos::TFRecordInputReader;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.tf_record_input_reader)
  return input_reader_.tf_record_input_reader_;
}
::object_detection::protos::TFRecordInputReader* InputReader::release_tf_record_input_reader() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.tf_record_input_reader)
  if (has_tf_record_input_reader()) {
    clear_has_input_reader();
    ::object_detection::protos::TFRecordInputReader* temp = input_reader_.tf_record_input_reader_;
    input_reader_.tf_record_input_reader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InputReader::set_allocated_tf_record_input_reader(::object_detection::protos::TFRecordInputReader* tf_record_input_reader) {
  clear_input_reader();
  if (tf_record_input_reader) {
    set_has_tf_record_input_reader();
    input_reader_.tf_record_input_reader_ = tf_record_input_reader;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.tf_record_input_reader)
}

// optional .object_detection.protos.ExternalInputReader external_input_reader = 9;
bool InputReader::has_external_input_reader() const {
  return input_reader_case() == kExternalInputReader;
}
void InputReader::set_has_external_input_reader() {
  _oneof_case_[0] = kExternalInputReader;
}
void InputReader::clear_external_input_reader() {
  if (has_external_input_reader()) {
    delete input_reader_.external_input_reader_;
    clear_has_input_reader();
  }
}
 const ::object_detection::protos::ExternalInputReader& InputReader::external_input_reader() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.InputReader.external_input_reader)
  return has_external_input_reader()
      ? *input_reader_.external_input_reader_
      : ::object_detection::protos::ExternalInputReader::default_instance();
}
::object_detection::protos::ExternalInputReader* InputReader::mutable_external_input_reader() {
  if (!has_external_input_reader()) {
    clear_input_reader();
    set_has_external_input_reader();
    input_reader_.external_input_reader_ = new ::object_detection::protos::ExternalInputReader;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.InputReader.external_input_reader)
  return input_reader_.external_input_reader_;
}
::object_detection::protos::ExternalInputReader* InputReader::release_external_input_reader() {
  // @@protoc_insertion_point(field_release:object_detection.protos.InputReader.external_input_reader)
  if (has_external_input_reader()) {
    clear_has_input_reader();
    ::object_detection::protos::ExternalInputReader* temp = input_reader_.external_input_reader_;
    input_reader_.external_input_reader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InputReader::set_allocated_external_input_reader(::object_detection::protos::ExternalInputReader* external_input_reader) {
  clear_input_reader();
  if (external_input_reader) {
    set_has_external_input_reader();
    input_reader_.external_input_reader_ = external_input_reader;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.InputReader.external_input_reader)
}

bool InputReader::has_input_reader() const {
  return input_reader_case() != INPUT_READER_NOT_SET;
}
void InputReader::clear_has_input_reader() {
  _oneof_case_[0] = INPUT_READER_NOT_SET;
}
InputReader::InputReaderCase InputReader::input_reader_case() const {
  return InputReader::InputReaderCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFRecordInputReader::kInputPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFRecordInputReader::TFRecordInputReader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.TFRecordInputReader)
}
TFRecordInputReader::TFRecordInputReader(const TFRecordInputReader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      input_path_(from.input_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.TFRecordInputReader)
}

void TFRecordInputReader::SharedCtor() {
  _cached_size_ = 0;
}

TFRecordInputReader::~TFRecordInputReader() {
  // @@protoc_insertion_point(destructor:object_detection.protos.TFRecordInputReader)
  SharedDtor();
}

void TFRecordInputReader::SharedDtor() {
}

void TFRecordInputReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFRecordInputReader::descriptor() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TFRecordInputReader& TFRecordInputReader::default_instance() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFRecordInputReader* TFRecordInputReader::New(::google::protobuf::Arena* arena) const {
  TFRecordInputReader* n = new TFRecordInputReader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFRecordInputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.TFRecordInputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_path_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFRecordInputReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.TFRecordInputReader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_path(this->input_path_size() - 1).data(),
            static_cast<int>(this->input_path(this->input_path_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.TFRecordInputReader.input_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.TFRecordInputReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.TFRecordInputReader)
  return false;
#undef DO_
}

void TFRecordInputReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.TFRecordInputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_path = 1;
  for (int i = 0, n = this->input_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_path(i).data(), static_cast<int>(this->input_path(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TFRecordInputReader.input_path");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.TFRecordInputReader)
}

::google::protobuf::uint8* TFRecordInputReader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.TFRecordInputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_path = 1;
  for (int i = 0, n = this->input_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_path(i).data(), static_cast<int>(this->input_path(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TFRecordInputReader.input_path");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input_path(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.TFRecordInputReader)
  return target;
}

size_t TFRecordInputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.TFRecordInputReader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string input_path = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_path_size());
  for (int i = 0, n = this->input_path_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_path(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFRecordInputReader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.TFRecordInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const TFRecordInputReader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TFRecordInputReader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.TFRecordInputReader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.TFRecordInputReader)
    MergeFrom(*source);
  }
}

void TFRecordInputReader::MergeFrom(const TFRecordInputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.TFRecordInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_path_.MergeFrom(from.input_path_);
}

void TFRecordInputReader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.TFRecordInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFRecordInputReader::CopyFrom(const TFRecordInputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.TFRecordInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFRecordInputReader::IsInitialized() const {
  return true;
}

void TFRecordInputReader::Swap(TFRecordInputReader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFRecordInputReader::InternalSwap(TFRecordInputReader* other) {
  using std::swap;
  input_path_.InternalSwap(&other->input_path_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TFRecordInputReader::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFRecordInputReader

// repeated string input_path = 1;
int TFRecordInputReader::input_path_size() const {
  return input_path_.size();
}
void TFRecordInputReader::clear_input_path() {
  input_path_.Clear();
}
const ::std::string& TFRecordInputReader::input_path(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TFRecordInputReader.input_path)
  return input_path_.Get(index);
}
::std::string* TFRecordInputReader::mutable_input_path(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TFRecordInputReader.input_path)
  return input_path_.Mutable(index);
}
void TFRecordInputReader::set_input_path(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TFRecordInputReader.input_path)
  input_path_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TFRecordInputReader::set_input_path(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TFRecordInputReader.input_path)
  input_path_.Mutable(index)->assign(std::move(value));
}
#endif
void TFRecordInputReader::set_input_path(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TFRecordInputReader.input_path)
}
void TFRecordInputReader::set_input_path(int index, const char* value, size_t size) {
  input_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TFRecordInputReader.input_path)
}
::std::string* TFRecordInputReader::add_input_path() {
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.TFRecordInputReader.input_path)
  return input_path_.Add();
}
void TFRecordInputReader::add_input_path(const ::std::string& value) {
  input_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.TFRecordInputReader.input_path)
}
#if LANG_CXX11
void TFRecordInputReader::add_input_path(::std::string&& value) {
  input_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.TFRecordInputReader.input_path)
}
#endif
void TFRecordInputReader::add_input_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.TFRecordInputReader.input_path)
}
void TFRecordInputReader::add_input_path(const char* value, size_t size) {
  input_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.TFRecordInputReader.input_path)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TFRecordInputReader::input_path() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TFRecordInputReader.input_path)
  return input_path_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TFRecordInputReader::mutable_input_path() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TFRecordInputReader.input_path)
  return &input_path_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalInputReader::ExternalInputReader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ExternalInputReader)
}
ExternalInputReader::ExternalInputReader(const ExternalInputReader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ExternalInputReader)
}

void ExternalInputReader::SharedCtor() {
  _cached_size_ = 0;
}

ExternalInputReader::~ExternalInputReader() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ExternalInputReader)
  SharedDtor();
}

void ExternalInputReader::SharedDtor() {
}

void ExternalInputReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalInputReader::descriptor() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExternalInputReader& ExternalInputReader::default_instance() {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExternalInputReader* ExternalInputReader::New(::google::protobuf::Arena* arena) const {
  ExternalInputReader* n = new ExternalInputReader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternalInputReader::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ExternalInputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExternalInputReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ExternalInputReader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    if ((8u <= tag && tag < 8000u)) {
      DO_(_extensions_.ParseField(tag, input,
          internal_default_instance(),
          _internal_metadata_.mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ExternalInputReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ExternalInputReader)
  return false;
#undef DO_
}

void ExternalInputReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ExternalInputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 1000)
  _extensions_.SerializeWithCachedSizes(
      1, 1000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ExternalInputReader)
}

::google::protobuf::uint8* ExternalInputReader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ExternalInputReader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // Extension range [1, 1000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1, 1000, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ExternalInputReader)
  return target;
}

size_t ExternalInputReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ExternalInputReader)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalInputReader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ExternalInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalInputReader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternalInputReader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ExternalInputReader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ExternalInputReader)
    MergeFrom(*source);
  }
}

void ExternalInputReader::MergeFrom(const ExternalInputReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ExternalInputReader)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExternalInputReader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ExternalInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalInputReader::CopyFrom(const ExternalInputReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ExternalInputReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalInputReader::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void ExternalInputReader::Swap(ExternalInputReader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalInputReader::InternalSwap(ExternalInputReader* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata ExternalInputReader::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2finput_5freader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalInputReader

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
