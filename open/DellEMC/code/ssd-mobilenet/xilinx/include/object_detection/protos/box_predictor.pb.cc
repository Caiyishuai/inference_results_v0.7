// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/box_predictor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/box_predictor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class BoxPredictorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BoxPredictor>
     _instance;
  const ::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor_;
  const ::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor_;
  const ::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor_;
  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor_;
} _BoxPredictor_default_instance_;
class ConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionalBoxPredictor_BoxEncodingsClipRange>
     _instance;
} _ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
class ConvolutionalBoxPredictorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConvolutionalBoxPredictor>
     _instance;
} _ConvolutionalBoxPredictor_default_instance_;
class WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange>
     _instance;
} _WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
class WeightSharedConvolutionalBoxPredictorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightSharedConvolutionalBoxPredictor>
     _instance;
} _WeightSharedConvolutionalBoxPredictor_default_instance_;
class MaskRCNNBoxPredictorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MaskRCNNBoxPredictor>
     _instance;
} _MaskRCNNBoxPredictor_default_instance_;
class RfcnBoxPredictorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RfcnBoxPredictor>
     _instance;
} _RfcnBoxPredictor_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxPredictor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxPredictor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(BoxPredictorDefaultTypeInternal, convolutional_box_predictor_),
  offsetof(BoxPredictorDefaultTypeInternal, mask_rcnn_box_predictor_),
  offsetof(BoxPredictorDefaultTypeInternal, rfcn_box_predictor_),
  offsetof(BoxPredictorDefaultTypeInternal, weight_shared_convolutional_box_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxPredictor, box_predictor_oneof_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor_BoxEncodingsClipRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor_BoxEncodingsClipRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor_BoxEncodingsClipRange, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor_BoxEncodingsClipRange, max_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, min_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, max_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, num_layers_before_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, use_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, dropout_keep_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, box_code_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, apply_sigmoid_to_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, class_prediction_bias_init_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, use_depthwise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionalBoxPredictor, box_encodings_clip_range_),
  0,
  2,
  3,
  4,
  8,
  9,
  10,
  11,
  6,
  5,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange, max_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, num_layers_before_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, box_code_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, class_prediction_bias_init_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, use_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, dropout_keep_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, share_prediction_tower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, use_depthwise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, score_converter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightSharedConvolutionalBoxPredictor, box_encodings_clip_range_),
  0,
  3,
  2,
  10,
  11,
  4,
  5,
  9,
  6,
  7,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, fc_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, use_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, dropout_keep_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, box_code_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, predict_instance_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, mask_prediction_conv_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, predict_keypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, mask_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, mask_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, mask_prediction_num_conv_layers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, masks_are_class_agnostic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, share_box_across_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskRCNNBoxPredictor, convolve_then_upsample_masks_),
  0,
  2,
  8,
  9,
  1,
  3,
  10,
  4,
  11,
  12,
  13,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, num_spatial_bins_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, num_spatial_bins_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, box_code_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, crop_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RfcnBoxPredictor, crop_width_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(BoxPredictor)},
  { 14, 21, sizeof(ConvolutionalBoxPredictor_BoxEncodingsClipRange)},
  { 23, 40, sizeof(ConvolutionalBoxPredictor)},
  { 52, 59, sizeof(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange)},
  { 61, 78, sizeof(WeightSharedConvolutionalBoxPredictor)},
  { 90, 109, sizeof(MaskRCNNBoxPredictor)},
  { 123, 135, sizeof(RfcnBoxPredictor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoxPredictor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvolutionalBoxPredictor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightSharedConvolutionalBoxPredictor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaskRCNNBoxPredictor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RfcnBoxPredictor_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/box_predictor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fhyperparams_2eproto::InitDefaults();
  _BoxPredictor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BoxPredictor_default_instance_);_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);_ConvolutionalBoxPredictor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConvolutionalBoxPredictor_default_instance_);_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);_WeightSharedConvolutionalBoxPredictor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightSharedConvolutionalBoxPredictor_default_instance_);_MaskRCNNBoxPredictor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MaskRCNNBoxPredictor_default_instance_);_RfcnBoxPredictor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RfcnBoxPredictor_default_instance_);_BoxPredictor_default_instance_.convolutional_box_predictor_ = const_cast< ::object_detection::protos::ConvolutionalBoxPredictor*>(
      ::object_detection::protos::ConvolutionalBoxPredictor::internal_default_instance());
  _BoxPredictor_default_instance_.mask_rcnn_box_predictor_ = const_cast< ::object_detection::protos::MaskRCNNBoxPredictor*>(
      ::object_detection::protos::MaskRCNNBoxPredictor::internal_default_instance());
  _BoxPredictor_default_instance_.rfcn_box_predictor_ = const_cast< ::object_detection::protos::RfcnBoxPredictor*>(
      ::object_detection::protos::RfcnBoxPredictor::internal_default_instance());
  _BoxPredictor_default_instance_.weight_shared_convolutional_box_predictor_ = const_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor*>(
      ::object_detection::protos::WeightSharedConvolutionalBoxPredictor::internal_default_instance());
  _ConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _ConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->box_encodings_clip_range_ = const_cast< ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::internal_default_instance());
  _WeightSharedConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _WeightSharedConvolutionalBoxPredictor_default_instance_._instance.get_mutable()->box_encodings_clip_range_ = const_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::internal_default_instance());
  _MaskRCNNBoxPredictor_default_instance_._instance.get_mutable()->fc_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _MaskRCNNBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _RfcnBoxPredictor_default_instance_._instance.get_mutable()->conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+object_detection/protos/box_predictor."
      "proto\022\027object_detection.protos\032)object_d"
      "etection/protos/hyperparams.proto\"\220\003\n\014Bo"
      "xPredictor\022Y\n\033convolutional_box_predicto"
      "r\030\001 \001(\01322.object_detection.protos.Convol"
      "utionalBoxPredictorH\000\022P\n\027mask_rcnn_box_p"
      "redictor\030\002 \001(\0132-.object_detection.protos"
      ".MaskRCNNBoxPredictorH\000\022G\n\022rfcn_box_pred"
      "ictor\030\003 \001(\0132).object_detection.protos.Rf"
      "cnBoxPredictorH\000\022s\n)weight_shared_convol"
      "utional_box_predictor\030\004 \001(\0132>.object_det"
      "ection.protos.WeightSharedConvolutionalB"
      "oxPredictorH\000B\025\n\023box_predictor_oneof\"\257\004\n"
      "\031ConvolutionalBoxPredictor\022>\n\020conv_hyper"
      "params\030\001 \001(\0132$.object_detection.protos.H"
      "yperparams\022\024\n\tmin_depth\030\002 \001(\005:\0010\022\024\n\tmax_"
      "depth\030\003 \001(\005:\0010\022&\n\033num_layers_before_pred"
      "ictor\030\004 \001(\005:\0010\022\031\n\013use_dropout\030\005 \001(\010:\004tru"
      "e\022%\n\030dropout_keep_probability\030\006 \001(\002:\0030.8"
      "\022\026\n\013kernel_size\030\007 \001(\005:\0011\022\030\n\rbox_code_siz"
      "e\030\010 \001(\005:\0014\022&\n\027apply_sigmoid_to_scores\030\t "
      "\001(\010:\005false\022%\n\032class_prediction_bias_init"
      "\030\n \001(\002:\0010\022\034\n\ruse_depthwise\030\013 \001(\010:\005false\022"
      "j\n\030box_encodings_clip_range\030\014 \001(\0132H.obje"
      "ct_detection.protos.ConvolutionalBoxPred"
      "ictor.BoxEncodingsClipRange\0321\n\025BoxEncodi"
      "ngsClipRange\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"\314"
      "\005\n%WeightSharedConvolutionalBoxPredictor"
      "\022>\n\020conv_hyperparams\030\001 \001(\0132$.object_dete"
      "ction.protos.Hyperparams\022&\n\033num_layers_b"
      "efore_predictor\030\004 \001(\005:\0010\022\020\n\005depth\030\002 \001(\005:"
      "\0010\022\026\n\013kernel_size\030\007 \001(\005:\0013\022\030\n\rbox_code_s"
      "ize\030\010 \001(\005:\0014\022%\n\032class_prediction_bias_in"
      "it\030\n \001(\002:\0010\022\032\n\013use_dropout\030\013 \001(\010:\005false\022"
      "%\n\030dropout_keep_probability\030\014 \001(\002:\0030.8\022%"
      "\n\026share_prediction_tower\030\r \001(\010:\005false\022\034\n"
      "\ruse_depthwise\030\016 \001(\010:\005false\022p\n\017score_con"
      "verter\030\020 \001(\0162M.object_detection.protos.W"
      "eightSharedConvolutionalBoxPredictor.Sco"
      "reConverter:\010IDENTITY\022v\n\030box_encodings_c"
      "lip_range\030\021 \001(\0132T.object_detection.proto"
      "s.WeightSharedConvolutionalBoxPredictor."
      "BoxEncodingsClipRange\0321\n\025BoxEncodingsCli"
      "pRange\022\013\n\003min\030\001 \001(\002\022\013\n\003max\030\002 \001(\002\"+\n\016Scor"
      "eConverter\022\014\n\010IDENTITY\020\000\022\013\n\007SIGMOID\020\001\"\277\004"
      "\n\024MaskRCNNBoxPredictor\022<\n\016fc_hyperparams"
      "\030\001 \001(\0132$.object_detection.protos.Hyperpa"
      "rams\022\032\n\013use_dropout\030\002 \001(\010:\005false\022%\n\030drop"
      "out_keep_probability\030\003 \001(\002:\0030.5\022\030\n\rbox_c"
      "ode_size\030\004 \001(\005:\0014\022>\n\020conv_hyperparams\030\005 "
      "\001(\0132$.object_detection.protos.Hyperparam"
      "s\022%\n\026predict_instance_masks\030\006 \001(\010:\005false"
      "\022\'\n\032mask_prediction_conv_depth\030\007 \001(\005:\00325"
      "6\022 \n\021predict_keypoints\030\010 \001(\010:\005false\022\027\n\013m"
      "ask_height\030\t \001(\005:\00215\022\026\n\nmask_width\030\n \001(\005"
      ":\00215\022*\n\037mask_prediction_num_conv_layers\030"
      "\013 \001(\005:\0012\022\'\n\030masks_are_class_agnostic\030\014 \001"
      "(\010:\005false\022\'\n\030share_box_across_classes\030\r "
      "\001(\010:\005false\022+\n\034convolve_then_upsample_mas"
      "ks\030\016 \001(\010:\005false\"\371\001\n\020RfcnBoxPredictor\022>\n\020"
      "conv_hyperparams\030\001 \001(\0132$.object_detectio"
      "n.protos.Hyperparams\022\"\n\027num_spatial_bins"
      "_height\030\002 \001(\005:\0013\022!\n\026num_spatial_bins_wid"
      "th\030\003 \001(\005:\0013\022\023\n\005depth\030\004 \001(\005:\0041024\022\030\n\rbox_"
      "code_size\030\005 \001(\005:\0014\022\027\n\013crop_height\030\006 \001(\005:"
      "\00212\022\026\n\ncrop_width\030\007 \001(\005:\00212"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/box_predictor.proto", &protobuf_RegisterTypes);
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fhyperparams_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto

const ::google::protobuf::EnumDescriptor* WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_enum_descriptors[0];
}
bool WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::IDENTITY;
const WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::SIGMOID;
const WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::ScoreConverter_MIN;
const WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::ScoreConverter_MAX;
const int WeightSharedConvolutionalBoxPredictor::ScoreConverter_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoxPredictor::kConvolutionalBoxPredictorFieldNumber;
const int BoxPredictor::kMaskRcnnBoxPredictorFieldNumber;
const int BoxPredictor::kRfcnBoxPredictorFieldNumber;
const int BoxPredictor::kWeightSharedConvolutionalBoxPredictorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoxPredictor::BoxPredictor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BoxPredictor)
}
BoxPredictor::BoxPredictor(const BoxPredictor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_box_predictor_oneof();
  switch (from.box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor: {
      mutable_convolutional_box_predictor()->::object_detection::protos::ConvolutionalBoxPredictor::MergeFrom(from.convolutional_box_predictor());
      break;
    }
    case kMaskRcnnBoxPredictor: {
      mutable_mask_rcnn_box_predictor()->::object_detection::protos::MaskRCNNBoxPredictor::MergeFrom(from.mask_rcnn_box_predictor());
      break;
    }
    case kRfcnBoxPredictor: {
      mutable_rfcn_box_predictor()->::object_detection::protos::RfcnBoxPredictor::MergeFrom(from.rfcn_box_predictor());
      break;
    }
    case kWeightSharedConvolutionalBoxPredictor: {
      mutable_weight_shared_convolutional_box_predictor()->::object_detection::protos::WeightSharedConvolutionalBoxPredictor::MergeFrom(from.weight_shared_convolutional_box_predictor());
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BoxPredictor)
}

void BoxPredictor::SharedCtor() {
  _cached_size_ = 0;
  clear_has_box_predictor_oneof();
}

BoxPredictor::~BoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BoxPredictor)
  SharedDtor();
}

void BoxPredictor::SharedDtor() {
  if (has_box_predictor_oneof()) {
    clear_box_predictor_oneof();
  }
}

void BoxPredictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxPredictor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoxPredictor& BoxPredictor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoxPredictor* BoxPredictor::New(::google::protobuf::Arena* arena) const {
  BoxPredictor* n = new BoxPredictor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoxPredictor::clear_box_predictor_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.BoxPredictor)
  switch (box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor: {
      delete box_predictor_oneof_.convolutional_box_predictor_;
      break;
    }
    case kMaskRcnnBoxPredictor: {
      delete box_predictor_oneof_.mask_rcnn_box_predictor_;
      break;
    }
    case kRfcnBoxPredictor: {
      delete box_predictor_oneof_.rfcn_box_predictor_;
      break;
    }
    case kWeightSharedConvolutionalBoxPredictor: {
      delete box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BOX_PREDICTOR_ONEOF_NOT_SET;
}


void BoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_box_predictor_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoxPredictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BoxPredictor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolutional_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mask_rcnn_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rfcn_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_shared_convolutional_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BoxPredictor)
  return false;
#undef DO_
}

void BoxPredictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *box_predictor_oneof_.convolutional_box_predictor_, output);
      break;
    case kMaskRcnnBoxPredictor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *box_predictor_oneof_.mask_rcnn_box_predictor_, output);
      break;
    case kRfcnBoxPredictor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *box_predictor_oneof_.rfcn_box_predictor_, output);
      break;
    case kWeightSharedConvolutionalBoxPredictor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *box_predictor_oneof_.weight_shared_convolutional_box_predictor_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BoxPredictor)
}

::google::protobuf::uint8* BoxPredictor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *box_predictor_oneof_.convolutional_box_predictor_, deterministic, target);
      break;
    case kMaskRcnnBoxPredictor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *box_predictor_oneof_.mask_rcnn_box_predictor_, deterministic, target);
      break;
    case kRfcnBoxPredictor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *box_predictor_oneof_.rfcn_box_predictor_, deterministic, target);
      break;
    case kWeightSharedConvolutionalBoxPredictor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *box_predictor_oneof_.weight_shared_convolutional_box_predictor_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BoxPredictor)
  return target;
}

size_t BoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (box_predictor_oneof_case()) {
    // optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
    case kConvolutionalBoxPredictor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *box_predictor_oneof_.convolutional_box_predictor_);
      break;
    }
    // optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
    case kMaskRcnnBoxPredictor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *box_predictor_oneof_.mask_rcnn_box_predictor_);
      break;
    }
    // optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
    case kRfcnBoxPredictor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *box_predictor_oneof_.rfcn_box_predictor_);
      break;
    }
    // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
    case kWeightSharedConvolutionalBoxPredictor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *box_predictor_oneof_.weight_shared_convolutional_box_predictor_);
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxPredictor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const BoxPredictor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoxPredictor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BoxPredictor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BoxPredictor)
    MergeFrom(*source);
  }
}

void BoxPredictor::MergeFrom(const BoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.box_predictor_oneof_case()) {
    case kConvolutionalBoxPredictor: {
      mutable_convolutional_box_predictor()->::object_detection::protos::ConvolutionalBoxPredictor::MergeFrom(from.convolutional_box_predictor());
      break;
    }
    case kMaskRcnnBoxPredictor: {
      mutable_mask_rcnn_box_predictor()->::object_detection::protos::MaskRCNNBoxPredictor::MergeFrom(from.mask_rcnn_box_predictor());
      break;
    }
    case kRfcnBoxPredictor: {
      mutable_rfcn_box_predictor()->::object_detection::protos::RfcnBoxPredictor::MergeFrom(from.rfcn_box_predictor());
      break;
    }
    case kWeightSharedConvolutionalBoxPredictor: {
      mutable_weight_shared_convolutional_box_predictor()->::object_detection::protos::WeightSharedConvolutionalBoxPredictor::MergeFrom(from.weight_shared_convolutional_box_predictor());
      break;
    }
    case BOX_PREDICTOR_ONEOF_NOT_SET: {
      break;
    }
  }
}

void BoxPredictor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxPredictor::CopyFrom(const BoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxPredictor::IsInitialized() const {
  return true;
}

void BoxPredictor::Swap(BoxPredictor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoxPredictor::InternalSwap(BoxPredictor* other) {
  using std::swap;
  swap(box_predictor_oneof_, other->box_predictor_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoxPredictor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoxPredictor

// optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
bool BoxPredictor::has_convolutional_box_predictor() const {
  return box_predictor_oneof_case() == kConvolutionalBoxPredictor;
}
void BoxPredictor::set_has_convolutional_box_predictor() {
  _oneof_case_[0] = kConvolutionalBoxPredictor;
}
void BoxPredictor::clear_convolutional_box_predictor() {
  if (has_convolutional_box_predictor()) {
    delete box_predictor_oneof_.convolutional_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
 const ::object_detection::protos::ConvolutionalBoxPredictor& BoxPredictor::convolutional_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.convolutional_box_predictor)
  return has_convolutional_box_predictor()
      ? *box_predictor_oneof_.convolutional_box_predictor_
      : ::object_detection::protos::ConvolutionalBoxPredictor::default_instance();
}
::object_detection::protos::ConvolutionalBoxPredictor* BoxPredictor::mutable_convolutional_box_predictor() {
  if (!has_convolutional_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_convolutional_box_predictor();
    box_predictor_oneof_.convolutional_box_predictor_ = new ::object_detection::protos::ConvolutionalBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.convolutional_box_predictor)
  return box_predictor_oneof_.convolutional_box_predictor_;
}
::object_detection::protos::ConvolutionalBoxPredictor* BoxPredictor::release_convolutional_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.convolutional_box_predictor)
  if (has_convolutional_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::ConvolutionalBoxPredictor* temp = box_predictor_oneof_.convolutional_box_predictor_;
    box_predictor_oneof_.convolutional_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BoxPredictor::set_allocated_convolutional_box_predictor(::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor) {
  clear_box_predictor_oneof();
  if (convolutional_box_predictor) {
    set_has_convolutional_box_predictor();
    box_predictor_oneof_.convolutional_box_predictor_ = convolutional_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.convolutional_box_predictor)
}

// optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
bool BoxPredictor::has_mask_rcnn_box_predictor() const {
  return box_predictor_oneof_case() == kMaskRcnnBoxPredictor;
}
void BoxPredictor::set_has_mask_rcnn_box_predictor() {
  _oneof_case_[0] = kMaskRcnnBoxPredictor;
}
void BoxPredictor::clear_mask_rcnn_box_predictor() {
  if (has_mask_rcnn_box_predictor()) {
    delete box_predictor_oneof_.mask_rcnn_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
 const ::object_detection::protos::MaskRCNNBoxPredictor& BoxPredictor::mask_rcnn_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
  return has_mask_rcnn_box_predictor()
      ? *box_predictor_oneof_.mask_rcnn_box_predictor_
      : ::object_detection::protos::MaskRCNNBoxPredictor::default_instance();
}
::object_detection::protos::MaskRCNNBoxPredictor* BoxPredictor::mutable_mask_rcnn_box_predictor() {
  if (!has_mask_rcnn_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_mask_rcnn_box_predictor();
    box_predictor_oneof_.mask_rcnn_box_predictor_ = new ::object_detection::protos::MaskRCNNBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
  return box_predictor_oneof_.mask_rcnn_box_predictor_;
}
::object_detection::protos::MaskRCNNBoxPredictor* BoxPredictor::release_mask_rcnn_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
  if (has_mask_rcnn_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::MaskRCNNBoxPredictor* temp = box_predictor_oneof_.mask_rcnn_box_predictor_;
    box_predictor_oneof_.mask_rcnn_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BoxPredictor::set_allocated_mask_rcnn_box_predictor(::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor) {
  clear_box_predictor_oneof();
  if (mask_rcnn_box_predictor) {
    set_has_mask_rcnn_box_predictor();
    box_predictor_oneof_.mask_rcnn_box_predictor_ = mask_rcnn_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
}

// optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
bool BoxPredictor::has_rfcn_box_predictor() const {
  return box_predictor_oneof_case() == kRfcnBoxPredictor;
}
void BoxPredictor::set_has_rfcn_box_predictor() {
  _oneof_case_[0] = kRfcnBoxPredictor;
}
void BoxPredictor::clear_rfcn_box_predictor() {
  if (has_rfcn_box_predictor()) {
    delete box_predictor_oneof_.rfcn_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
 const ::object_detection::protos::RfcnBoxPredictor& BoxPredictor::rfcn_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.rfcn_box_predictor)
  return has_rfcn_box_predictor()
      ? *box_predictor_oneof_.rfcn_box_predictor_
      : ::object_detection::protos::RfcnBoxPredictor::default_instance();
}
::object_detection::protos::RfcnBoxPredictor* BoxPredictor::mutable_rfcn_box_predictor() {
  if (!has_rfcn_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_rfcn_box_predictor();
    box_predictor_oneof_.rfcn_box_predictor_ = new ::object_detection::protos::RfcnBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.rfcn_box_predictor)
  return box_predictor_oneof_.rfcn_box_predictor_;
}
::object_detection::protos::RfcnBoxPredictor* BoxPredictor::release_rfcn_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.rfcn_box_predictor)
  if (has_rfcn_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::RfcnBoxPredictor* temp = box_predictor_oneof_.rfcn_box_predictor_;
    box_predictor_oneof_.rfcn_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BoxPredictor::set_allocated_rfcn_box_predictor(::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor) {
  clear_box_predictor_oneof();
  if (rfcn_box_predictor) {
    set_has_rfcn_box_predictor();
    box_predictor_oneof_.rfcn_box_predictor_ = rfcn_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.rfcn_box_predictor)
}

// optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
bool BoxPredictor::has_weight_shared_convolutional_box_predictor() const {
  return box_predictor_oneof_case() == kWeightSharedConvolutionalBoxPredictor;
}
void BoxPredictor::set_has_weight_shared_convolutional_box_predictor() {
  _oneof_case_[0] = kWeightSharedConvolutionalBoxPredictor;
}
void BoxPredictor::clear_weight_shared_convolutional_box_predictor() {
  if (has_weight_shared_convolutional_box_predictor()) {
    delete box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
 const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor& BoxPredictor::weight_shared_convolutional_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
  return has_weight_shared_convolutional_box_predictor()
      ? *box_predictor_oneof_.weight_shared_convolutional_box_predictor_
      : ::object_detection::protos::WeightSharedConvolutionalBoxPredictor::default_instance();
}
::object_detection::protos::WeightSharedConvolutionalBoxPredictor* BoxPredictor::mutable_weight_shared_convolutional_box_predictor() {
  if (!has_weight_shared_convolutional_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_weight_shared_convolutional_box_predictor();
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = new ::object_detection::protos::WeightSharedConvolutionalBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
  return box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
}
::object_detection::protos::WeightSharedConvolutionalBoxPredictor* BoxPredictor::release_weight_shared_convolutional_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
  if (has_weight_shared_convolutional_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* temp = box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BoxPredictor::set_allocated_weight_shared_convolutional_box_predictor(::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor) {
  clear_box_predictor_oneof();
  if (weight_shared_convolutional_box_predictor) {
    set_has_weight_shared_convolutional_box_predictor();
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = weight_shared_convolutional_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
}

bool BoxPredictor::has_box_predictor_oneof() const {
  return box_predictor_oneof_case() != BOX_PREDICTOR_ONEOF_NOT_SET;
}
void BoxPredictor::clear_has_box_predictor_oneof() {
  _oneof_case_[0] = BOX_PREDICTOR_ONEOF_NOT_SET;
}
BoxPredictor::BoxPredictorOneofCase BoxPredictor::box_predictor_oneof_case() const {
  return BoxPredictor::BoxPredictorOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionalBoxPredictor_BoxEncodingsClipRange::kMinFieldNumber;
const int ConvolutionalBoxPredictor_BoxEncodingsClipRange::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionalBoxPredictor_BoxEncodingsClipRange::ConvolutionalBoxPredictor_BoxEncodingsClipRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
}
ConvolutionalBoxPredictor_BoxEncodingsClipRange::ConvolutionalBoxPredictor_BoxEncodingsClipRange(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

ConvolutionalBoxPredictor_BoxEncodingsClipRange::~ConvolutionalBoxPredictor_BoxEncodingsClipRange() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  SharedDtor();
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedDtor() {
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionalBoxPredictor_BoxEncodingsClipRange::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvolutionalBoxPredictor_BoxEncodingsClipRange& ConvolutionalBoxPredictor_BoxEncodingsClipRange::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolutionalBoxPredictor_BoxEncodingsClipRange* ConvolutionalBoxPredictor_BoxEncodingsClipRange::New(::google::protobuf::Arena* arena) const {
  ConvolutionalBoxPredictor_BoxEncodingsClipRange* n = new ConvolutionalBoxPredictor_BoxEncodingsClipRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return false;
#undef DO_
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

::google::protobuf::uint8* ConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return target;
}

size_t ConvolutionalBoxPredictor_BoxEncodingsClipRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float min = 1;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float max = 2;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionalBoxPredictor_BoxEncodingsClipRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionalBoxPredictor_BoxEncodingsClipRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
    MergeFrom(*source);
  }
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::IsInitialized() const {
  return true;
}

void ConvolutionalBoxPredictor_BoxEncodingsClipRange::Swap(ConvolutionalBoxPredictor_BoxEncodingsClipRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSwap(ConvolutionalBoxPredictor_BoxEncodingsClipRange* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionalBoxPredictor_BoxEncodingsClipRange::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionalBoxPredictor_BoxEncodingsClipRange

// optional float min = 1;
bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_min() {
  min_ = 0;
  clear_has_min();
}
float ConvolutionalBoxPredictor_BoxEncodingsClipRange::min() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
  return min_;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
}

// optional float max = 2;
bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_max() {
  max_ = 0;
  clear_has_max();
}
float ConvolutionalBoxPredictor_BoxEncodingsClipRange::max() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
  return max_;
}
void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvolutionalBoxPredictor::kConvHyperparamsFieldNumber;
const int ConvolutionalBoxPredictor::kMinDepthFieldNumber;
const int ConvolutionalBoxPredictor::kMaxDepthFieldNumber;
const int ConvolutionalBoxPredictor::kNumLayersBeforePredictorFieldNumber;
const int ConvolutionalBoxPredictor::kUseDropoutFieldNumber;
const int ConvolutionalBoxPredictor::kDropoutKeepProbabilityFieldNumber;
const int ConvolutionalBoxPredictor::kKernelSizeFieldNumber;
const int ConvolutionalBoxPredictor::kBoxCodeSizeFieldNumber;
const int ConvolutionalBoxPredictor::kApplySigmoidToScoresFieldNumber;
const int ConvolutionalBoxPredictor::kClassPredictionBiasInitFieldNumber;
const int ConvolutionalBoxPredictor::kUseDepthwiseFieldNumber;
const int ConvolutionalBoxPredictor::kBoxEncodingsClipRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionalBoxPredictor::ConvolutionalBoxPredictor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConvolutionalBoxPredictor)
}
ConvolutionalBoxPredictor::ConvolutionalBoxPredictor(const ConvolutionalBoxPredictor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = NULL;
  }
  if (from.has_box_encodings_clip_range()) {
    box_encodings_clip_range_ = new ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange(*from.box_encodings_clip_range_);
  } else {
    box_encodings_clip_range_ = NULL;
  }
  ::memcpy(&min_depth_, &from.min_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&box_code_size_) -
    reinterpret_cast<char*>(&min_depth_)) + sizeof(box_code_size_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConvolutionalBoxPredictor)
}

void ConvolutionalBoxPredictor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_depthwise_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(use_depthwise_));
  use_dropout_ = true;
  dropout_keep_probability_ = 0.8f;
  kernel_size_ = 1;
  box_code_size_ = 4;
}

ConvolutionalBoxPredictor::~ConvolutionalBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConvolutionalBoxPredictor)
  SharedDtor();
}

void ConvolutionalBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
  if (this != internal_default_instance()) delete box_encodings_clip_range_;
}

void ConvolutionalBoxPredictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionalBoxPredictor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvolutionalBoxPredictor& ConvolutionalBoxPredictor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvolutionalBoxPredictor* ConvolutionalBoxPredictor::New(::google::protobuf::Arena* arena) const {
  ConvolutionalBoxPredictor* n = new ConvolutionalBoxPredictor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionalBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConvolutionalBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv_hyperparams_ != NULL);
      conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_encodings_clip_range_ != NULL);
      box_encodings_clip_range_->::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&min_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_depthwise_) -
        reinterpret_cast<char*>(&min_depth_)) + sizeof(use_depthwise_));
  }
  if (cached_has_bits & 3840u) {
    use_dropout_ = true;
    dropout_keep_probability_ = 0.8f;
    kernel_size_ = 1;
    box_code_size_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvolutionalBoxPredictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConvolutionalBoxPredictor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_depth = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_depth = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_layers_before_predictor = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_layers_before_predictor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_before_predictor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dropout = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_use_dropout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_keep_probability = 6 [default = 0.8];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_dropout_keep_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_keep_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_size = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 8 [default = 4];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_box_code_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool apply_sigmoid_to_scores = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_apply_sigmoid_to_scores();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_sigmoid_to_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float class_prediction_bias_init = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_class_prediction_bias_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &class_prediction_bias_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_depthwise = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_use_depthwise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_depthwise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_encodings_clip_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConvolutionalBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConvolutionalBoxPredictor)
  return false;
#undef DO_
}

void ConvolutionalBoxPredictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConvolutionalBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conv_hyperparams_, output);
  }

  // optional int32 min_depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_depth(), output);
  }

  // optional int32 max_depth = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_depth(), output);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_layers_before_predictor(), output);
  }

  // optional bool use_dropout = 5 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_dropout(), output);
  }

  // optional float dropout_keep_probability = 6 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dropout_keep_probability(), output);
  }

  // optional int32 kernel_size = 7 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kernel_size(), output);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->box_code_size(), output);
  }

  // optional bool apply_sigmoid_to_scores = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->apply_sigmoid_to_scores(), output);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->class_prediction_bias_init(), output);
  }

  // optional bool use_depthwise = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_depthwise(), output);
  }

  // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->box_encodings_clip_range_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConvolutionalBoxPredictor)
}

::google::protobuf::uint8* ConvolutionalBoxPredictor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConvolutionalBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conv_hyperparams_, deterministic, target);
  }

  // optional int32 min_depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_depth(), target);
  }

  // optional int32 max_depth = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_depth(), target);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_layers_before_predictor(), target);
  }

  // optional bool use_dropout = 5 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_dropout(), target);
  }

  // optional float dropout_keep_probability = 6 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dropout_keep_probability(), target);
  }

  // optional int32 kernel_size = 7 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kernel_size(), target);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->box_code_size(), target);
  }

  // optional bool apply_sigmoid_to_scores = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->apply_sigmoid_to_scores(), target);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->class_prediction_bias_init(), target);
  }

  // optional bool use_depthwise = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_depthwise(), target);
  }

  // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->box_encodings_clip_range_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConvolutionalBoxPredictor)
  return target;
}

size_t ConvolutionalBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConvolutionalBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
    if (has_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conv_hyperparams_);
    }

    // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
    if (has_box_encodings_clip_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->box_encodings_clip_range_);
    }

    // optional int32 min_depth = 2 [default = 0];
    if (has_min_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_depth());
    }

    // optional int32 max_depth = 3 [default = 0];
    if (has_max_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_depth());
    }

    // optional int32 num_layers_before_predictor = 4 [default = 0];
    if (has_num_layers_before_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layers_before_predictor());
    }

    // optional float class_prediction_bias_init = 10 [default = 0];
    if (has_class_prediction_bias_init()) {
      total_size += 1 + 4;
    }

    // optional bool apply_sigmoid_to_scores = 9 [default = false];
    if (has_apply_sigmoid_to_scores()) {
      total_size += 1 + 1;
    }

    // optional bool use_depthwise = 11 [default = false];
    if (has_use_depthwise()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool use_dropout = 5 [default = true];
    if (has_use_dropout()) {
      total_size += 1 + 1;
    }

    // optional float dropout_keep_probability = 6 [default = 0.8];
    if (has_dropout_keep_probability()) {
      total_size += 1 + 4;
    }

    // optional int32 kernel_size = 7 [default = 1];
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 box_code_size = 8 [default = 4];
    if (has_box_code_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionalBoxPredictor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvolutionalBoxPredictor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionalBoxPredictor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConvolutionalBoxPredictor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConvolutionalBoxPredictor)
    MergeFrom(*source);
  }
}

void ConvolutionalBoxPredictor::MergeFrom(const ConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_box_encodings_clip_range()->::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(from.box_encodings_clip_range());
    }
    if (cached_has_bits & 0x00000004u) {
      min_depth_ = from.min_depth_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_depth_ = from.max_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_layers_before_predictor_ = from.num_layers_before_predictor_;
    }
    if (cached_has_bits & 0x00000020u) {
      class_prediction_bias_init_ = from.class_prediction_bias_init_;
    }
    if (cached_has_bits & 0x00000040u) {
      apply_sigmoid_to_scores_ = from.apply_sigmoid_to_scores_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_depthwise_ = from.use_depthwise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      use_dropout_ = from.use_dropout_;
    }
    if (cached_has_bits & 0x00000200u) {
      dropout_keep_probability_ = from.dropout_keep_probability_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      box_code_size_ = from.box_code_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConvolutionalBoxPredictor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionalBoxPredictor::CopyFrom(const ConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionalBoxPredictor::IsInitialized() const {
  return true;
}

void ConvolutionalBoxPredictor::Swap(ConvolutionalBoxPredictor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionalBoxPredictor::InternalSwap(ConvolutionalBoxPredictor* other) {
  using std::swap;
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(box_encodings_clip_range_, other->box_encodings_clip_range_);
  swap(min_depth_, other->min_depth_);
  swap(max_depth_, other->max_depth_);
  swap(num_layers_before_predictor_, other->num_layers_before_predictor_);
  swap(class_prediction_bias_init_, other->class_prediction_bias_init_);
  swap(apply_sigmoid_to_scores_, other->apply_sigmoid_to_scores_);
  swap(use_depthwise_, other->use_depthwise_);
  swap(use_dropout_, other->use_dropout_);
  swap(dropout_keep_probability_, other->dropout_keep_probability_);
  swap(kernel_size_, other->kernel_size_);
  swap(box_code_size_, other->box_code_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionalBoxPredictor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionalBoxPredictor

// optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
bool ConvolutionalBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvolutionalBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvolutionalBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvolutionalBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& ConvolutionalBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* ConvolutionalBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
::object_detection::protos::Hyperparams* ConvolutionalBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
void ConvolutionalBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
}

// optional int32 min_depth = 2 [default = 0];
bool ConvolutionalBoxPredictor::has_min_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConvolutionalBoxPredictor::set_has_min_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void ConvolutionalBoxPredictor::clear_has_min_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConvolutionalBoxPredictor::clear_min_depth() {
  min_depth_ = 0;
  clear_has_min_depth();
}
::google::protobuf::int32 ConvolutionalBoxPredictor::min_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.min_depth)
  return min_depth_;
}
void ConvolutionalBoxPredictor::set_min_depth(::google::protobuf::int32 value) {
  set_has_min_depth();
  min_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.min_depth)
}

// optional int32 max_depth = 3 [default = 0];
bool ConvolutionalBoxPredictor::has_max_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConvolutionalBoxPredictor::set_has_max_depth() {
  _has_bits_[0] |= 0x00000008u;
}
void ConvolutionalBoxPredictor::clear_has_max_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConvolutionalBoxPredictor::clear_max_depth() {
  max_depth_ = 0;
  clear_has_max_depth();
}
::google::protobuf::int32 ConvolutionalBoxPredictor::max_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.max_depth)
  return max_depth_;
}
void ConvolutionalBoxPredictor::set_max_depth(::google::protobuf::int32 value) {
  set_has_max_depth();
  max_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.max_depth)
}

// optional int32 num_layers_before_predictor = 4 [default = 0];
bool ConvolutionalBoxPredictor::has_num_layers_before_predictor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConvolutionalBoxPredictor::set_has_num_layers_before_predictor() {
  _has_bits_[0] |= 0x00000010u;
}
void ConvolutionalBoxPredictor::clear_has_num_layers_before_predictor() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConvolutionalBoxPredictor::clear_num_layers_before_predictor() {
  num_layers_before_predictor_ = 0;
  clear_has_num_layers_before_predictor();
}
::google::protobuf::int32 ConvolutionalBoxPredictor::num_layers_before_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.num_layers_before_predictor)
  return num_layers_before_predictor_;
}
void ConvolutionalBoxPredictor::set_num_layers_before_predictor(::google::protobuf::int32 value) {
  set_has_num_layers_before_predictor();
  num_layers_before_predictor_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.num_layers_before_predictor)
}

// optional bool use_dropout = 5 [default = true];
bool ConvolutionalBoxPredictor::has_use_dropout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConvolutionalBoxPredictor::set_has_use_dropout() {
  _has_bits_[0] |= 0x00000100u;
}
void ConvolutionalBoxPredictor::clear_has_use_dropout() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConvolutionalBoxPredictor::clear_use_dropout() {
  use_dropout_ = true;
  clear_has_use_dropout();
}
bool ConvolutionalBoxPredictor::use_dropout() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.use_dropout)
  return use_dropout_;
}
void ConvolutionalBoxPredictor::set_use_dropout(bool value) {
  set_has_use_dropout();
  use_dropout_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.use_dropout)
}

// optional float dropout_keep_probability = 6 [default = 0.8];
bool ConvolutionalBoxPredictor::has_dropout_keep_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConvolutionalBoxPredictor::set_has_dropout_keep_probability() {
  _has_bits_[0] |= 0x00000200u;
}
void ConvolutionalBoxPredictor::clear_has_dropout_keep_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConvolutionalBoxPredictor::clear_dropout_keep_probability() {
  dropout_keep_probability_ = 0.8f;
  clear_has_dropout_keep_probability();
}
float ConvolutionalBoxPredictor::dropout_keep_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.dropout_keep_probability)
  return dropout_keep_probability_;
}
void ConvolutionalBoxPredictor::set_dropout_keep_probability(float value) {
  set_has_dropout_keep_probability();
  dropout_keep_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.dropout_keep_probability)
}

// optional int32 kernel_size = 7 [default = 1];
bool ConvolutionalBoxPredictor::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConvolutionalBoxPredictor::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000400u;
}
void ConvolutionalBoxPredictor::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConvolutionalBoxPredictor::clear_kernel_size() {
  kernel_size_ = 1;
  clear_has_kernel_size();
}
::google::protobuf::int32 ConvolutionalBoxPredictor::kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.kernel_size)
  return kernel_size_;
}
void ConvolutionalBoxPredictor::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.kernel_size)
}

// optional int32 box_code_size = 8 [default = 4];
bool ConvolutionalBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConvolutionalBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000800u;
}
void ConvolutionalBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConvolutionalBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
::google::protobuf::int32 ConvolutionalBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.box_code_size)
  return box_code_size_;
}
void ConvolutionalBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.box_code_size)
}

// optional bool apply_sigmoid_to_scores = 9 [default = false];
bool ConvolutionalBoxPredictor::has_apply_sigmoid_to_scores() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConvolutionalBoxPredictor::set_has_apply_sigmoid_to_scores() {
  _has_bits_[0] |= 0x00000040u;
}
void ConvolutionalBoxPredictor::clear_has_apply_sigmoid_to_scores() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConvolutionalBoxPredictor::clear_apply_sigmoid_to_scores() {
  apply_sigmoid_to_scores_ = false;
  clear_has_apply_sigmoid_to_scores();
}
bool ConvolutionalBoxPredictor::apply_sigmoid_to_scores() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.apply_sigmoid_to_scores)
  return apply_sigmoid_to_scores_;
}
void ConvolutionalBoxPredictor::set_apply_sigmoid_to_scores(bool value) {
  set_has_apply_sigmoid_to_scores();
  apply_sigmoid_to_scores_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.apply_sigmoid_to_scores)
}

// optional float class_prediction_bias_init = 10 [default = 0];
bool ConvolutionalBoxPredictor::has_class_prediction_bias_init() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConvolutionalBoxPredictor::set_has_class_prediction_bias_init() {
  _has_bits_[0] |= 0x00000020u;
}
void ConvolutionalBoxPredictor::clear_has_class_prediction_bias_init() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConvolutionalBoxPredictor::clear_class_prediction_bias_init() {
  class_prediction_bias_init_ = 0;
  clear_has_class_prediction_bias_init();
}
float ConvolutionalBoxPredictor::class_prediction_bias_init() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.class_prediction_bias_init)
  return class_prediction_bias_init_;
}
void ConvolutionalBoxPredictor::set_class_prediction_bias_init(float value) {
  set_has_class_prediction_bias_init();
  class_prediction_bias_init_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.class_prediction_bias_init)
}

// optional bool use_depthwise = 11 [default = false];
bool ConvolutionalBoxPredictor::has_use_depthwise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConvolutionalBoxPredictor::set_has_use_depthwise() {
  _has_bits_[0] |= 0x00000080u;
}
void ConvolutionalBoxPredictor::clear_has_use_depthwise() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConvolutionalBoxPredictor::clear_use_depthwise() {
  use_depthwise_ = false;
  clear_has_use_depthwise();
}
bool ConvolutionalBoxPredictor::use_depthwise() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.use_depthwise)
  return use_depthwise_;
}
void ConvolutionalBoxPredictor::set_use_depthwise(bool value) {
  set_has_use_depthwise();
  use_depthwise_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.use_depthwise)
}

// optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
bool ConvolutionalBoxPredictor::has_box_encodings_clip_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConvolutionalBoxPredictor::set_has_box_encodings_clip_range() {
  _has_bits_[0] |= 0x00000002u;
}
void ConvolutionalBoxPredictor::clear_has_box_encodings_clip_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConvolutionalBoxPredictor::clear_box_encodings_clip_range() {
  if (box_encodings_clip_range_ != NULL) box_encodings_clip_range_->::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear();
  clear_has_box_encodings_clip_range();
}
const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange& ConvolutionalBoxPredictor::box_encodings_clip_range() const {
  const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* p = box_encodings_clip_range_;
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      &::object_detection::protos::_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);
}
::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* ConvolutionalBoxPredictor::mutable_box_encodings_clip_range() {
  set_has_box_encodings_clip_range();
  if (box_encodings_clip_range_ == NULL) {
    box_encodings_clip_range_ = new ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
  return box_encodings_clip_range_;
}
::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* ConvolutionalBoxPredictor::release_box_encodings_clip_range() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
  clear_has_box_encodings_clip_range();
  ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* temp = box_encodings_clip_range_;
  box_encodings_clip_range_ = NULL;
  return temp;
}
void ConvolutionalBoxPredictor::set_allocated_box_encodings_clip_range(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range) {
  delete box_encodings_clip_range_;
  box_encodings_clip_range_ = box_encodings_clip_range;
  if (box_encodings_clip_range) {
    set_has_box_encodings_clip_range();
  } else {
    clear_has_box_encodings_clip_range();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::kMinFieldNumber;
const int WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
}
WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::~WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  SharedDtor();
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SharedDtor() {
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::New(::google::protobuf::Arena* arena) const {
  WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* n = new WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return false;
#undef DO_
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
}

::google::protobuf::uint8* WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // optional float max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  return target;
}

size_t WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float min = 1;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // optional float max = 2;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
    MergeFrom(*source);
  }
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::CopyFrom(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::IsInitialized() const {
  return true;
}

void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::Swap(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::InternalSwap(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* other) {
  using std::swap;
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange

// optional float min = 1;
bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_min() {
  min_ = 0;
  clear_has_min();
}
float WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::min() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
  return min_;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
}

// optional float max = 2;
bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_max() {
  max_ = 0;
  clear_has_max();
}
float WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::max() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
  return max_;
}
void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightSharedConvolutionalBoxPredictor::kConvHyperparamsFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kNumLayersBeforePredictorFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kDepthFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kKernelSizeFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kBoxCodeSizeFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kClassPredictionBiasInitFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kUseDropoutFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kDropoutKeepProbabilityFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kSharePredictionTowerFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kUseDepthwiseFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kScoreConverterFieldNumber;
const int WeightSharedConvolutionalBoxPredictor::kBoxEncodingsClipRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightSharedConvolutionalBoxPredictor::WeightSharedConvolutionalBoxPredictor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
}
WeightSharedConvolutionalBoxPredictor::WeightSharedConvolutionalBoxPredictor(const WeightSharedConvolutionalBoxPredictor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = NULL;
  }
  if (from.has_box_encodings_clip_range()) {
    box_encodings_clip_range_ = new ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange(*from.box_encodings_clip_range_);
  } else {
    box_encodings_clip_range_ = NULL;
  }
  ::memcpy(&depth_, &from.depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&box_code_size_) -
    reinterpret_cast<char*>(&depth_)) + sizeof(box_code_size_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
}

void WeightSharedConvolutionalBoxPredictor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&conv_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_converter_) -
      reinterpret_cast<char*>(&conv_hyperparams_)) + sizeof(score_converter_));
  dropout_keep_probability_ = 0.8f;
  kernel_size_ = 3;
  box_code_size_ = 4;
}

WeightSharedConvolutionalBoxPredictor::~WeightSharedConvolutionalBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  SharedDtor();
}

void WeightSharedConvolutionalBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
  if (this != internal_default_instance()) delete box_encodings_clip_range_;
}

void WeightSharedConvolutionalBoxPredictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightSharedConvolutionalBoxPredictor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightSharedConvolutionalBoxPredictor& WeightSharedConvolutionalBoxPredictor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightSharedConvolutionalBoxPredictor* WeightSharedConvolutionalBoxPredictor::New(::google::protobuf::Arena* arena) const {
  WeightSharedConvolutionalBoxPredictor* n = new WeightSharedConvolutionalBoxPredictor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightSharedConvolutionalBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv_hyperparams_ != NULL);
      conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(box_encodings_clip_range_ != NULL);
      box_encodings_clip_range_->::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_depthwise_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(use_depthwise_));
  }
  if (cached_has_bits & 3840u) {
    score_converter_ = 0;
    dropout_keep_probability_ = 0.8f;
    kernel_size_ = 3;
    box_code_size_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightSharedConvolutionalBoxPredictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_layers_before_predictor = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_layers_before_predictor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_before_predictor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_size = 7 [default = 3];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 8 [default = 4];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_box_code_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float class_prediction_bias_init = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_class_prediction_bias_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &class_prediction_bias_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dropout = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_use_dropout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_keep_probability = 12 [default = 0.8];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_dropout_keep_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_keep_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_prediction_tower = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_share_prediction_tower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_prediction_tower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_depthwise = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_use_depthwise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_depthwise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(value)) {
            set_score_converter(static_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box_encodings_clip_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  return false;
#undef DO_
}

void WeightSharedConvolutionalBoxPredictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conv_hyperparams_, output);
  }

  // optional int32 depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_layers_before_predictor(), output);
  }

  // optional int32 kernel_size = 7 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->kernel_size(), output);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->box_code_size(), output);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->class_prediction_bias_init(), output);
  }

  // optional bool use_dropout = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_dropout(), output);
  }

  // optional float dropout_keep_probability = 12 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dropout_keep_probability(), output);
  }

  // optional bool share_prediction_tower = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->share_prediction_tower(), output);
  }

  // optional bool use_depthwise = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->use_depthwise(), output);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->score_converter(), output);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->box_encodings_clip_range_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
}

::google::protobuf::uint8* WeightSharedConvolutionalBoxPredictor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conv_hyperparams_, deterministic, target);
  }

  // optional int32 depth = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_layers_before_predictor(), target);
  }

  // optional int32 kernel_size = 7 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->kernel_size(), target);
  }

  // optional int32 box_code_size = 8 [default = 4];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->box_code_size(), target);
  }

  // optional float class_prediction_bias_init = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->class_prediction_bias_init(), target);
  }

  // optional bool use_dropout = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_dropout(), target);
  }

  // optional float dropout_keep_probability = 12 [default = 0.8];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dropout_keep_probability(), target);
  }

  // optional bool share_prediction_tower = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->share_prediction_tower(), target);
  }

  // optional bool use_depthwise = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->use_depthwise(), target);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->score_converter(), target);
  }

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->box_encodings_clip_range_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  return target;
}

size_t WeightSharedConvolutionalBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
    if (has_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conv_hyperparams_);
    }

    // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
    if (has_box_encodings_clip_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->box_encodings_clip_range_);
    }

    // optional int32 depth = 2 [default = 0];
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 num_layers_before_predictor = 4 [default = 0];
    if (has_num_layers_before_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layers_before_predictor());
    }

    // optional float class_prediction_bias_init = 10 [default = 0];
    if (has_class_prediction_bias_init()) {
      total_size += 1 + 4;
    }

    // optional bool use_dropout = 11 [default = false];
    if (has_use_dropout()) {
      total_size += 1 + 1;
    }

    // optional bool share_prediction_tower = 13 [default = false];
    if (has_share_prediction_tower()) {
      total_size += 1 + 1;
    }

    // optional bool use_depthwise = 14 [default = false];
    if (has_use_depthwise()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
    if (has_score_converter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->score_converter());
    }

    // optional float dropout_keep_probability = 12 [default = 0.8];
    if (has_dropout_keep_probability()) {
      total_size += 1 + 4;
    }

    // optional int32 kernel_size = 7 [default = 3];
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 box_code_size = 8 [default = 4];
    if (has_box_code_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightSharedConvolutionalBoxPredictor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightSharedConvolutionalBoxPredictor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightSharedConvolutionalBoxPredictor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
    MergeFrom(*source);
  }
}

void WeightSharedConvolutionalBoxPredictor::MergeFrom(const WeightSharedConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_box_encodings_clip_range()->::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::MergeFrom(from.box_encodings_clip_range());
    }
    if (cached_has_bits & 0x00000004u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_layers_before_predictor_ = from.num_layers_before_predictor_;
    }
    if (cached_has_bits & 0x00000010u) {
      class_prediction_bias_init_ = from.class_prediction_bias_init_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_dropout_ = from.use_dropout_;
    }
    if (cached_has_bits & 0x00000040u) {
      share_prediction_tower_ = from.share_prediction_tower_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_depthwise_ = from.use_depthwise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      score_converter_ = from.score_converter_;
    }
    if (cached_has_bits & 0x00000200u) {
      dropout_keep_probability_ = from.dropout_keep_probability_;
    }
    if (cached_has_bits & 0x00000400u) {
      kernel_size_ = from.kernel_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      box_code_size_ = from.box_code_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightSharedConvolutionalBoxPredictor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightSharedConvolutionalBoxPredictor::CopyFrom(const WeightSharedConvolutionalBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightSharedConvolutionalBoxPredictor::IsInitialized() const {
  return true;
}

void WeightSharedConvolutionalBoxPredictor::Swap(WeightSharedConvolutionalBoxPredictor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightSharedConvolutionalBoxPredictor::InternalSwap(WeightSharedConvolutionalBoxPredictor* other) {
  using std::swap;
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(box_encodings_clip_range_, other->box_encodings_clip_range_);
  swap(depth_, other->depth_);
  swap(num_layers_before_predictor_, other->num_layers_before_predictor_);
  swap(class_prediction_bias_init_, other->class_prediction_bias_init_);
  swap(use_dropout_, other->use_dropout_);
  swap(share_prediction_tower_, other->share_prediction_tower_);
  swap(use_depthwise_, other->use_depthwise_);
  swap(score_converter_, other->score_converter_);
  swap(dropout_keep_probability_, other->dropout_keep_probability_);
  swap(kernel_size_, other->kernel_size_);
  swap(box_code_size_, other->box_code_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightSharedConvolutionalBoxPredictor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightSharedConvolutionalBoxPredictor

// optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
bool WeightSharedConvolutionalBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightSharedConvolutionalBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& WeightSharedConvolutionalBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* WeightSharedConvolutionalBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
::object_detection::protos::Hyperparams* WeightSharedConvolutionalBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
void WeightSharedConvolutionalBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
}

// optional int32 num_layers_before_predictor = 4 [default = 0];
bool WeightSharedConvolutionalBoxPredictor::has_num_layers_before_predictor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_num_layers_before_predictor() {
  _has_bits_[0] |= 0x00000008u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_num_layers_before_predictor() {
  _has_bits_[0] &= ~0x00000008u;
}
void WeightSharedConvolutionalBoxPredictor::clear_num_layers_before_predictor() {
  num_layers_before_predictor_ = 0;
  clear_has_num_layers_before_predictor();
}
::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::num_layers_before_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.num_layers_before_predictor)
  return num_layers_before_predictor_;
}
void WeightSharedConvolutionalBoxPredictor::set_num_layers_before_predictor(::google::protobuf::int32 value) {
  set_has_num_layers_before_predictor();
  num_layers_before_predictor_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.num_layers_before_predictor)
}

// optional int32 depth = 2 [default = 0];
bool WeightSharedConvolutionalBoxPredictor::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
void WeightSharedConvolutionalBoxPredictor::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.depth)
  return depth_;
}
void WeightSharedConvolutionalBoxPredictor::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.depth)
}

// optional int32 kernel_size = 7 [default = 3];
bool WeightSharedConvolutionalBoxPredictor::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000400u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000400u;
}
void WeightSharedConvolutionalBoxPredictor::clear_kernel_size() {
  kernel_size_ = 3;
  clear_has_kernel_size();
}
::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.kernel_size)
  return kernel_size_;
}
void WeightSharedConvolutionalBoxPredictor::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.kernel_size)
}

// optional int32 box_code_size = 8 [default = 4];
bool WeightSharedConvolutionalBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000800u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void WeightSharedConvolutionalBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_code_size)
  return box_code_size_;
}
void WeightSharedConvolutionalBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_code_size)
}

// optional float class_prediction_bias_init = 10 [default = 0];
bool WeightSharedConvolutionalBoxPredictor::has_class_prediction_bias_init() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_class_prediction_bias_init() {
  _has_bits_[0] |= 0x00000010u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_class_prediction_bias_init() {
  _has_bits_[0] &= ~0x00000010u;
}
void WeightSharedConvolutionalBoxPredictor::clear_class_prediction_bias_init() {
  class_prediction_bias_init_ = 0;
  clear_has_class_prediction_bias_init();
}
float WeightSharedConvolutionalBoxPredictor::class_prediction_bias_init() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.class_prediction_bias_init)
  return class_prediction_bias_init_;
}
void WeightSharedConvolutionalBoxPredictor::set_class_prediction_bias_init(float value) {
  set_has_class_prediction_bias_init();
  class_prediction_bias_init_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.class_prediction_bias_init)
}

// optional bool use_dropout = 11 [default = false];
bool WeightSharedConvolutionalBoxPredictor::has_use_dropout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_use_dropout() {
  _has_bits_[0] |= 0x00000020u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_use_dropout() {
  _has_bits_[0] &= ~0x00000020u;
}
void WeightSharedConvolutionalBoxPredictor::clear_use_dropout() {
  use_dropout_ = false;
  clear_has_use_dropout();
}
bool WeightSharedConvolutionalBoxPredictor::use_dropout() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_dropout)
  return use_dropout_;
}
void WeightSharedConvolutionalBoxPredictor::set_use_dropout(bool value) {
  set_has_use_dropout();
  use_dropout_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_dropout)
}

// optional float dropout_keep_probability = 12 [default = 0.8];
bool WeightSharedConvolutionalBoxPredictor::has_dropout_keep_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_dropout_keep_probability() {
  _has_bits_[0] |= 0x00000200u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_dropout_keep_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
void WeightSharedConvolutionalBoxPredictor::clear_dropout_keep_probability() {
  dropout_keep_probability_ = 0.8f;
  clear_has_dropout_keep_probability();
}
float WeightSharedConvolutionalBoxPredictor::dropout_keep_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.dropout_keep_probability)
  return dropout_keep_probability_;
}
void WeightSharedConvolutionalBoxPredictor::set_dropout_keep_probability(float value) {
  set_has_dropout_keep_probability();
  dropout_keep_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.dropout_keep_probability)
}

// optional bool share_prediction_tower = 13 [default = false];
bool WeightSharedConvolutionalBoxPredictor::has_share_prediction_tower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_share_prediction_tower() {
  _has_bits_[0] |= 0x00000040u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_share_prediction_tower() {
  _has_bits_[0] &= ~0x00000040u;
}
void WeightSharedConvolutionalBoxPredictor::clear_share_prediction_tower() {
  share_prediction_tower_ = false;
  clear_has_share_prediction_tower();
}
bool WeightSharedConvolutionalBoxPredictor::share_prediction_tower() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.share_prediction_tower)
  return share_prediction_tower_;
}
void WeightSharedConvolutionalBoxPredictor::set_share_prediction_tower(bool value) {
  set_has_share_prediction_tower();
  share_prediction_tower_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.share_prediction_tower)
}

// optional bool use_depthwise = 14 [default = false];
bool WeightSharedConvolutionalBoxPredictor::has_use_depthwise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_use_depthwise() {
  _has_bits_[0] |= 0x00000080u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_use_depthwise() {
  _has_bits_[0] &= ~0x00000080u;
}
void WeightSharedConvolutionalBoxPredictor::clear_use_depthwise() {
  use_depthwise_ = false;
  clear_has_use_depthwise();
}
bool WeightSharedConvolutionalBoxPredictor::use_depthwise() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_depthwise)
  return use_depthwise_;
}
void WeightSharedConvolutionalBoxPredictor::set_use_depthwise(bool value) {
  set_has_use_depthwise();
  use_depthwise_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_depthwise)
}

// optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
bool WeightSharedConvolutionalBoxPredictor::has_score_converter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_score_converter() {
  _has_bits_[0] |= 0x00000100u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_score_converter() {
  _has_bits_[0] &= ~0x00000100u;
}
void WeightSharedConvolutionalBoxPredictor::clear_score_converter() {
  score_converter_ = 0;
  clear_has_score_converter();
}
::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::score_converter() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.score_converter)
  return static_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter >(score_converter_);
}
void WeightSharedConvolutionalBoxPredictor::set_score_converter(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter value) {
  assert(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(value));
  set_has_score_converter();
  score_converter_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.score_converter)
}

// optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
bool WeightSharedConvolutionalBoxPredictor::has_box_encodings_clip_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeightSharedConvolutionalBoxPredictor::set_has_box_encodings_clip_range() {
  _has_bits_[0] |= 0x00000002u;
}
void WeightSharedConvolutionalBoxPredictor::clear_has_box_encodings_clip_range() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeightSharedConvolutionalBoxPredictor::clear_box_encodings_clip_range() {
  if (box_encodings_clip_range_ != NULL) box_encodings_clip_range_->::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear();
  clear_has_box_encodings_clip_range();
}
const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& WeightSharedConvolutionalBoxPredictor::box_encodings_clip_range() const {
  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* p = box_encodings_clip_range_;
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      &::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);
}
::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* WeightSharedConvolutionalBoxPredictor::mutable_box_encodings_clip_range() {
  set_has_box_encodings_clip_range();
  if (box_encodings_clip_range_ == NULL) {
    box_encodings_clip_range_ = new ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
  return box_encodings_clip_range_;
}
::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* WeightSharedConvolutionalBoxPredictor::release_box_encodings_clip_range() {
  // @@protoc_insertion_point(field_release:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
  clear_has_box_encodings_clip_range();
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* temp = box_encodings_clip_range_;
  box_encodings_clip_range_ = NULL;
  return temp;
}
void WeightSharedConvolutionalBoxPredictor::set_allocated_box_encodings_clip_range(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range) {
  delete box_encodings_clip_range_;
  box_encodings_clip_range_ = box_encodings_clip_range;
  if (box_encodings_clip_range) {
    set_has_box_encodings_clip_range();
  } else {
    clear_has_box_encodings_clip_range();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaskRCNNBoxPredictor::kFcHyperparamsFieldNumber;
const int MaskRCNNBoxPredictor::kUseDropoutFieldNumber;
const int MaskRCNNBoxPredictor::kDropoutKeepProbabilityFieldNumber;
const int MaskRCNNBoxPredictor::kBoxCodeSizeFieldNumber;
const int MaskRCNNBoxPredictor::kConvHyperparamsFieldNumber;
const int MaskRCNNBoxPredictor::kPredictInstanceMasksFieldNumber;
const int MaskRCNNBoxPredictor::kMaskPredictionConvDepthFieldNumber;
const int MaskRCNNBoxPredictor::kPredictKeypointsFieldNumber;
const int MaskRCNNBoxPredictor::kMaskHeightFieldNumber;
const int MaskRCNNBoxPredictor::kMaskWidthFieldNumber;
const int MaskRCNNBoxPredictor::kMaskPredictionNumConvLayersFieldNumber;
const int MaskRCNNBoxPredictor::kMasksAreClassAgnosticFieldNumber;
const int MaskRCNNBoxPredictor::kShareBoxAcrossClassesFieldNumber;
const int MaskRCNNBoxPredictor::kConvolveThenUpsampleMasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaskRCNNBoxPredictor::MaskRCNNBoxPredictor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.MaskRCNNBoxPredictor)
}
MaskRCNNBoxPredictor::MaskRCNNBoxPredictor(const MaskRCNNBoxPredictor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fc_hyperparams()) {
    fc_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.fc_hyperparams_);
  } else {
    fc_hyperparams_ = NULL;
  }
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = NULL;
  }
  ::memcpy(&use_dropout_, &from.use_dropout_,
    static_cast<size_t>(reinterpret_cast<char*>(&mask_prediction_num_conv_layers_) -
    reinterpret_cast<char*>(&use_dropout_)) + sizeof(mask_prediction_num_conv_layers_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.MaskRCNNBoxPredictor)
}

void MaskRCNNBoxPredictor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fc_hyperparams_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convolve_then_upsample_masks_) -
      reinterpret_cast<char*>(&fc_hyperparams_)) + sizeof(convolve_then_upsample_masks_));
  dropout_keep_probability_ = 0.5f;
  box_code_size_ = 4;
  mask_prediction_conv_depth_ = 256;
  mask_height_ = 15;
  mask_width_ = 15;
  mask_prediction_num_conv_layers_ = 2;
}

MaskRCNNBoxPredictor::~MaskRCNNBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.MaskRCNNBoxPredictor)
  SharedDtor();
}

void MaskRCNNBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete fc_hyperparams_;
  if (this != internal_default_instance()) delete conv_hyperparams_;
}

void MaskRCNNBoxPredictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaskRCNNBoxPredictor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MaskRCNNBoxPredictor& MaskRCNNBoxPredictor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaskRCNNBoxPredictor* MaskRCNNBoxPredictor::New(::google::protobuf::Arena* arena) const {
  MaskRCNNBoxPredictor* n = new MaskRCNNBoxPredictor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaskRCNNBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.MaskRCNNBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fc_hyperparams_ != NULL);
      fc_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(conv_hyperparams_ != NULL);
      conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&use_dropout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convolve_then_upsample_masks_) -
        reinterpret_cast<char*>(&use_dropout_)) + sizeof(convolve_then_upsample_masks_));
  }
  if (cached_has_bits & 16128u) {
    dropout_keep_probability_ = 0.5f;
    box_code_size_ = 4;
    mask_prediction_conv_depth_ = 256;
    mask_height_ = 15;
    mask_width_ = 15;
    mask_prediction_num_conv_layers_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MaskRCNNBoxPredictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.MaskRCNNBoxPredictor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fc_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dropout = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_use_dropout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropout_keep_probability = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_dropout_keep_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_keep_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 4 [default = 4];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_box_code_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool predict_instance_masks = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_predict_instance_masks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_instance_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_prediction_conv_depth = 7 [default = 256];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_mask_prediction_conv_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_prediction_conv_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool predict_keypoints = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_predict_keypoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &predict_keypoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_height = 9 [default = 15];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_mask_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_width = 10 [default = 15];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_mask_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_mask_prediction_num_conv_layers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_prediction_num_conv_layers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool masks_are_class_agnostic = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_masks_are_class_agnostic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &masks_are_class_agnostic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool share_box_across_classes = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_share_box_across_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &share_box_across_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convolve_then_upsample_masks = 14 [default = false];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_convolve_then_upsample_masks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convolve_then_upsample_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.MaskRCNNBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.MaskRCNNBoxPredictor)
  return false;
#undef DO_
}

void MaskRCNNBoxPredictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.MaskRCNNBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->fc_hyperparams_, output);
  }

  // optional bool use_dropout = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_dropout(), output);
  }

  // optional float dropout_keep_probability = 3 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dropout_keep_probability(), output);
  }

  // optional int32 box_code_size = 4 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->box_code_size(), output);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->conv_hyperparams_, output);
  }

  // optional bool predict_instance_masks = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->predict_instance_masks(), output);
  }

  // optional int32 mask_prediction_conv_depth = 7 [default = 256];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mask_prediction_conv_depth(), output);
  }

  // optional bool predict_keypoints = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->predict_keypoints(), output);
  }

  // optional int32 mask_height = 9 [default = 15];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mask_height(), output);
  }

  // optional int32 mask_width = 10 [default = 15];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mask_width(), output);
  }

  // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mask_prediction_num_conv_layers(), output);
  }

  // optional bool masks_are_class_agnostic = 12 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->masks_are_class_agnostic(), output);
  }

  // optional bool share_box_across_classes = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->share_box_across_classes(), output);
  }

  // optional bool convolve_then_upsample_masks = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->convolve_then_upsample_masks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.MaskRCNNBoxPredictor)
}

::google::protobuf::uint8* MaskRCNNBoxPredictor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.MaskRCNNBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->fc_hyperparams_, deterministic, target);
  }

  // optional bool use_dropout = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_dropout(), target);
  }

  // optional float dropout_keep_probability = 3 [default = 0.5];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dropout_keep_probability(), target);
  }

  // optional int32 box_code_size = 4 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->box_code_size(), target);
  }

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->conv_hyperparams_, deterministic, target);
  }

  // optional bool predict_instance_masks = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->predict_instance_masks(), target);
  }

  // optional int32 mask_prediction_conv_depth = 7 [default = 256];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mask_prediction_conv_depth(), target);
  }

  // optional bool predict_keypoints = 8 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->predict_keypoints(), target);
  }

  // optional int32 mask_height = 9 [default = 15];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mask_height(), target);
  }

  // optional int32 mask_width = 10 [default = 15];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mask_width(), target);
  }

  // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mask_prediction_num_conv_layers(), target);
  }

  // optional bool masks_are_class_agnostic = 12 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->masks_are_class_agnostic(), target);
  }

  // optional bool share_box_across_classes = 13 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->share_box_across_classes(), target);
  }

  // optional bool convolve_then_upsample_masks = 14 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->convolve_then_upsample_masks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.MaskRCNNBoxPredictor)
  return target;
}

size_t MaskRCNNBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.MaskRCNNBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
    if (has_fc_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fc_hyperparams_);
    }

    // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
    if (has_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conv_hyperparams_);
    }

    // optional bool use_dropout = 2 [default = false];
    if (has_use_dropout()) {
      total_size += 1 + 1;
    }

    // optional bool predict_instance_masks = 6 [default = false];
    if (has_predict_instance_masks()) {
      total_size += 1 + 1;
    }

    // optional bool predict_keypoints = 8 [default = false];
    if (has_predict_keypoints()) {
      total_size += 1 + 1;
    }

    // optional bool masks_are_class_agnostic = 12 [default = false];
    if (has_masks_are_class_agnostic()) {
      total_size += 1 + 1;
    }

    // optional bool share_box_across_classes = 13 [default = false];
    if (has_share_box_across_classes()) {
      total_size += 1 + 1;
    }

    // optional bool convolve_then_upsample_masks = 14 [default = false];
    if (has_convolve_then_upsample_masks()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float dropout_keep_probability = 3 [default = 0.5];
    if (has_dropout_keep_probability()) {
      total_size += 1 + 4;
    }

    // optional int32 box_code_size = 4 [default = 4];
    if (has_box_code_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

    // optional int32 mask_prediction_conv_depth = 7 [default = 256];
    if (has_mask_prediction_conv_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_prediction_conv_depth());
    }

    // optional int32 mask_height = 9 [default = 15];
    if (has_mask_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_height());
    }

    // optional int32 mask_width = 10 [default = 15];
    if (has_mask_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_width());
    }

    // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
    if (has_mask_prediction_num_conv_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask_prediction_num_conv_layers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaskRCNNBoxPredictor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskRCNNBoxPredictor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaskRCNNBoxPredictor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.MaskRCNNBoxPredictor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.MaskRCNNBoxPredictor)
    MergeFrom(*source);
  }
}

void MaskRCNNBoxPredictor::MergeFrom(const MaskRCNNBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fc_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.fc_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000004u) {
      use_dropout_ = from.use_dropout_;
    }
    if (cached_has_bits & 0x00000008u) {
      predict_instance_masks_ = from.predict_instance_masks_;
    }
    if (cached_has_bits & 0x00000010u) {
      predict_keypoints_ = from.predict_keypoints_;
    }
    if (cached_has_bits & 0x00000020u) {
      masks_are_class_agnostic_ = from.masks_are_class_agnostic_;
    }
    if (cached_has_bits & 0x00000040u) {
      share_box_across_classes_ = from.share_box_across_classes_;
    }
    if (cached_has_bits & 0x00000080u) {
      convolve_then_upsample_masks_ = from.convolve_then_upsample_masks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      dropout_keep_probability_ = from.dropout_keep_probability_;
    }
    if (cached_has_bits & 0x00000200u) {
      box_code_size_ = from.box_code_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      mask_prediction_conv_depth_ = from.mask_prediction_conv_depth_;
    }
    if (cached_has_bits & 0x00000800u) {
      mask_height_ = from.mask_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      mask_width_ = from.mask_width_;
    }
    if (cached_has_bits & 0x00002000u) {
      mask_prediction_num_conv_layers_ = from.mask_prediction_num_conv_layers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MaskRCNNBoxPredictor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskRCNNBoxPredictor::CopyFrom(const MaskRCNNBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.MaskRCNNBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskRCNNBoxPredictor::IsInitialized() const {
  return true;
}

void MaskRCNNBoxPredictor::Swap(MaskRCNNBoxPredictor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaskRCNNBoxPredictor::InternalSwap(MaskRCNNBoxPredictor* other) {
  using std::swap;
  swap(fc_hyperparams_, other->fc_hyperparams_);
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(use_dropout_, other->use_dropout_);
  swap(predict_instance_masks_, other->predict_instance_masks_);
  swap(predict_keypoints_, other->predict_keypoints_);
  swap(masks_are_class_agnostic_, other->masks_are_class_agnostic_);
  swap(share_box_across_classes_, other->share_box_across_classes_);
  swap(convolve_then_upsample_masks_, other->convolve_then_upsample_masks_);
  swap(dropout_keep_probability_, other->dropout_keep_probability_);
  swap(box_code_size_, other->box_code_size_);
  swap(mask_prediction_conv_depth_, other->mask_prediction_conv_depth_);
  swap(mask_height_, other->mask_height_);
  swap(mask_width_, other->mask_width_);
  swap(mask_prediction_num_conv_layers_, other->mask_prediction_num_conv_layers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaskRCNNBoxPredictor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaskRCNNBoxPredictor

// optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
bool MaskRCNNBoxPredictor::has_fc_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MaskRCNNBoxPredictor::set_has_fc_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
void MaskRCNNBoxPredictor::clear_has_fc_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
void MaskRCNNBoxPredictor::clear_fc_hyperparams() {
  if (fc_hyperparams_ != NULL) fc_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_fc_hyperparams();
}
const ::object_detection::protos::Hyperparams& MaskRCNNBoxPredictor::fc_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = fc_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::mutable_fc_hyperparams() {
  set_has_fc_hyperparams();
  if (fc_hyperparams_ == NULL) {
    fc_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
  return fc_hyperparams_;
}
::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::release_fc_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
  clear_has_fc_hyperparams();
  ::object_detection::protos::Hyperparams* temp = fc_hyperparams_;
  fc_hyperparams_ = NULL;
  return temp;
}
void MaskRCNNBoxPredictor::set_allocated_fc_hyperparams(::object_detection::protos::Hyperparams* fc_hyperparams) {
  delete fc_hyperparams_;
  fc_hyperparams_ = fc_hyperparams;
  if (fc_hyperparams) {
    set_has_fc_hyperparams();
  } else {
    clear_has_fc_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
}

// optional bool use_dropout = 2 [default = false];
bool MaskRCNNBoxPredictor::has_use_dropout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MaskRCNNBoxPredictor::set_has_use_dropout() {
  _has_bits_[0] |= 0x00000004u;
}
void MaskRCNNBoxPredictor::clear_has_use_dropout() {
  _has_bits_[0] &= ~0x00000004u;
}
void MaskRCNNBoxPredictor::clear_use_dropout() {
  use_dropout_ = false;
  clear_has_use_dropout();
}
bool MaskRCNNBoxPredictor::use_dropout() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.use_dropout)
  return use_dropout_;
}
void MaskRCNNBoxPredictor::set_use_dropout(bool value) {
  set_has_use_dropout();
  use_dropout_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.use_dropout)
}

// optional float dropout_keep_probability = 3 [default = 0.5];
bool MaskRCNNBoxPredictor::has_dropout_keep_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MaskRCNNBoxPredictor::set_has_dropout_keep_probability() {
  _has_bits_[0] |= 0x00000100u;
}
void MaskRCNNBoxPredictor::clear_has_dropout_keep_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
void MaskRCNNBoxPredictor::clear_dropout_keep_probability() {
  dropout_keep_probability_ = 0.5f;
  clear_has_dropout_keep_probability();
}
float MaskRCNNBoxPredictor::dropout_keep_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.dropout_keep_probability)
  return dropout_keep_probability_;
}
void MaskRCNNBoxPredictor::set_dropout_keep_probability(float value) {
  set_has_dropout_keep_probability();
  dropout_keep_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.dropout_keep_probability)
}

// optional int32 box_code_size = 4 [default = 4];
bool MaskRCNNBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MaskRCNNBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000200u;
}
void MaskRCNNBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void MaskRCNNBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
::google::protobuf::int32 MaskRCNNBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.box_code_size)
  return box_code_size_;
}
void MaskRCNNBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.box_code_size)
}

// optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
bool MaskRCNNBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MaskRCNNBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000002u;
}
void MaskRCNNBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000002u;
}
void MaskRCNNBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& MaskRCNNBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
void MaskRCNNBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
}

// optional bool predict_instance_masks = 6 [default = false];
bool MaskRCNNBoxPredictor::has_predict_instance_masks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MaskRCNNBoxPredictor::set_has_predict_instance_masks() {
  _has_bits_[0] |= 0x00000008u;
}
void MaskRCNNBoxPredictor::clear_has_predict_instance_masks() {
  _has_bits_[0] &= ~0x00000008u;
}
void MaskRCNNBoxPredictor::clear_predict_instance_masks() {
  predict_instance_masks_ = false;
  clear_has_predict_instance_masks();
}
bool MaskRCNNBoxPredictor::predict_instance_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.predict_instance_masks)
  return predict_instance_masks_;
}
void MaskRCNNBoxPredictor::set_predict_instance_masks(bool value) {
  set_has_predict_instance_masks();
  predict_instance_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.predict_instance_masks)
}

// optional int32 mask_prediction_conv_depth = 7 [default = 256];
bool MaskRCNNBoxPredictor::has_mask_prediction_conv_depth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MaskRCNNBoxPredictor::set_has_mask_prediction_conv_depth() {
  _has_bits_[0] |= 0x00000400u;
}
void MaskRCNNBoxPredictor::clear_has_mask_prediction_conv_depth() {
  _has_bits_[0] &= ~0x00000400u;
}
void MaskRCNNBoxPredictor::clear_mask_prediction_conv_depth() {
  mask_prediction_conv_depth_ = 256;
  clear_has_mask_prediction_conv_depth();
}
::google::protobuf::int32 MaskRCNNBoxPredictor::mask_prediction_conv_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_conv_depth)
  return mask_prediction_conv_depth_;
}
void MaskRCNNBoxPredictor::set_mask_prediction_conv_depth(::google::protobuf::int32 value) {
  set_has_mask_prediction_conv_depth();
  mask_prediction_conv_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_conv_depth)
}

// optional bool predict_keypoints = 8 [default = false];
bool MaskRCNNBoxPredictor::has_predict_keypoints() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MaskRCNNBoxPredictor::set_has_predict_keypoints() {
  _has_bits_[0] |= 0x00000010u;
}
void MaskRCNNBoxPredictor::clear_has_predict_keypoints() {
  _has_bits_[0] &= ~0x00000010u;
}
void MaskRCNNBoxPredictor::clear_predict_keypoints() {
  predict_keypoints_ = false;
  clear_has_predict_keypoints();
}
bool MaskRCNNBoxPredictor::predict_keypoints() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.predict_keypoints)
  return predict_keypoints_;
}
void MaskRCNNBoxPredictor::set_predict_keypoints(bool value) {
  set_has_predict_keypoints();
  predict_keypoints_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.predict_keypoints)
}

// optional int32 mask_height = 9 [default = 15];
bool MaskRCNNBoxPredictor::has_mask_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MaskRCNNBoxPredictor::set_has_mask_height() {
  _has_bits_[0] |= 0x00000800u;
}
void MaskRCNNBoxPredictor::clear_has_mask_height() {
  _has_bits_[0] &= ~0x00000800u;
}
void MaskRCNNBoxPredictor::clear_mask_height() {
  mask_height_ = 15;
  clear_has_mask_height();
}
::google::protobuf::int32 MaskRCNNBoxPredictor::mask_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_height)
  return mask_height_;
}
void MaskRCNNBoxPredictor::set_mask_height(::google::protobuf::int32 value) {
  set_has_mask_height();
  mask_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_height)
}

// optional int32 mask_width = 10 [default = 15];
bool MaskRCNNBoxPredictor::has_mask_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MaskRCNNBoxPredictor::set_has_mask_width() {
  _has_bits_[0] |= 0x00001000u;
}
void MaskRCNNBoxPredictor::clear_has_mask_width() {
  _has_bits_[0] &= ~0x00001000u;
}
void MaskRCNNBoxPredictor::clear_mask_width() {
  mask_width_ = 15;
  clear_has_mask_width();
}
::google::protobuf::int32 MaskRCNNBoxPredictor::mask_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_width)
  return mask_width_;
}
void MaskRCNNBoxPredictor::set_mask_width(::google::protobuf::int32 value) {
  set_has_mask_width();
  mask_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_width)
}

// optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
bool MaskRCNNBoxPredictor::has_mask_prediction_num_conv_layers() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MaskRCNNBoxPredictor::set_has_mask_prediction_num_conv_layers() {
  _has_bits_[0] |= 0x00002000u;
}
void MaskRCNNBoxPredictor::clear_has_mask_prediction_num_conv_layers() {
  _has_bits_[0] &= ~0x00002000u;
}
void MaskRCNNBoxPredictor::clear_mask_prediction_num_conv_layers() {
  mask_prediction_num_conv_layers_ = 2;
  clear_has_mask_prediction_num_conv_layers();
}
::google::protobuf::int32 MaskRCNNBoxPredictor::mask_prediction_num_conv_layers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_num_conv_layers)
  return mask_prediction_num_conv_layers_;
}
void MaskRCNNBoxPredictor::set_mask_prediction_num_conv_layers(::google::protobuf::int32 value) {
  set_has_mask_prediction_num_conv_layers();
  mask_prediction_num_conv_layers_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_num_conv_layers)
}

// optional bool masks_are_class_agnostic = 12 [default = false];
bool MaskRCNNBoxPredictor::has_masks_are_class_agnostic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MaskRCNNBoxPredictor::set_has_masks_are_class_agnostic() {
  _has_bits_[0] |= 0x00000020u;
}
void MaskRCNNBoxPredictor::clear_has_masks_are_class_agnostic() {
  _has_bits_[0] &= ~0x00000020u;
}
void MaskRCNNBoxPredictor::clear_masks_are_class_agnostic() {
  masks_are_class_agnostic_ = false;
  clear_has_masks_are_class_agnostic();
}
bool MaskRCNNBoxPredictor::masks_are_class_agnostic() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.masks_are_class_agnostic)
  return masks_are_class_agnostic_;
}
void MaskRCNNBoxPredictor::set_masks_are_class_agnostic(bool value) {
  set_has_masks_are_class_agnostic();
  masks_are_class_agnostic_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.masks_are_class_agnostic)
}

// optional bool share_box_across_classes = 13 [default = false];
bool MaskRCNNBoxPredictor::has_share_box_across_classes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MaskRCNNBoxPredictor::set_has_share_box_across_classes() {
  _has_bits_[0] |= 0x00000040u;
}
void MaskRCNNBoxPredictor::clear_has_share_box_across_classes() {
  _has_bits_[0] &= ~0x00000040u;
}
void MaskRCNNBoxPredictor::clear_share_box_across_classes() {
  share_box_across_classes_ = false;
  clear_has_share_box_across_classes();
}
bool MaskRCNNBoxPredictor::share_box_across_classes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.share_box_across_classes)
  return share_box_across_classes_;
}
void MaskRCNNBoxPredictor::set_share_box_across_classes(bool value) {
  set_has_share_box_across_classes();
  share_box_across_classes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.share_box_across_classes)
}

// optional bool convolve_then_upsample_masks = 14 [default = false];
bool MaskRCNNBoxPredictor::has_convolve_then_upsample_masks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MaskRCNNBoxPredictor::set_has_convolve_then_upsample_masks() {
  _has_bits_[0] |= 0x00000080u;
}
void MaskRCNNBoxPredictor::clear_has_convolve_then_upsample_masks() {
  _has_bits_[0] &= ~0x00000080u;
}
void MaskRCNNBoxPredictor::clear_convolve_then_upsample_masks() {
  convolve_then_upsample_masks_ = false;
  clear_has_convolve_then_upsample_masks();
}
bool MaskRCNNBoxPredictor::convolve_then_upsample_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.convolve_then_upsample_masks)
  return convolve_then_upsample_masks_;
}
void MaskRCNNBoxPredictor::set_convolve_then_upsample_masks(bool value) {
  set_has_convolve_then_upsample_masks();
  convolve_then_upsample_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.convolve_then_upsample_masks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RfcnBoxPredictor::kConvHyperparamsFieldNumber;
const int RfcnBoxPredictor::kNumSpatialBinsHeightFieldNumber;
const int RfcnBoxPredictor::kNumSpatialBinsWidthFieldNumber;
const int RfcnBoxPredictor::kDepthFieldNumber;
const int RfcnBoxPredictor::kBoxCodeSizeFieldNumber;
const int RfcnBoxPredictor::kCropHeightFieldNumber;
const int RfcnBoxPredictor::kCropWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RfcnBoxPredictor::RfcnBoxPredictor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RfcnBoxPredictor)
}
RfcnBoxPredictor::RfcnBoxPredictor(const RfcnBoxPredictor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_conv_hyperparams()) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.conv_hyperparams_);
  } else {
    conv_hyperparams_ = NULL;
  }
  ::memcpy(&num_spatial_bins_height_, &from.num_spatial_bins_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&crop_width_) -
    reinterpret_cast<char*>(&num_spatial_bins_height_)) + sizeof(crop_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RfcnBoxPredictor)
}

void RfcnBoxPredictor::SharedCtor() {
  _cached_size_ = 0;
  conv_hyperparams_ = NULL;
  num_spatial_bins_height_ = 3;
  num_spatial_bins_width_ = 3;
  depth_ = 1024;
  box_code_size_ = 4;
  crop_height_ = 12;
  crop_width_ = 12;
}

RfcnBoxPredictor::~RfcnBoxPredictor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RfcnBoxPredictor)
  SharedDtor();
}

void RfcnBoxPredictor::SharedDtor() {
  if (this != internal_default_instance()) delete conv_hyperparams_;
}

void RfcnBoxPredictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RfcnBoxPredictor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RfcnBoxPredictor& RfcnBoxPredictor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RfcnBoxPredictor* RfcnBoxPredictor::New(::google::protobuf::Arena* arena) const {
  RfcnBoxPredictor* n = new RfcnBoxPredictor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RfcnBoxPredictor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RfcnBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(conv_hyperparams_ != NULL);
      conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
    num_spatial_bins_height_ = 3;
    num_spatial_bins_width_ = 3;
    depth_ = 1024;
    box_code_size_ = 4;
    crop_height_ = 12;
    crop_width_ = 12;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RfcnBoxPredictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RfcnBoxPredictor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_spatial_bins_height = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_spatial_bins_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_spatial_bins_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_spatial_bins_width = 3 [default = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_spatial_bins_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_spatial_bins_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 4 [default = 1024];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 box_code_size = 5 [default = 4];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_box_code_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_code_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_height = 6 [default = 12];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_crop_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crop_width = 7 [default = 12];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_crop_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crop_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RfcnBoxPredictor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RfcnBoxPredictor)
  return false;
#undef DO_
}

void RfcnBoxPredictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RfcnBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->conv_hyperparams_, output);
  }

  // optional int32 num_spatial_bins_height = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_spatial_bins_height(), output);
  }

  // optional int32 num_spatial_bins_width = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_spatial_bins_width(), output);
  }

  // optional int32 depth = 4 [default = 1024];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->depth(), output);
  }

  // optional int32 box_code_size = 5 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->box_code_size(), output);
  }

  // optional int32 crop_height = 6 [default = 12];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crop_height(), output);
  }

  // optional int32 crop_width = 7 [default = 12];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->crop_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RfcnBoxPredictor)
}

::google::protobuf::uint8* RfcnBoxPredictor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RfcnBoxPredictor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->conv_hyperparams_, deterministic, target);
  }

  // optional int32 num_spatial_bins_height = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_spatial_bins_height(), target);
  }

  // optional int32 num_spatial_bins_width = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_spatial_bins_width(), target);
  }

  // optional int32 depth = 4 [default = 1024];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->depth(), target);
  }

  // optional int32 box_code_size = 5 [default = 4];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->box_code_size(), target);
  }

  // optional int32 crop_height = 6 [default = 12];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crop_height(), target);
  }

  // optional int32 crop_width = 7 [default = 12];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->crop_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RfcnBoxPredictor)
  return target;
}

size_t RfcnBoxPredictor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RfcnBoxPredictor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
    if (has_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->conv_hyperparams_);
    }

    // optional int32 num_spatial_bins_height = 2 [default = 3];
    if (has_num_spatial_bins_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_spatial_bins_height());
    }

    // optional int32 num_spatial_bins_width = 3 [default = 3];
    if (has_num_spatial_bins_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_spatial_bins_width());
    }

    // optional int32 depth = 4 [default = 1024];
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional int32 box_code_size = 5 [default = 4];
    if (has_box_code_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_code_size());
    }

    // optional int32 crop_height = 6 [default = 12];
    if (has_crop_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_height());
    }

    // optional int32 crop_width = 7 [default = 12];
    if (has_crop_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crop_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RfcnBoxPredictor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RfcnBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  const RfcnBoxPredictor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RfcnBoxPredictor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RfcnBoxPredictor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RfcnBoxPredictor)
    MergeFrom(*source);
  }
}

void RfcnBoxPredictor::MergeFrom(const RfcnBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RfcnBoxPredictor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.conv_hyperparams());
    }
    if (cached_has_bits & 0x00000002u) {
      num_spatial_bins_height_ = from.num_spatial_bins_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_spatial_bins_width_ = from.num_spatial_bins_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      box_code_size_ = from.box_code_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      crop_height_ = from.crop_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      crop_width_ = from.crop_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RfcnBoxPredictor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RfcnBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RfcnBoxPredictor::CopyFrom(const RfcnBoxPredictor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RfcnBoxPredictor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RfcnBoxPredictor::IsInitialized() const {
  return true;
}

void RfcnBoxPredictor::Swap(RfcnBoxPredictor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RfcnBoxPredictor::InternalSwap(RfcnBoxPredictor* other) {
  using std::swap;
  swap(conv_hyperparams_, other->conv_hyperparams_);
  swap(num_spatial_bins_height_, other->num_spatial_bins_height_);
  swap(num_spatial_bins_width_, other->num_spatial_bins_width_);
  swap(depth_, other->depth_);
  swap(box_code_size_, other->box_code_size_);
  swap(crop_height_, other->crop_height_);
  swap(crop_width_, other->crop_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RfcnBoxPredictor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RfcnBoxPredictor

// optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
bool RfcnBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RfcnBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
void RfcnBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
void RfcnBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& RfcnBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* RfcnBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
::object_detection::protos::Hyperparams* RfcnBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
void RfcnBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
}

// optional int32 num_spatial_bins_height = 2 [default = 3];
bool RfcnBoxPredictor::has_num_spatial_bins_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RfcnBoxPredictor::set_has_num_spatial_bins_height() {
  _has_bits_[0] |= 0x00000002u;
}
void RfcnBoxPredictor::clear_has_num_spatial_bins_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void RfcnBoxPredictor::clear_num_spatial_bins_height() {
  num_spatial_bins_height_ = 3;
  clear_has_num_spatial_bins_height();
}
::google::protobuf::int32 RfcnBoxPredictor::num_spatial_bins_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_height)
  return num_spatial_bins_height_;
}
void RfcnBoxPredictor::set_num_spatial_bins_height(::google::protobuf::int32 value) {
  set_has_num_spatial_bins_height();
  num_spatial_bins_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_height)
}

// optional int32 num_spatial_bins_width = 3 [default = 3];
bool RfcnBoxPredictor::has_num_spatial_bins_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RfcnBoxPredictor::set_has_num_spatial_bins_width() {
  _has_bits_[0] |= 0x00000004u;
}
void RfcnBoxPredictor::clear_has_num_spatial_bins_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void RfcnBoxPredictor::clear_num_spatial_bins_width() {
  num_spatial_bins_width_ = 3;
  clear_has_num_spatial_bins_width();
}
::google::protobuf::int32 RfcnBoxPredictor::num_spatial_bins_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_width)
  return num_spatial_bins_width_;
}
void RfcnBoxPredictor::set_num_spatial_bins_width(::google::protobuf::int32 value) {
  set_has_num_spatial_bins_width();
  num_spatial_bins_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_width)
}

// optional int32 depth = 4 [default = 1024];
bool RfcnBoxPredictor::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RfcnBoxPredictor::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
void RfcnBoxPredictor::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
void RfcnBoxPredictor::clear_depth() {
  depth_ = 1024;
  clear_has_depth();
}
::google::protobuf::int32 RfcnBoxPredictor::depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.depth)
  return depth_;
}
void RfcnBoxPredictor::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.depth)
}

// optional int32 box_code_size = 5 [default = 4];
bool RfcnBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RfcnBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000010u;
}
void RfcnBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void RfcnBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
::google::protobuf::int32 RfcnBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.box_code_size)
  return box_code_size_;
}
void RfcnBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.box_code_size)
}

// optional int32 crop_height = 6 [default = 12];
bool RfcnBoxPredictor::has_crop_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RfcnBoxPredictor::set_has_crop_height() {
  _has_bits_[0] |= 0x00000020u;
}
void RfcnBoxPredictor::clear_has_crop_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void RfcnBoxPredictor::clear_crop_height() {
  crop_height_ = 12;
  clear_has_crop_height();
}
::google::protobuf::int32 RfcnBoxPredictor::crop_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.crop_height)
  return crop_height_;
}
void RfcnBoxPredictor::set_crop_height(::google::protobuf::int32 value) {
  set_has_crop_height();
  crop_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.crop_height)
}

// optional int32 crop_width = 7 [default = 12];
bool RfcnBoxPredictor::has_crop_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RfcnBoxPredictor::set_has_crop_width() {
  _has_bits_[0] |= 0x00000040u;
}
void RfcnBoxPredictor::clear_has_crop_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void RfcnBoxPredictor::clear_crop_width() {
  crop_width_ = 12;
  clear_has_crop_width();
}
::google::protobuf::int32 RfcnBoxPredictor::crop_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.crop_width)
  return crop_width_;
}
void RfcnBoxPredictor::set_crop_width(::google::protobuf::int32 value) {
  set_has_crop_width();
  crop_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.crop_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
