// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/preprocessor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/preprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class PreprocessingStepDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PreprocessingStep>
     _instance;
  const ::object_detection::protos::NormalizeImage* normalize_image_;
  const ::object_detection::protos::RandomHorizontalFlip* random_horizontal_flip_;
  const ::object_detection::protos::RandomPixelValueScale* random_pixel_value_scale_;
  const ::object_detection::protos::RandomImageScale* random_image_scale_;
  const ::object_detection::protos::RandomRGBtoGray* random_rgb_to_gray_;
  const ::object_detection::protos::RandomAdjustBrightness* random_adjust_brightness_;
  const ::object_detection::protos::RandomAdjustContrast* random_adjust_contrast_;
  const ::object_detection::protos::RandomAdjustHue* random_adjust_hue_;
  const ::object_detection::protos::RandomAdjustSaturation* random_adjust_saturation_;
  const ::object_detection::protos::RandomDistortColor* random_distort_color_;
  const ::object_detection::protos::RandomJitterBoxes* random_jitter_boxes_;
  const ::object_detection::protos::RandomCropImage* random_crop_image_;
  const ::object_detection::protos::RandomPadImage* random_pad_image_;
  const ::object_detection::protos::RandomCropPadImage* random_crop_pad_image_;
  const ::object_detection::protos::RandomCropToAspectRatio* random_crop_to_aspect_ratio_;
  const ::object_detection::protos::RandomBlackPatches* random_black_patches_;
  const ::object_detection::protos::RandomResizeMethod* random_resize_method_;
  const ::object_detection::protos::ScaleBoxesToPixelCoordinates* scale_boxes_to_pixel_coordinates_;
  const ::object_detection::protos::ResizeImage* resize_image_;
  const ::object_detection::protos::SubtractChannelMean* subtract_channel_mean_;
  const ::object_detection::protos::SSDRandomCrop* ssd_random_crop_;
  const ::object_detection::protos::SSDRandomCropPad* ssd_random_crop_pad_;
  const ::object_detection::protos::SSDRandomCropFixedAspectRatio* ssd_random_crop_fixed_aspect_ratio_;
  const ::object_detection::protos::SSDRandomCropPadFixedAspectRatio* ssd_random_crop_pad_fixed_aspect_ratio_;
  const ::object_detection::protos::RandomVerticalFlip* random_vertical_flip_;
  const ::object_detection::protos::RandomRotation90* random_rotation90_;
  const ::object_detection::protos::RGBtoGray* rgb_to_gray_;
  const ::object_detection::protos::ConvertClassLogitsToSoftmax* convert_class_logits_to_softmax_;
  const ::object_detection::protos::RandomAbsolutePadImage* random_absolute_pad_image_;
  const ::object_detection::protos::RandomSelfConcatImage* random_self_concat_image_;
  const ::object_detection::protos::AutoAugmentImage* autoaugment_image_;
  const ::object_detection::protos::DropLabelProbabilistically* drop_label_probabilistically_;
  const ::object_detection::protos::RemapLabels* remap_labels_;
} _PreprocessingStep_default_instance_;
class NormalizeImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NormalizeImage>
     _instance;
} _NormalizeImage_default_instance_;
class RandomHorizontalFlipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomHorizontalFlip>
     _instance;
} _RandomHorizontalFlip_default_instance_;
class RandomVerticalFlipDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomVerticalFlip>
     _instance;
} _RandomVerticalFlip_default_instance_;
class RandomRotation90DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomRotation90>
     _instance;
} _RandomRotation90_default_instance_;
class RandomPixelValueScaleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomPixelValueScale>
     _instance;
} _RandomPixelValueScale_default_instance_;
class RandomImageScaleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomImageScale>
     _instance;
} _RandomImageScale_default_instance_;
class RandomRGBtoGrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomRGBtoGray>
     _instance;
} _RandomRGBtoGray_default_instance_;
class RandomAdjustBrightnessDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomAdjustBrightness>
     _instance;
} _RandomAdjustBrightness_default_instance_;
class RandomAdjustContrastDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomAdjustContrast>
     _instance;
} _RandomAdjustContrast_default_instance_;
class RandomAdjustHueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomAdjustHue>
     _instance;
} _RandomAdjustHue_default_instance_;
class RandomAdjustSaturationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomAdjustSaturation>
     _instance;
} _RandomAdjustSaturation_default_instance_;
class RandomDistortColorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomDistortColor>
     _instance;
} _RandomDistortColor_default_instance_;
class RandomJitterBoxesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomJitterBoxes>
     _instance;
} _RandomJitterBoxes_default_instance_;
class RandomCropImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomCropImage>
     _instance;
} _RandomCropImage_default_instance_;
class RandomPadImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomPadImage>
     _instance;
} _RandomPadImage_default_instance_;
class RandomAbsolutePadImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomAbsolutePadImage>
     _instance;
} _RandomAbsolutePadImage_default_instance_;
class RandomCropPadImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomCropPadImage>
     _instance;
} _RandomCropPadImage_default_instance_;
class RandomCropToAspectRatioDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomCropToAspectRatio>
     _instance;
} _RandomCropToAspectRatio_default_instance_;
class RandomBlackPatchesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomBlackPatches>
     _instance;
} _RandomBlackPatches_default_instance_;
class RandomResizeMethodDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomResizeMethod>
     _instance;
} _RandomResizeMethod_default_instance_;
class RGBtoGrayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RGBtoGray>
     _instance;
} _RGBtoGray_default_instance_;
class ScaleBoxesToPixelCoordinatesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScaleBoxesToPixelCoordinates>
     _instance;
} _ScaleBoxesToPixelCoordinates_default_instance_;
class ResizeImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResizeImage>
     _instance;
} _ResizeImage_default_instance_;
class SubtractChannelMeanDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubtractChannelMean>
     _instance;
} _SubtractChannelMean_default_instance_;
class SSDRandomCropOperationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropOperation>
     _instance;
} _SSDRandomCropOperation_default_instance_;
class SSDRandomCropDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCrop>
     _instance;
} _SSDRandomCrop_default_instance_;
class SSDRandomCropPadOperationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropPadOperation>
     _instance;
} _SSDRandomCropPadOperation_default_instance_;
class SSDRandomCropPadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropPad>
     _instance;
} _SSDRandomCropPad_default_instance_;
class SSDRandomCropFixedAspectRatioOperationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropFixedAspectRatioOperation>
     _instance;
} _SSDRandomCropFixedAspectRatioOperation_default_instance_;
class SSDRandomCropFixedAspectRatioDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropFixedAspectRatio>
     _instance;
} _SSDRandomCropFixedAspectRatio_default_instance_;
class SSDRandomCropPadFixedAspectRatioOperationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropPadFixedAspectRatioOperation>
     _instance;
} _SSDRandomCropPadFixedAspectRatioOperation_default_instance_;
class SSDRandomCropPadFixedAspectRatioDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SSDRandomCropPadFixedAspectRatio>
     _instance;
} _SSDRandomCropPadFixedAspectRatio_default_instance_;
class ConvertClassLogitsToSoftmaxDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConvertClassLogitsToSoftmax>
     _instance;
} _ConvertClassLogitsToSoftmax_default_instance_;
class RandomSelfConcatImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomSelfConcatImage>
     _instance;
} _RandomSelfConcatImage_default_instance_;
class AutoAugmentImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AutoAugmentImage>
     _instance;
} _AutoAugmentImage_default_instance_;
class DropLabelProbabilisticallyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DropLabelProbabilistically>
     _instance;
} _DropLabelProbabilistically_default_instance_;
class RemapLabelsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RemapLabels>
     _instance;
} _RemapLabels_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(PreprocessingStepDefaultTypeInternal, normalize_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_horizontal_flip_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_pixel_value_scale_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_image_scale_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_rgb_to_gray_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_adjust_brightness_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_adjust_contrast_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_adjust_hue_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_adjust_saturation_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_distort_color_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_jitter_boxes_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_crop_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_pad_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_crop_pad_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_crop_to_aspect_ratio_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_black_patches_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_resize_method_),
  offsetof(PreprocessingStepDefaultTypeInternal, scale_boxes_to_pixel_coordinates_),
  offsetof(PreprocessingStepDefaultTypeInternal, resize_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, subtract_channel_mean_),
  offsetof(PreprocessingStepDefaultTypeInternal, ssd_random_crop_),
  offsetof(PreprocessingStepDefaultTypeInternal, ssd_random_crop_pad_),
  offsetof(PreprocessingStepDefaultTypeInternal, ssd_random_crop_fixed_aspect_ratio_),
  offsetof(PreprocessingStepDefaultTypeInternal, ssd_random_crop_pad_fixed_aspect_ratio_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_vertical_flip_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_rotation90_),
  offsetof(PreprocessingStepDefaultTypeInternal, rgb_to_gray_),
  offsetof(PreprocessingStepDefaultTypeInternal, convert_class_logits_to_softmax_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_absolute_pad_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, random_self_concat_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, autoaugment_image_),
  offsetof(PreprocessingStepDefaultTypeInternal, drop_label_probabilistically_),
  offsetof(PreprocessingStepDefaultTypeInternal, remap_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreprocessingStep, preprocessing_step_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeImage, original_minval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeImage, original_maxval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeImage, target_minval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeImage, target_maxval_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomHorizontalFlip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomHorizontalFlip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomHorizontalFlip, keypoint_flip_permutation_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVerticalFlip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVerticalFlip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomVerticalFlip, keypoint_flip_permutation_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomRotation90, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomRotation90, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPixelValueScale, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPixelValueScale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPixelValueScale, minval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPixelValueScale, maxval_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomImageScale, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomImageScale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomImageScale, min_scale_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomImageScale, max_scale_ratio_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomRGBtoGray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomRGBtoGray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomRGBtoGray, probability_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustBrightness, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustBrightness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustBrightness, max_delta_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustContrast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustContrast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustContrast, min_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustContrast, max_delta_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustHue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustHue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustHue, max_delta_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustSaturation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustSaturation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustSaturation, min_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAdjustSaturation, max_delta_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomDistortColor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomDistortColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomDistortColor, color_ordering_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomJitterBoxes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomJitterBoxes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomJitterBoxes, ratio_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, min_object_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, min_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, max_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, clip_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropImage, random_coef_),
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, min_image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, min_image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, max_image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, max_image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomPadImage, pad_color_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAbsolutePadImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAbsolutePadImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAbsolutePadImage, max_height_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAbsolutePadImage, max_width_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomAbsolutePadImage, pad_color_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, min_object_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, min_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, max_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, clip_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, random_coef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, min_padded_size_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, max_padded_size_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropPadImage, pad_color_),
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropToAspectRatio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropToAspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropToAspectRatio, aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropToAspectRatio, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomCropToAspectRatio, clip_boxes_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBlackPatches, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBlackPatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBlackPatches, max_black_patches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBlackPatches, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomBlackPatches, size_to_image_ratio_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeMethod, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeMethod, target_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomResizeMethod, target_width_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBtoGray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBtoGray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleBoxesToPixelCoordinates, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScaleBoxesToPixelCoordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeImage, new_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeImage, new_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResizeImage, method_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubtractChannelMean, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubtractChannelMean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubtractChannelMean, means_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, min_object_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, min_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, max_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, clip_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropOperation, random_coef_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCrop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCrop, operations_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, min_object_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, min_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, max_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, clip_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, random_coef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, min_padded_size_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, max_padded_size_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, pad_color_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, pad_color_g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadOperation, pad_color_b_),
  0,
  1,
  2,
  3,
  4,
  5,
  10,
  6,
  ~0u,
  ~0u,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPad, operations_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, min_object_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, max_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, clip_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatioOperation, random_coef_),
  0,
  1,
  2,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatio, operations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropFixedAspectRatio, aspect_ratio_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, min_object_covered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, min_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, max_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, min_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, max_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, overlap_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, clip_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatioOperation, random_coef_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatio, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatio, operations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatio, aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatio, min_padded_size_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSDRandomCropPadFixedAspectRatio, max_padded_size_ratio_),
  ~0u,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertClassLogitsToSoftmax, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertClassLogitsToSoftmax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertClassLogitsToSoftmax, temperature_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomSelfConcatImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomSelfConcatImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomSelfConcatImage, concat_vertical_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomSelfConcatImage, concat_horizontal_probability_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAugmentImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAugmentImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAugmentImage, policy_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropLabelProbabilistically, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropLabelProbabilistically, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropLabelProbabilistically, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropLabelProbabilistically, drop_probability_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemapLabels, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemapLabels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemapLabels, original_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemapLabels, new_label_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 39, sizeof(PreprocessingStep)},
  { 72, 81, sizeof(NormalizeImage)},
  { 85, 91, sizeof(RandomHorizontalFlip)},
  { 92, 98, sizeof(RandomVerticalFlip)},
  { 99, 104, sizeof(RandomRotation90)},
  { 104, 111, sizeof(RandomPixelValueScale)},
  { 113, 120, sizeof(RandomImageScale)},
  { 122, 128, sizeof(RandomRGBtoGray)},
  { 129, 135, sizeof(RandomAdjustBrightness)},
  { 136, 143, sizeof(RandomAdjustContrast)},
  { 145, 151, sizeof(RandomAdjustHue)},
  { 152, 159, sizeof(RandomAdjustSaturation)},
  { 161, 167, sizeof(RandomDistortColor)},
  { 168, 174, sizeof(RandomJitterBoxes)},
  { 175, 188, sizeof(RandomCropImage)},
  { 196, 206, sizeof(RandomPadImage)},
  { 211, 219, sizeof(RandomAbsolutePadImage)},
  { 222, 238, sizeof(RandomCropPadImage)},
  { 249, 257, sizeof(RandomCropToAspectRatio)},
  { 260, 268, sizeof(RandomBlackPatches)},
  { 271, 278, sizeof(RandomResizeMethod)},
  { 280, 285, sizeof(RGBtoGray)},
  { 285, 290, sizeof(ScaleBoxesToPixelCoordinates)},
  { 290, 298, sizeof(ResizeImage)},
  { 301, 307, sizeof(SubtractChannelMean)},
  { 308, 321, sizeof(SSDRandomCropOperation)},
  { 329, 335, sizeof(SSDRandomCrop)},
  { 336, 354, sizeof(SSDRandomCropPadOperation)},
  { 367, 373, sizeof(SSDRandomCropPad)},
  { 374, 385, sizeof(SSDRandomCropFixedAspectRatioOperation)},
  { 391, 398, sizeof(SSDRandomCropFixedAspectRatio)},
  { 400, 413, sizeof(SSDRandomCropPadFixedAspectRatioOperation)},
  { 421, 430, sizeof(SSDRandomCropPadFixedAspectRatio)},
  { 434, 440, sizeof(ConvertClassLogitsToSoftmax)},
  { 441, 448, sizeof(RandomSelfConcatImage)},
  { 450, 456, sizeof(AutoAugmentImage)},
  { 457, 464, sizeof(DropLabelProbabilistically)},
  { 466, 473, sizeof(RemapLabels)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreprocessingStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NormalizeImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomHorizontalFlip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomVerticalFlip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomRotation90_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomPixelValueScale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomImageScale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomRGBtoGray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomAdjustBrightness_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomAdjustContrast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomAdjustHue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomAdjustSaturation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomDistortColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomJitterBoxes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomCropImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomPadImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomAbsolutePadImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomCropPadImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomCropToAspectRatio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomBlackPatches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomResizeMethod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RGBtoGray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScaleBoxesToPixelCoordinates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResizeImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubtractChannelMean_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCrop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropPadOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropPad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropFixedAspectRatioOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropFixedAspectRatio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropPadFixedAspectRatioOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSDRandomCropPadFixedAspectRatio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConvertClassLogitsToSoftmax_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomSelfConcatImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoAugmentImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DropLabelProbabilistically_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemapLabels_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/preprocessor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PreprocessingStep_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PreprocessingStep_default_instance_);_NormalizeImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NormalizeImage_default_instance_);_RandomHorizontalFlip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomHorizontalFlip_default_instance_);_RandomVerticalFlip_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomVerticalFlip_default_instance_);_RandomRotation90_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomRotation90_default_instance_);_RandomPixelValueScale_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomPixelValueScale_default_instance_);_RandomImageScale_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomImageScale_default_instance_);_RandomRGBtoGray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomRGBtoGray_default_instance_);_RandomAdjustBrightness_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomAdjustBrightness_default_instance_);_RandomAdjustContrast_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomAdjustContrast_default_instance_);_RandomAdjustHue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomAdjustHue_default_instance_);_RandomAdjustSaturation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomAdjustSaturation_default_instance_);_RandomDistortColor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomDistortColor_default_instance_);_RandomJitterBoxes_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomJitterBoxes_default_instance_);_RandomCropImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomCropImage_default_instance_);_RandomPadImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomPadImage_default_instance_);_RandomAbsolutePadImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomAbsolutePadImage_default_instance_);_RandomCropPadImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomCropPadImage_default_instance_);_RandomCropToAspectRatio_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomCropToAspectRatio_default_instance_);_RandomBlackPatches_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomBlackPatches_default_instance_);_RandomResizeMethod_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomResizeMethod_default_instance_);_RGBtoGray_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RGBtoGray_default_instance_);_ScaleBoxesToPixelCoordinates_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScaleBoxesToPixelCoordinates_default_instance_);_ResizeImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResizeImage_default_instance_);_SubtractChannelMean_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubtractChannelMean_default_instance_);_SSDRandomCropOperation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropOperation_default_instance_);_SSDRandomCrop_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCrop_default_instance_);_SSDRandomCropPadOperation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropPadOperation_default_instance_);_SSDRandomCropPad_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropPad_default_instance_);_SSDRandomCropFixedAspectRatioOperation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropFixedAspectRatioOperation_default_instance_);_SSDRandomCropFixedAspectRatio_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropFixedAspectRatio_default_instance_);_SSDRandomCropPadFixedAspectRatioOperation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropPadFixedAspectRatioOperation_default_instance_);_SSDRandomCropPadFixedAspectRatio_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SSDRandomCropPadFixedAspectRatio_default_instance_);_ConvertClassLogitsToSoftmax_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConvertClassLogitsToSoftmax_default_instance_);_RandomSelfConcatImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomSelfConcatImage_default_instance_);AutoAugmentImage::_default_policy_name_.DefaultConstruct();
  *AutoAugmentImage::_default_policy_name_.get_mutable() = ::std::string("v0", 2);
  ::google::protobuf::internal::OnShutdownDestroyString(
      AutoAugmentImage::_default_policy_name_.get_mutable());
  _AutoAugmentImage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AutoAugmentImage_default_instance_);_DropLabelProbabilistically_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DropLabelProbabilistically_default_instance_);_RemapLabels_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RemapLabels_default_instance_);_PreprocessingStep_default_instance_.normalize_image_ = const_cast< ::object_detection::protos::NormalizeImage*>(
      ::object_detection::protos::NormalizeImage::internal_default_instance());
  _PreprocessingStep_default_instance_.random_horizontal_flip_ = const_cast< ::object_detection::protos::RandomHorizontalFlip*>(
      ::object_detection::protos::RandomHorizontalFlip::internal_default_instance());
  _PreprocessingStep_default_instance_.random_pixel_value_scale_ = const_cast< ::object_detection::protos::RandomPixelValueScale*>(
      ::object_detection::protos::RandomPixelValueScale::internal_default_instance());
  _PreprocessingStep_default_instance_.random_image_scale_ = const_cast< ::object_detection::protos::RandomImageScale*>(
      ::object_detection::protos::RandomImageScale::internal_default_instance());
  _PreprocessingStep_default_instance_.random_rgb_to_gray_ = const_cast< ::object_detection::protos::RandomRGBtoGray*>(
      ::object_detection::protos::RandomRGBtoGray::internal_default_instance());
  _PreprocessingStep_default_instance_.random_adjust_brightness_ = const_cast< ::object_detection::protos::RandomAdjustBrightness*>(
      ::object_detection::protos::RandomAdjustBrightness::internal_default_instance());
  _PreprocessingStep_default_instance_.random_adjust_contrast_ = const_cast< ::object_detection::protos::RandomAdjustContrast*>(
      ::object_detection::protos::RandomAdjustContrast::internal_default_instance());
  _PreprocessingStep_default_instance_.random_adjust_hue_ = const_cast< ::object_detection::protos::RandomAdjustHue*>(
      ::object_detection::protos::RandomAdjustHue::internal_default_instance());
  _PreprocessingStep_default_instance_.random_adjust_saturation_ = const_cast< ::object_detection::protos::RandomAdjustSaturation*>(
      ::object_detection::protos::RandomAdjustSaturation::internal_default_instance());
  _PreprocessingStep_default_instance_.random_distort_color_ = const_cast< ::object_detection::protos::RandomDistortColor*>(
      ::object_detection::protos::RandomDistortColor::internal_default_instance());
  _PreprocessingStep_default_instance_.random_jitter_boxes_ = const_cast< ::object_detection::protos::RandomJitterBoxes*>(
      ::object_detection::protos::RandomJitterBoxes::internal_default_instance());
  _PreprocessingStep_default_instance_.random_crop_image_ = const_cast< ::object_detection::protos::RandomCropImage*>(
      ::object_detection::protos::RandomCropImage::internal_default_instance());
  _PreprocessingStep_default_instance_.random_pad_image_ = const_cast< ::object_detection::protos::RandomPadImage*>(
      ::object_detection::protos::RandomPadImage::internal_default_instance());
  _PreprocessingStep_default_instance_.random_crop_pad_image_ = const_cast< ::object_detection::protos::RandomCropPadImage*>(
      ::object_detection::protos::RandomCropPadImage::internal_default_instance());
  _PreprocessingStep_default_instance_.random_crop_to_aspect_ratio_ = const_cast< ::object_detection::protos::RandomCropToAspectRatio*>(
      ::object_detection::protos::RandomCropToAspectRatio::internal_default_instance());
  _PreprocessingStep_default_instance_.random_black_patches_ = const_cast< ::object_detection::protos::RandomBlackPatches*>(
      ::object_detection::protos::RandomBlackPatches::internal_default_instance());
  _PreprocessingStep_default_instance_.random_resize_method_ = const_cast< ::object_detection::protos::RandomResizeMethod*>(
      ::object_detection::protos::RandomResizeMethod::internal_default_instance());
  _PreprocessingStep_default_instance_.scale_boxes_to_pixel_coordinates_ = const_cast< ::object_detection::protos::ScaleBoxesToPixelCoordinates*>(
      ::object_detection::protos::ScaleBoxesToPixelCoordinates::internal_default_instance());
  _PreprocessingStep_default_instance_.resize_image_ = const_cast< ::object_detection::protos::ResizeImage*>(
      ::object_detection::protos::ResizeImage::internal_default_instance());
  _PreprocessingStep_default_instance_.subtract_channel_mean_ = const_cast< ::object_detection::protos::SubtractChannelMean*>(
      ::object_detection::protos::SubtractChannelMean::internal_default_instance());
  _PreprocessingStep_default_instance_.ssd_random_crop_ = const_cast< ::object_detection::protos::SSDRandomCrop*>(
      ::object_detection::protos::SSDRandomCrop::internal_default_instance());
  _PreprocessingStep_default_instance_.ssd_random_crop_pad_ = const_cast< ::object_detection::protos::SSDRandomCropPad*>(
      ::object_detection::protos::SSDRandomCropPad::internal_default_instance());
  _PreprocessingStep_default_instance_.ssd_random_crop_fixed_aspect_ratio_ = const_cast< ::object_detection::protos::SSDRandomCropFixedAspectRatio*>(
      ::object_detection::protos::SSDRandomCropFixedAspectRatio::internal_default_instance());
  _PreprocessingStep_default_instance_.ssd_random_crop_pad_fixed_aspect_ratio_ = const_cast< ::object_detection::protos::SSDRandomCropPadFixedAspectRatio*>(
      ::object_detection::protos::SSDRandomCropPadFixedAspectRatio::internal_default_instance());
  _PreprocessingStep_default_instance_.random_vertical_flip_ = const_cast< ::object_detection::protos::RandomVerticalFlip*>(
      ::object_detection::protos::RandomVerticalFlip::internal_default_instance());
  _PreprocessingStep_default_instance_.random_rotation90_ = const_cast< ::object_detection::protos::RandomRotation90*>(
      ::object_detection::protos::RandomRotation90::internal_default_instance());
  _PreprocessingStep_default_instance_.rgb_to_gray_ = const_cast< ::object_detection::protos::RGBtoGray*>(
      ::object_detection::protos::RGBtoGray::internal_default_instance());
  _PreprocessingStep_default_instance_.convert_class_logits_to_softmax_ = const_cast< ::object_detection::protos::ConvertClassLogitsToSoftmax*>(
      ::object_detection::protos::ConvertClassLogitsToSoftmax::internal_default_instance());
  _PreprocessingStep_default_instance_.random_absolute_pad_image_ = const_cast< ::object_detection::protos::RandomAbsolutePadImage*>(
      ::object_detection::protos::RandomAbsolutePadImage::internal_default_instance());
  _PreprocessingStep_default_instance_.random_self_concat_image_ = const_cast< ::object_detection::protos::RandomSelfConcatImage*>(
      ::object_detection::protos::RandomSelfConcatImage::internal_default_instance());
  _PreprocessingStep_default_instance_.autoaugment_image_ = const_cast< ::object_detection::protos::AutoAugmentImage*>(
      ::object_detection::protos::AutoAugmentImage::internal_default_instance());
  _PreprocessingStep_default_instance_.drop_label_probabilistically_ = const_cast< ::object_detection::protos::DropLabelProbabilistically*>(
      ::object_detection::protos::DropLabelProbabilistically::internal_default_instance());
  _PreprocessingStep_default_instance_.remap_labels_ = const_cast< ::object_detection::protos::RemapLabels*>(
      ::object_detection::protos::RemapLabels::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*object_detection/protos/preprocessor.p"
      "roto\022\027object_detection.protos\"\330\024\n\021Prepro"
      "cessingStep\022B\n\017normalize_image\030\001 \001(\0132\'.o"
      "bject_detection.protos.NormalizeImageH\000\022"
      "O\n\026random_horizontal_flip\030\002 \001(\0132-.object"
      "_detection.protos.RandomHorizontalFlipH\000"
      "\022R\n\030random_pixel_value_scale\030\003 \001(\0132..obj"
      "ect_detection.protos.RandomPixelValueSca"
      "leH\000\022G\n\022random_image_scale\030\004 \001(\0132).objec"
      "t_detection.protos.RandomImageScaleH\000\022F\n"
      "\022random_rgb_to_gray\030\005 \001(\0132(.object_detec"
      "tion.protos.RandomRGBtoGrayH\000\022S\n\030random_"
      "adjust_brightness\030\006 \001(\0132/.object_detecti"
      "on.protos.RandomAdjustBrightnessH\000\022O\n\026ra"
      "ndom_adjust_contrast\030\007 \001(\0132-.object_dete"
      "ction.protos.RandomAdjustContrastH\000\022E\n\021r"
      "andom_adjust_hue\030\010 \001(\0132(.object_detectio"
      "n.protos.RandomAdjustHueH\000\022S\n\030random_adj"
      "ust_saturation\030\t \001(\0132/.object_detection."
      "protos.RandomAdjustSaturationH\000\022K\n\024rando"
      "m_distort_color\030\n \001(\0132+.object_detection"
      ".protos.RandomDistortColorH\000\022I\n\023random_j"
      "itter_boxes\030\013 \001(\0132*.object_detection.pro"
      "tos.RandomJitterBoxesH\000\022E\n\021random_crop_i"
      "mage\030\014 \001(\0132(.object_detection.protos.Ran"
      "domCropImageH\000\022C\n\020random_pad_image\030\r \001(\013"
      "2\'.object_detection.protos.RandomPadImag"
      "eH\000\022L\n\025random_crop_pad_image\030\016 \001(\0132+.obj"
      "ect_detection.protos.RandomCropPadImageH"
      "\000\022W\n\033random_crop_to_aspect_ratio\030\017 \001(\01320"
      ".object_detection.protos.RandomCropToAsp"
      "ectRatioH\000\022K\n\024random_black_patches\030\020 \001(\013"
      "2+.object_detection.protos.RandomBlackPa"
      "tchesH\000\022K\n\024random_resize_method\030\021 \001(\0132+."
      "object_detection.protos.RandomResizeMeth"
      "odH\000\022a\n scale_boxes_to_pixel_coordinates"
      "\030\022 \001(\01325.object_detection.protos.ScaleBo"
      "xesToPixelCoordinatesH\000\022<\n\014resize_image\030"
      "\023 \001(\0132$.object_detection.protos.ResizeIm"
      "ageH\000\022M\n\025subtract_channel_mean\030\024 \001(\0132,.o"
      "bject_detection.protos.SubtractChannelMe"
      "anH\000\022A\n\017ssd_random_crop\030\025 \001(\0132&.object_d"
      "etection.protos.SSDRandomCropH\000\022H\n\023ssd_r"
      "andom_crop_pad\030\026 \001(\0132).object_detection."
      "protos.SSDRandomCropPadH\000\022d\n\"ssd_random_"
      "crop_fixed_aspect_ratio\030\027 \001(\01326.object_d"
      "etection.protos.SSDRandomCropFixedAspect"
      "RatioH\000\022k\n&ssd_random_crop_pad_fixed_asp"
      "ect_ratio\030\030 \001(\01329.object_detection.proto"
      "s.SSDRandomCropPadFixedAspectRatioH\000\022K\n\024"
      "random_vertical_flip\030\031 \001(\0132+.object_dete"
      "ction.protos.RandomVerticalFlipH\000\022F\n\021ran"
      "dom_rotation90\030\032 \001(\0132).object_detection."
      "protos.RandomRotation90H\000\0229\n\013rgb_to_gray"
      "\030\033 \001(\0132\".object_detection.protos.RGBtoGr"
      "ayH\000\022_\n\037convert_class_logits_to_softmax\030"
      "\034 \001(\01324.object_detection.protos.ConvertC"
      "lassLogitsToSoftmaxH\000\022T\n\031random_absolute"
      "_pad_image\030\035 \001(\0132/.object_detection.prot"
      "os.RandomAbsolutePadImageH\000\022R\n\030random_se"
      "lf_concat_image\030\036 \001(\0132..object_detection"
      ".protos.RandomSelfConcatImageH\000\022F\n\021autoa"
      "ugment_image\030\037 \001(\0132).object_detection.pr"
      "otos.AutoAugmentImageH\000\022[\n\034drop_label_pr"
      "obabilistically\030  \001(\01323.object_detection"
      ".protos.DropLabelProbabilisticallyH\000\022<\n\014"
      "remap_labels\030! \001(\0132$.object_detection.pr"
      "otos.RemapLabelsH\000B\024\n\022preprocessing_step"
      "\"v\n\016NormalizeImage\022\027\n\017original_minval\030\001 "
      "\001(\002\022\027\n\017original_maxval\030\002 \001(\002\022\030\n\rtarget_m"
      "inval\030\003 \001(\002:\0010\022\030\n\rtarget_maxval\030\004 \001(\002:\0011"
      "\"9\n\024RandomHorizontalFlip\022!\n\031keypoint_fli"
      "p_permutation\030\001 \003(\005\"7\n\022RandomVerticalFli"
      "p\022!\n\031keypoint_flip_permutation\030\001 \003(\005\"\022\n\020"
      "RandomRotation90\"A\n\025RandomPixelValueScal"
      "e\022\023\n\006minval\030\001 \001(\002:\0030.9\022\023\n\006maxval\030\002 \001(\002:\003"
      "1.1\"L\n\020RandomImageScale\022\034\n\017min_scale_rat"
      "io\030\001 \001(\002:\0030.5\022\032\n\017max_scale_ratio\030\002 \001(\002:\001"
      "2\"+\n\017RandomRGBtoGray\022\030\n\013probability\030\001 \001("
      "\002:\0030.1\"0\n\026RandomAdjustBrightness\022\026\n\tmax_"
      "delta\030\001 \001(\002:\0030.2\"G\n\024RandomAdjustContrast"
      "\022\026\n\tmin_delta\030\001 \001(\002:\0030.8\022\027\n\tmax_delta\030\002 "
      "\001(\002:\0041.25\"*\n\017RandomAdjustHue\022\027\n\tmax_delt"
      "a\030\001 \001(\002:\0040.02\"I\n\026RandomAdjustSaturation\022"
      "\026\n\tmin_delta\030\001 \001(\002:\0030.8\022\027\n\tmax_delta\030\002 \001"
      "(\002:\0041.25\",\n\022RandomDistortColor\022\026\n\016color_"
      "ordering\030\001 \001(\005\"(\n\021RandomJitterBoxes\022\023\n\005r"
      "atio\030\001 \001(\002:\0040.05\"\353\001\n\017RandomCropImage\022\035\n\022"
      "min_object_covered\030\001 \001(\002:\0011\022\036\n\020min_aspec"
      "t_ratio\030\002 \001(\002:\0040.75\022\036\n\020max_aspect_ratio\030"
      "\003 \001(\002:\0041.33\022\025\n\010min_area\030\004 \001(\002:\0030.1\022\023\n\010ma"
      "x_area\030\005 \001(\002:\0011\022\033\n\016overlap_thresh\030\006 \001(\002:"
      "\0030.3\022\030\n\nclip_boxes\030\010 \001(\010:\004true\022\026\n\013random"
      "_coef\030\007 \001(\002:\0010\"\211\001\n\016RandomPadImage\022\030\n\020min"
      "_image_height\030\001 \001(\005\022\027\n\017min_image_width\030\002"
      " \001(\005\022\030\n\020max_image_height\030\003 \001(\005\022\027\n\017max_im"
      "age_width\030\004 \001(\005\022\021\n\tpad_color\030\005 \003(\002\"b\n\026Ra"
      "ndomAbsolutePadImage\022\032\n\022max_height_paddi"
      "ng\030\001 \001(\005\022\031\n\021max_width_padding\030\002 \001(\005\022\021\n\tp"
      "ad_color\030\003 \003(\002\"\277\002\n\022RandomCropPadImage\022\035\n"
      "\022min_object_covered\030\001 \001(\002:\0011\022\036\n\020min_aspe"
      "ct_ratio\030\002 \001(\002:\0040.75\022\036\n\020max_aspect_ratio"
      "\030\003 \001(\002:\0041.33\022\025\n\010min_area\030\004 \001(\002:\0030.1\022\023\n\010m"
      "ax_area\030\005 \001(\002:\0011\022\033\n\016overlap_thresh\030\006 \001(\002"
      ":\0030.3\022\030\n\nclip_boxes\030\013 \001(\010:\004true\022\026\n\013rando"
      "m_coef\030\007 \001(\002:\0010\022\035\n\025min_padded_size_ratio"
      "\030\010 \003(\002\022\035\n\025max_padded_size_ratio\030\t \003(\002\022\021\n"
      "\tpad_color\030\n \003(\002\"i\n\027RandomCropToAspectRa"
      "tio\022\027\n\014aspect_ratio\030\001 \001(\002:\0011\022\033\n\016overlap_"
      "thresh\030\002 \001(\002:\0030.3\022\030\n\nclip_boxes\030\003 \001(\010:\004t"
      "rue\"o\n\022RandomBlackPatches\022\035\n\021max_black_p"
      "atches\030\001 \001(\005:\00210\022\030\n\013probability\030\002 \001(\002:\0030"
      ".5\022 \n\023size_to_image_ratio\030\003 \001(\002:\0030.1\"A\n\022"
      "RandomResizeMethod\022\025\n\rtarget_height\030\001 \001("
      "\005\022\024\n\014target_width\030\002 \001(\005\"\013\n\tRGBtoGray\"\036\n\034"
      "ScaleBoxesToPixelCoordinates\"\300\001\n\013ResizeI"
      "mage\022\022\n\nnew_height\030\001 \001(\005\022\021\n\tnew_width\030\002 "
      "\001(\005\022E\n\006method\030\003 \001(\0162+.object_detection.p"
      "rotos.ResizeImage.Method:\010BILINEAR\"C\n\006Me"
      "thod\022\010\n\004AREA\020\001\022\013\n\007BICUBIC\020\002\022\014\n\010BILINEAR\020"
      "\003\022\024\n\020NEAREST_NEIGHBOR\020\004\"$\n\023SubtractChann"
      "elMean\022\r\n\005means\030\001 \003(\002\"\323\001\n\026SSDRandomCropO"
      "peration\022\032\n\022min_object_covered\030\001 \001(\002\022\030\n\020"
      "min_aspect_ratio\030\002 \001(\002\022\030\n\020max_aspect_rat"
      "io\030\003 \001(\002\022\020\n\010min_area\030\004 \001(\002\022\020\n\010max_area\030\005"
      " \001(\002\022\026\n\016overlap_thresh\030\006 \001(\002\022\030\n\nclip_box"
      "es\030\010 \001(\010:\004true\022\023\n\013random_coef\030\007 \001(\002\"T\n\rS"
      "SDRandomCrop\022C\n\noperations\030\001 \003(\0132/.objec"
      "t_detection.protos.SSDRandomCropOperatio"
      "n\"\323\002\n\031SSDRandomCropPadOperation\022\032\n\022min_o"
      "bject_covered\030\001 \001(\002\022\030\n\020min_aspect_ratio\030"
      "\002 \001(\002\022\030\n\020max_aspect_ratio\030\003 \001(\002\022\020\n\010min_a"
      "rea\030\004 \001(\002\022\020\n\010max_area\030\005 \001(\002\022\026\n\016overlap_t"
      "hresh\030\006 \001(\002\022\030\n\nclip_boxes\030\r \001(\010:\004true\022\023\n"
      "\013random_coef\030\007 \001(\002\022\035\n\025min_padded_size_ra"
      "tio\030\010 \003(\002\022\035\n\025max_padded_size_ratio\030\t \003(\002"
      "\022\023\n\013pad_color_r\030\n \001(\002\022\023\n\013pad_color_g\030\013 \001"
      "(\002\022\023\n\013pad_color_b\030\014 \001(\002\"Z\n\020SSDRandomCrop"
      "Pad\022F\n\noperations\030\001 \003(\01322.object_detecti"
      "on.protos.SSDRandomCropPadOperation\"\257\001\n&"
      "SSDRandomCropFixedAspectRatioOperation\022\032"
      "\n\022min_object_covered\030\001 \001(\002\022\020\n\010min_area\030\004"
      " \001(\002\022\020\n\010max_area\030\005 \001(\002\022\026\n\016overlap_thresh"
      "\030\006 \001(\002\022\030\n\nclip_boxes\030\010 \001(\010:\004true\022\023\n\013rand"
      "om_coef\030\007 \001(\002\"\215\001\n\035SSDRandomCropFixedAspe"
      "ctRatio\022S\n\noperations\030\001 \003(\0132\?.object_det"
      "ection.protos.SSDRandomCropFixedAspectRa"
      "tioOperation\022\027\n\014aspect_ratio\030\002 \001(\002:\0011\"\346\001"
      "\n)SSDRandomCropPadFixedAspectRatioOperat"
      "ion\022\032\n\022min_object_covered\030\001 \001(\002\022\030\n\020min_a"
      "spect_ratio\030\002 \001(\002\022\030\n\020max_aspect_ratio\030\003 "
      "\001(\002\022\020\n\010min_area\030\004 \001(\002\022\020\n\010max_area\030\005 \001(\002\022"
      "\026\n\016overlap_thresh\030\006 \001(\002\022\030\n\nclip_boxes\030\010 "
      "\001(\010:\004true\022\023\n\013random_coef\030\007 \001(\002\"\321\001\n SSDRa"
      "ndomCropPadFixedAspectRatio\022V\n\noperation"
      "s\030\001 \003(\0132B.object_detection.protos.SSDRan"
      "domCropPadFixedAspectRatioOperation\022\027\n\014a"
      "spect_ratio\030\002 \001(\002:\0011\022\035\n\025min_padded_size_"
      "ratio\030\003 \003(\002\022\035\n\025max_padded_size_ratio\030\004 \003"
      "(\002\"5\n\033ConvertClassLogitsToSoftmax\022\026\n\013tem"
      "perature\030\001 \001(\002:\0011\"m\n\025RandomSelfConcatIma"
      "ge\022(\n\033concat_vertical_probability\030\001 \001(\002:"
      "\0030.1\022*\n\035concat_horizontal_probability\030\002 "
      "\001(\002:\0030.1\"+\n\020AutoAugmentImage\022\027\n\013policy_n"
      "ame\030\001 \001(\t:\002v0\"H\n\032DropLabelProbabilistica"
      "lly\022\r\n\005label\030\001 \001(\005\022\033\n\020drop_probability\030\002"
      " \001(\002:\0011\"9\n\013RemapLabels\022\027\n\017original_label"
      "s\030\001 \003(\005\022\021\n\tnew_label\030\002 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/preprocessor.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto

const ::google::protobuf::EnumDescriptor* ResizeImage_Method_descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_enum_descriptors[0];
}
bool ResizeImage_Method_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResizeImage_Method ResizeImage::AREA;
const ResizeImage_Method ResizeImage::BICUBIC;
const ResizeImage_Method ResizeImage::BILINEAR;
const ResizeImage_Method ResizeImage::NEAREST_NEIGHBOR;
const ResizeImage_Method ResizeImage::Method_MIN;
const ResizeImage_Method ResizeImage::Method_MAX;
const int ResizeImage::Method_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreprocessingStep::kNormalizeImageFieldNumber;
const int PreprocessingStep::kRandomHorizontalFlipFieldNumber;
const int PreprocessingStep::kRandomPixelValueScaleFieldNumber;
const int PreprocessingStep::kRandomImageScaleFieldNumber;
const int PreprocessingStep::kRandomRgbToGrayFieldNumber;
const int PreprocessingStep::kRandomAdjustBrightnessFieldNumber;
const int PreprocessingStep::kRandomAdjustContrastFieldNumber;
const int PreprocessingStep::kRandomAdjustHueFieldNumber;
const int PreprocessingStep::kRandomAdjustSaturationFieldNumber;
const int PreprocessingStep::kRandomDistortColorFieldNumber;
const int PreprocessingStep::kRandomJitterBoxesFieldNumber;
const int PreprocessingStep::kRandomCropImageFieldNumber;
const int PreprocessingStep::kRandomPadImageFieldNumber;
const int PreprocessingStep::kRandomCropPadImageFieldNumber;
const int PreprocessingStep::kRandomCropToAspectRatioFieldNumber;
const int PreprocessingStep::kRandomBlackPatchesFieldNumber;
const int PreprocessingStep::kRandomResizeMethodFieldNumber;
const int PreprocessingStep::kScaleBoxesToPixelCoordinatesFieldNumber;
const int PreprocessingStep::kResizeImageFieldNumber;
const int PreprocessingStep::kSubtractChannelMeanFieldNumber;
const int PreprocessingStep::kSsdRandomCropFieldNumber;
const int PreprocessingStep::kSsdRandomCropPadFieldNumber;
const int PreprocessingStep::kSsdRandomCropFixedAspectRatioFieldNumber;
const int PreprocessingStep::kSsdRandomCropPadFixedAspectRatioFieldNumber;
const int PreprocessingStep::kRandomVerticalFlipFieldNumber;
const int PreprocessingStep::kRandomRotation90FieldNumber;
const int PreprocessingStep::kRgbToGrayFieldNumber;
const int PreprocessingStep::kConvertClassLogitsToSoftmaxFieldNumber;
const int PreprocessingStep::kRandomAbsolutePadImageFieldNumber;
const int PreprocessingStep::kRandomSelfConcatImageFieldNumber;
const int PreprocessingStep::kAutoaugmentImageFieldNumber;
const int PreprocessingStep::kDropLabelProbabilisticallyFieldNumber;
const int PreprocessingStep::kRemapLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreprocessingStep::PreprocessingStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.PreprocessingStep)
}
PreprocessingStep::PreprocessingStep(const PreprocessingStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_preprocessing_step();
  switch (from.preprocessing_step_case()) {
    case kNormalizeImage: {
      mutable_normalize_image()->::object_detection::protos::NormalizeImage::MergeFrom(from.normalize_image());
      break;
    }
    case kRandomHorizontalFlip: {
      mutable_random_horizontal_flip()->::object_detection::protos::RandomHorizontalFlip::MergeFrom(from.random_horizontal_flip());
      break;
    }
    case kRandomPixelValueScale: {
      mutable_random_pixel_value_scale()->::object_detection::protos::RandomPixelValueScale::MergeFrom(from.random_pixel_value_scale());
      break;
    }
    case kRandomImageScale: {
      mutable_random_image_scale()->::object_detection::protos::RandomImageScale::MergeFrom(from.random_image_scale());
      break;
    }
    case kRandomRgbToGray: {
      mutable_random_rgb_to_gray()->::object_detection::protos::RandomRGBtoGray::MergeFrom(from.random_rgb_to_gray());
      break;
    }
    case kRandomAdjustBrightness: {
      mutable_random_adjust_brightness()->::object_detection::protos::RandomAdjustBrightness::MergeFrom(from.random_adjust_brightness());
      break;
    }
    case kRandomAdjustContrast: {
      mutable_random_adjust_contrast()->::object_detection::protos::RandomAdjustContrast::MergeFrom(from.random_adjust_contrast());
      break;
    }
    case kRandomAdjustHue: {
      mutable_random_adjust_hue()->::object_detection::protos::RandomAdjustHue::MergeFrom(from.random_adjust_hue());
      break;
    }
    case kRandomAdjustSaturation: {
      mutable_random_adjust_saturation()->::object_detection::protos::RandomAdjustSaturation::MergeFrom(from.random_adjust_saturation());
      break;
    }
    case kRandomDistortColor: {
      mutable_random_distort_color()->::object_detection::protos::RandomDistortColor::MergeFrom(from.random_distort_color());
      break;
    }
    case kRandomJitterBoxes: {
      mutable_random_jitter_boxes()->::object_detection::protos::RandomJitterBoxes::MergeFrom(from.random_jitter_boxes());
      break;
    }
    case kRandomCropImage: {
      mutable_random_crop_image()->::object_detection::protos::RandomCropImage::MergeFrom(from.random_crop_image());
      break;
    }
    case kRandomPadImage: {
      mutable_random_pad_image()->::object_detection::protos::RandomPadImage::MergeFrom(from.random_pad_image());
      break;
    }
    case kRandomCropPadImage: {
      mutable_random_crop_pad_image()->::object_detection::protos::RandomCropPadImage::MergeFrom(from.random_crop_pad_image());
      break;
    }
    case kRandomCropToAspectRatio: {
      mutable_random_crop_to_aspect_ratio()->::object_detection::protos::RandomCropToAspectRatio::MergeFrom(from.random_crop_to_aspect_ratio());
      break;
    }
    case kRandomBlackPatches: {
      mutable_random_black_patches()->::object_detection::protos::RandomBlackPatches::MergeFrom(from.random_black_patches());
      break;
    }
    case kRandomResizeMethod: {
      mutable_random_resize_method()->::object_detection::protos::RandomResizeMethod::MergeFrom(from.random_resize_method());
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      mutable_scale_boxes_to_pixel_coordinates()->::object_detection::protos::ScaleBoxesToPixelCoordinates::MergeFrom(from.scale_boxes_to_pixel_coordinates());
      break;
    }
    case kResizeImage: {
      mutable_resize_image()->::object_detection::protos::ResizeImage::MergeFrom(from.resize_image());
      break;
    }
    case kSubtractChannelMean: {
      mutable_subtract_channel_mean()->::object_detection::protos::SubtractChannelMean::MergeFrom(from.subtract_channel_mean());
      break;
    }
    case kSsdRandomCrop: {
      mutable_ssd_random_crop()->::object_detection::protos::SSDRandomCrop::MergeFrom(from.ssd_random_crop());
      break;
    }
    case kSsdRandomCropPad: {
      mutable_ssd_random_crop_pad()->::object_detection::protos::SSDRandomCropPad::MergeFrom(from.ssd_random_crop_pad());
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      mutable_ssd_random_crop_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropFixedAspectRatio::MergeFrom(from.ssd_random_crop_fixed_aspect_ratio());
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      mutable_ssd_random_crop_pad_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropPadFixedAspectRatio::MergeFrom(from.ssd_random_crop_pad_fixed_aspect_ratio());
      break;
    }
    case kRandomVerticalFlip: {
      mutable_random_vertical_flip()->::object_detection::protos::RandomVerticalFlip::MergeFrom(from.random_vertical_flip());
      break;
    }
    case kRandomRotation90: {
      mutable_random_rotation90()->::object_detection::protos::RandomRotation90::MergeFrom(from.random_rotation90());
      break;
    }
    case kRgbToGray: {
      mutable_rgb_to_gray()->::object_detection::protos::RGBtoGray::MergeFrom(from.rgb_to_gray());
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      mutable_convert_class_logits_to_softmax()->::object_detection::protos::ConvertClassLogitsToSoftmax::MergeFrom(from.convert_class_logits_to_softmax());
      break;
    }
    case kRandomAbsolutePadImage: {
      mutable_random_absolute_pad_image()->::object_detection::protos::RandomAbsolutePadImage::MergeFrom(from.random_absolute_pad_image());
      break;
    }
    case kRandomSelfConcatImage: {
      mutable_random_self_concat_image()->::object_detection::protos::RandomSelfConcatImage::MergeFrom(from.random_self_concat_image());
      break;
    }
    case kAutoaugmentImage: {
      mutable_autoaugment_image()->::object_detection::protos::AutoAugmentImage::MergeFrom(from.autoaugment_image());
      break;
    }
    case kDropLabelProbabilistically: {
      mutable_drop_label_probabilistically()->::object_detection::protos::DropLabelProbabilistically::MergeFrom(from.drop_label_probabilistically());
      break;
    }
    case kRemapLabels: {
      mutable_remap_labels()->::object_detection::protos::RemapLabels::MergeFrom(from.remap_labels());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.PreprocessingStep)
}

void PreprocessingStep::SharedCtor() {
  _cached_size_ = 0;
  clear_has_preprocessing_step();
}

PreprocessingStep::~PreprocessingStep() {
  // @@protoc_insertion_point(destructor:object_detection.protos.PreprocessingStep)
  SharedDtor();
}

void PreprocessingStep::SharedDtor() {
  if (has_preprocessing_step()) {
    clear_preprocessing_step();
  }
}

void PreprocessingStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreprocessingStep::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreprocessingStep& PreprocessingStep::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreprocessingStep* PreprocessingStep::New(::google::protobuf::Arena* arena) const {
  PreprocessingStep* n = new PreprocessingStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreprocessingStep::clear_preprocessing_step() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.PreprocessingStep)
  switch (preprocessing_step_case()) {
    case kNormalizeImage: {
      delete preprocessing_step_.normalize_image_;
      break;
    }
    case kRandomHorizontalFlip: {
      delete preprocessing_step_.random_horizontal_flip_;
      break;
    }
    case kRandomPixelValueScale: {
      delete preprocessing_step_.random_pixel_value_scale_;
      break;
    }
    case kRandomImageScale: {
      delete preprocessing_step_.random_image_scale_;
      break;
    }
    case kRandomRgbToGray: {
      delete preprocessing_step_.random_rgb_to_gray_;
      break;
    }
    case kRandomAdjustBrightness: {
      delete preprocessing_step_.random_adjust_brightness_;
      break;
    }
    case kRandomAdjustContrast: {
      delete preprocessing_step_.random_adjust_contrast_;
      break;
    }
    case kRandomAdjustHue: {
      delete preprocessing_step_.random_adjust_hue_;
      break;
    }
    case kRandomAdjustSaturation: {
      delete preprocessing_step_.random_adjust_saturation_;
      break;
    }
    case kRandomDistortColor: {
      delete preprocessing_step_.random_distort_color_;
      break;
    }
    case kRandomJitterBoxes: {
      delete preprocessing_step_.random_jitter_boxes_;
      break;
    }
    case kRandomCropImage: {
      delete preprocessing_step_.random_crop_image_;
      break;
    }
    case kRandomPadImage: {
      delete preprocessing_step_.random_pad_image_;
      break;
    }
    case kRandomCropPadImage: {
      delete preprocessing_step_.random_crop_pad_image_;
      break;
    }
    case kRandomCropToAspectRatio: {
      delete preprocessing_step_.random_crop_to_aspect_ratio_;
      break;
    }
    case kRandomBlackPatches: {
      delete preprocessing_step_.random_black_patches_;
      break;
    }
    case kRandomResizeMethod: {
      delete preprocessing_step_.random_resize_method_;
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      delete preprocessing_step_.scale_boxes_to_pixel_coordinates_;
      break;
    }
    case kResizeImage: {
      delete preprocessing_step_.resize_image_;
      break;
    }
    case kSubtractChannelMean: {
      delete preprocessing_step_.subtract_channel_mean_;
      break;
    }
    case kSsdRandomCrop: {
      delete preprocessing_step_.ssd_random_crop_;
      break;
    }
    case kSsdRandomCropPad: {
      delete preprocessing_step_.ssd_random_crop_pad_;
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      delete preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_;
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      delete preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_;
      break;
    }
    case kRandomVerticalFlip: {
      delete preprocessing_step_.random_vertical_flip_;
      break;
    }
    case kRandomRotation90: {
      delete preprocessing_step_.random_rotation90_;
      break;
    }
    case kRgbToGray: {
      delete preprocessing_step_.rgb_to_gray_;
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      delete preprocessing_step_.convert_class_logits_to_softmax_;
      break;
    }
    case kRandomAbsolutePadImage: {
      delete preprocessing_step_.random_absolute_pad_image_;
      break;
    }
    case kRandomSelfConcatImage: {
      delete preprocessing_step_.random_self_concat_image_;
      break;
    }
    case kAutoaugmentImage: {
      delete preprocessing_step_.autoaugment_image_;
      break;
    }
    case kDropLabelProbabilistically: {
      delete preprocessing_step_.drop_label_probabilistically_;
      break;
    }
    case kRemapLabels: {
      delete preprocessing_step_.remap_labels_;
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}


void PreprocessingStep::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.PreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_preprocessing_step();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreprocessingStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.PreprocessingStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.NormalizeImage normalize_image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normalize_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomHorizontalFlip random_horizontal_flip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_horizontal_flip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomPixelValueScale random_pixel_value_scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_pixel_value_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomImageScale random_image_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_image_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomRGBtoGray random_rgb_to_gray = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_rgb_to_gray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomAdjustBrightness random_adjust_brightness = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_adjust_brightness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomAdjustContrast random_adjust_contrast = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_adjust_contrast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomAdjustHue random_adjust_hue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_adjust_hue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomAdjustSaturation random_adjust_saturation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_adjust_saturation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomDistortColor random_distort_color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_distort_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomJitterBoxes random_jitter_boxes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_jitter_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomCropImage random_crop_image = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_crop_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomPadImage random_pad_image = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_pad_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomCropPadImage random_crop_pad_image = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_crop_pad_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomCropToAspectRatio random_crop_to_aspect_ratio = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_crop_to_aspect_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomBlackPatches random_black_patches = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_black_patches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomResizeMethod random_resize_method = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_resize_method()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ScaleBoxesToPixelCoordinates scale_boxes_to_pixel_coordinates = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale_boxes_to_pixel_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeImage resize_image = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resize_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SubtractChannelMean subtract_channel_mean = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subtract_channel_mean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SSDRandomCrop ssd_random_crop = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssd_random_crop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SSDRandomCropPad ssd_random_crop_pad = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssd_random_crop_pad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SSDRandomCropFixedAspectRatio ssd_random_crop_fixed_aspect_ratio = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssd_random_crop_fixed_aspect_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SSDRandomCropPadFixedAspectRatio ssd_random_crop_pad_fixed_aspect_ratio = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssd_random_crop_pad_fixed_aspect_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomVerticalFlip random_vertical_flip = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_vertical_flip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomRotation90 random_rotation90 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_rotation90()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RGBtoGray rgb_to_gray = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb_to_gray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ConvertClassLogitsToSoftmax convert_class_logits_to_softmax = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convert_class_logits_to_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomAbsolutePadImage random_absolute_pad_image = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_absolute_pad_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomSelfConcatImage random_self_concat_image = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_self_concat_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.AutoAugmentImage autoaugment_image = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autoaugment_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.DropLabelProbabilistically drop_label_probabilistically = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drop_label_probabilistically()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RemapLabels remap_labels = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remap_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.PreprocessingStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.PreprocessingStep)
  return false;
#undef DO_
}

void PreprocessingStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.PreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (preprocessing_step_case()) {
    case kNormalizeImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *preprocessing_step_.normalize_image_, output);
      break;
    case kRandomHorizontalFlip:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *preprocessing_step_.random_horizontal_flip_, output);
      break;
    case kRandomPixelValueScale:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *preprocessing_step_.random_pixel_value_scale_, output);
      break;
    case kRandomImageScale:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *preprocessing_step_.random_image_scale_, output);
      break;
    case kRandomRgbToGray:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *preprocessing_step_.random_rgb_to_gray_, output);
      break;
    case kRandomAdjustBrightness:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *preprocessing_step_.random_adjust_brightness_, output);
      break;
    case kRandomAdjustContrast:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *preprocessing_step_.random_adjust_contrast_, output);
      break;
    case kRandomAdjustHue:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *preprocessing_step_.random_adjust_hue_, output);
      break;
    case kRandomAdjustSaturation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *preprocessing_step_.random_adjust_saturation_, output);
      break;
    case kRandomDistortColor:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *preprocessing_step_.random_distort_color_, output);
      break;
    case kRandomJitterBoxes:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *preprocessing_step_.random_jitter_boxes_, output);
      break;
    case kRandomCropImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *preprocessing_step_.random_crop_image_, output);
      break;
    case kRandomPadImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *preprocessing_step_.random_pad_image_, output);
      break;
    case kRandomCropPadImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, *preprocessing_step_.random_crop_pad_image_, output);
      break;
    case kRandomCropToAspectRatio:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, *preprocessing_step_.random_crop_to_aspect_ratio_, output);
      break;
    case kRandomBlackPatches:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, *preprocessing_step_.random_black_patches_, output);
      break;
    case kRandomResizeMethod:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, *preprocessing_step_.random_resize_method_, output);
      break;
    case kScaleBoxesToPixelCoordinates:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, *preprocessing_step_.scale_boxes_to_pixel_coordinates_, output);
      break;
    case kResizeImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, *preprocessing_step_.resize_image_, output);
      break;
    case kSubtractChannelMean:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *preprocessing_step_.subtract_channel_mean_, output);
      break;
    case kSsdRandomCrop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, *preprocessing_step_.ssd_random_crop_, output);
      break;
    case kSsdRandomCropPad:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, *preprocessing_step_.ssd_random_crop_pad_, output);
      break;
    case kSsdRandomCropFixedAspectRatio:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, *preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_, output);
      break;
    case kSsdRandomCropPadFixedAspectRatio:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, *preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_, output);
      break;
    case kRandomVerticalFlip:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, *preprocessing_step_.random_vertical_flip_, output);
      break;
    case kRandomRotation90:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, *preprocessing_step_.random_rotation90_, output);
      break;
    case kRgbToGray:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, *preprocessing_step_.rgb_to_gray_, output);
      break;
    case kConvertClassLogitsToSoftmax:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, *preprocessing_step_.convert_class_logits_to_softmax_, output);
      break;
    case kRandomAbsolutePadImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, *preprocessing_step_.random_absolute_pad_image_, output);
      break;
    case kRandomSelfConcatImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, *preprocessing_step_.random_self_concat_image_, output);
      break;
    case kAutoaugmentImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, *preprocessing_step_.autoaugment_image_, output);
      break;
    case kDropLabelProbabilistically:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, *preprocessing_step_.drop_label_probabilistically_, output);
      break;
    case kRemapLabels:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, *preprocessing_step_.remap_labels_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.PreprocessingStep)
}

::google::protobuf::uint8* PreprocessingStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.PreprocessingStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (preprocessing_step_case()) {
    case kNormalizeImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *preprocessing_step_.normalize_image_, deterministic, target);
      break;
    case kRandomHorizontalFlip:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *preprocessing_step_.random_horizontal_flip_, deterministic, target);
      break;
    case kRandomPixelValueScale:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *preprocessing_step_.random_pixel_value_scale_, deterministic, target);
      break;
    case kRandomImageScale:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *preprocessing_step_.random_image_scale_, deterministic, target);
      break;
    case kRandomRgbToGray:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *preprocessing_step_.random_rgb_to_gray_, deterministic, target);
      break;
    case kRandomAdjustBrightness:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *preprocessing_step_.random_adjust_brightness_, deterministic, target);
      break;
    case kRandomAdjustContrast:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *preprocessing_step_.random_adjust_contrast_, deterministic, target);
      break;
    case kRandomAdjustHue:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *preprocessing_step_.random_adjust_hue_, deterministic, target);
      break;
    case kRandomAdjustSaturation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *preprocessing_step_.random_adjust_saturation_, deterministic, target);
      break;
    case kRandomDistortColor:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *preprocessing_step_.random_distort_color_, deterministic, target);
      break;
    case kRandomJitterBoxes:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *preprocessing_step_.random_jitter_boxes_, deterministic, target);
      break;
    case kRandomCropImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *preprocessing_step_.random_crop_image_, deterministic, target);
      break;
    case kRandomPadImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *preprocessing_step_.random_pad_image_, deterministic, target);
      break;
    case kRandomCropPadImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          14, *preprocessing_step_.random_crop_pad_image_, deterministic, target);
      break;
    case kRandomCropToAspectRatio:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          15, *preprocessing_step_.random_crop_to_aspect_ratio_, deterministic, target);
      break;
    case kRandomBlackPatches:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          16, *preprocessing_step_.random_black_patches_, deterministic, target);
      break;
    case kRandomResizeMethod:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          17, *preprocessing_step_.random_resize_method_, deterministic, target);
      break;
    case kScaleBoxesToPixelCoordinates:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          18, *preprocessing_step_.scale_boxes_to_pixel_coordinates_, deterministic, target);
      break;
    case kResizeImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          19, *preprocessing_step_.resize_image_, deterministic, target);
      break;
    case kSubtractChannelMean:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          20, *preprocessing_step_.subtract_channel_mean_, deterministic, target);
      break;
    case kSsdRandomCrop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          21, *preprocessing_step_.ssd_random_crop_, deterministic, target);
      break;
    case kSsdRandomCropPad:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          22, *preprocessing_step_.ssd_random_crop_pad_, deterministic, target);
      break;
    case kSsdRandomCropFixedAspectRatio:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          23, *preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_, deterministic, target);
      break;
    case kSsdRandomCropPadFixedAspectRatio:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          24, *preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_, deterministic, target);
      break;
    case kRandomVerticalFlip:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          25, *preprocessing_step_.random_vertical_flip_, deterministic, target);
      break;
    case kRandomRotation90:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          26, *preprocessing_step_.random_rotation90_, deterministic, target);
      break;
    case kRgbToGray:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          27, *preprocessing_step_.rgb_to_gray_, deterministic, target);
      break;
    case kConvertClassLogitsToSoftmax:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          28, *preprocessing_step_.convert_class_logits_to_softmax_, deterministic, target);
      break;
    case kRandomAbsolutePadImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          29, *preprocessing_step_.random_absolute_pad_image_, deterministic, target);
      break;
    case kRandomSelfConcatImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          30, *preprocessing_step_.random_self_concat_image_, deterministic, target);
      break;
    case kAutoaugmentImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          31, *preprocessing_step_.autoaugment_image_, deterministic, target);
      break;
    case kDropLabelProbabilistically:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          32, *preprocessing_step_.drop_label_probabilistically_, deterministic, target);
      break;
    case kRemapLabels:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          33, *preprocessing_step_.remap_labels_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.PreprocessingStep)
  return target;
}

size_t PreprocessingStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.PreprocessingStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (preprocessing_step_case()) {
    // optional .object_detection.protos.NormalizeImage normalize_image = 1;
    case kNormalizeImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.normalize_image_);
      break;
    }
    // optional .object_detection.protos.RandomHorizontalFlip random_horizontal_flip = 2;
    case kRandomHorizontalFlip: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_horizontal_flip_);
      break;
    }
    // optional .object_detection.protos.RandomPixelValueScale random_pixel_value_scale = 3;
    case kRandomPixelValueScale: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_pixel_value_scale_);
      break;
    }
    // optional .object_detection.protos.RandomImageScale random_image_scale = 4;
    case kRandomImageScale: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_image_scale_);
      break;
    }
    // optional .object_detection.protos.RandomRGBtoGray random_rgb_to_gray = 5;
    case kRandomRgbToGray: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_rgb_to_gray_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustBrightness random_adjust_brightness = 6;
    case kRandomAdjustBrightness: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_adjust_brightness_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustContrast random_adjust_contrast = 7;
    case kRandomAdjustContrast: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_adjust_contrast_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustHue random_adjust_hue = 8;
    case kRandomAdjustHue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_adjust_hue_);
      break;
    }
    // optional .object_detection.protos.RandomAdjustSaturation random_adjust_saturation = 9;
    case kRandomAdjustSaturation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_adjust_saturation_);
      break;
    }
    // optional .object_detection.protos.RandomDistortColor random_distort_color = 10;
    case kRandomDistortColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_distort_color_);
      break;
    }
    // optional .object_detection.protos.RandomJitterBoxes random_jitter_boxes = 11;
    case kRandomJitterBoxes: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_jitter_boxes_);
      break;
    }
    // optional .object_detection.protos.RandomCropImage random_crop_image = 12;
    case kRandomCropImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_crop_image_);
      break;
    }
    // optional .object_detection.protos.RandomPadImage random_pad_image = 13;
    case kRandomPadImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_pad_image_);
      break;
    }
    // optional .object_detection.protos.RandomCropPadImage random_crop_pad_image = 14;
    case kRandomCropPadImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_crop_pad_image_);
      break;
    }
    // optional .object_detection.protos.RandomCropToAspectRatio random_crop_to_aspect_ratio = 15;
    case kRandomCropToAspectRatio: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_crop_to_aspect_ratio_);
      break;
    }
    // optional .object_detection.protos.RandomBlackPatches random_black_patches = 16;
    case kRandomBlackPatches: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_black_patches_);
      break;
    }
    // optional .object_detection.protos.RandomResizeMethod random_resize_method = 17;
    case kRandomResizeMethod: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_resize_method_);
      break;
    }
    // optional .object_detection.protos.ScaleBoxesToPixelCoordinates scale_boxes_to_pixel_coordinates = 18;
    case kScaleBoxesToPixelCoordinates: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.scale_boxes_to_pixel_coordinates_);
      break;
    }
    // optional .object_detection.protos.ResizeImage resize_image = 19;
    case kResizeImage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.resize_image_);
      break;
    }
    // optional .object_detection.protos.SubtractChannelMean subtract_channel_mean = 20;
    case kSubtractChannelMean: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.subtract_channel_mean_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCrop ssd_random_crop = 21;
    case kSsdRandomCrop: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.ssd_random_crop_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCropPad ssd_random_crop_pad = 22;
    case kSsdRandomCropPad: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.ssd_random_crop_pad_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCropFixedAspectRatio ssd_random_crop_fixed_aspect_ratio = 23;
    case kSsdRandomCropFixedAspectRatio: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_);
      break;
    }
    // optional .object_detection.protos.SSDRandomCropPadFixedAspectRatio ssd_random_crop_pad_fixed_aspect_ratio = 24;
    case kSsdRandomCropPadFixedAspectRatio: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_);
      break;
    }
    // optional .object_detection.protos.RandomVerticalFlip random_vertical_flip = 25;
    case kRandomVerticalFlip: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_vertical_flip_);
      break;
    }
    // optional .object_detection.protos.RandomRotation90 random_rotation90 = 26;
    case kRandomRotation90: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_rotation90_);
      break;
    }
    // optional .object_detection.protos.RGBtoGray rgb_to_gray = 27;
    case kRgbToGray: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.rgb_to_gray_);
      break;
    }
    // optional .object_detection.protos.ConvertClassLogitsToSoftmax convert_class_logits_to_softmax = 28;
    case kConvertClassLogitsToSoftmax: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.convert_class_logits_to_softmax_);
      break;
    }
    // optional .object_detection.protos.RandomAbsolutePadImage random_absolute_pad_image = 29;
    case kRandomAbsolutePadImage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_absolute_pad_image_);
      break;
    }
    // optional .object_detection.protos.RandomSelfConcatImage random_self_concat_image = 30;
    case kRandomSelfConcatImage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.random_self_concat_image_);
      break;
    }
    // optional .object_detection.protos.AutoAugmentImage autoaugment_image = 31;
    case kAutoaugmentImage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.autoaugment_image_);
      break;
    }
    // optional .object_detection.protos.DropLabelProbabilistically drop_label_probabilistically = 32;
    case kDropLabelProbabilistically: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.drop_label_probabilistically_);
      break;
    }
    // optional .object_detection.protos.RemapLabels remap_labels = 33;
    case kRemapLabels: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *preprocessing_step_.remap_labels_);
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreprocessingStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  const PreprocessingStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreprocessingStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.PreprocessingStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.PreprocessingStep)
    MergeFrom(*source);
  }
}

void PreprocessingStep::MergeFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.PreprocessingStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.preprocessing_step_case()) {
    case kNormalizeImage: {
      mutable_normalize_image()->::object_detection::protos::NormalizeImage::MergeFrom(from.normalize_image());
      break;
    }
    case kRandomHorizontalFlip: {
      mutable_random_horizontal_flip()->::object_detection::protos::RandomHorizontalFlip::MergeFrom(from.random_horizontal_flip());
      break;
    }
    case kRandomPixelValueScale: {
      mutable_random_pixel_value_scale()->::object_detection::protos::RandomPixelValueScale::MergeFrom(from.random_pixel_value_scale());
      break;
    }
    case kRandomImageScale: {
      mutable_random_image_scale()->::object_detection::protos::RandomImageScale::MergeFrom(from.random_image_scale());
      break;
    }
    case kRandomRgbToGray: {
      mutable_random_rgb_to_gray()->::object_detection::protos::RandomRGBtoGray::MergeFrom(from.random_rgb_to_gray());
      break;
    }
    case kRandomAdjustBrightness: {
      mutable_random_adjust_brightness()->::object_detection::protos::RandomAdjustBrightness::MergeFrom(from.random_adjust_brightness());
      break;
    }
    case kRandomAdjustContrast: {
      mutable_random_adjust_contrast()->::object_detection::protos::RandomAdjustContrast::MergeFrom(from.random_adjust_contrast());
      break;
    }
    case kRandomAdjustHue: {
      mutable_random_adjust_hue()->::object_detection::protos::RandomAdjustHue::MergeFrom(from.random_adjust_hue());
      break;
    }
    case kRandomAdjustSaturation: {
      mutable_random_adjust_saturation()->::object_detection::protos::RandomAdjustSaturation::MergeFrom(from.random_adjust_saturation());
      break;
    }
    case kRandomDistortColor: {
      mutable_random_distort_color()->::object_detection::protos::RandomDistortColor::MergeFrom(from.random_distort_color());
      break;
    }
    case kRandomJitterBoxes: {
      mutable_random_jitter_boxes()->::object_detection::protos::RandomJitterBoxes::MergeFrom(from.random_jitter_boxes());
      break;
    }
    case kRandomCropImage: {
      mutable_random_crop_image()->::object_detection::protos::RandomCropImage::MergeFrom(from.random_crop_image());
      break;
    }
    case kRandomPadImage: {
      mutable_random_pad_image()->::object_detection::protos::RandomPadImage::MergeFrom(from.random_pad_image());
      break;
    }
    case kRandomCropPadImage: {
      mutable_random_crop_pad_image()->::object_detection::protos::RandomCropPadImage::MergeFrom(from.random_crop_pad_image());
      break;
    }
    case kRandomCropToAspectRatio: {
      mutable_random_crop_to_aspect_ratio()->::object_detection::protos::RandomCropToAspectRatio::MergeFrom(from.random_crop_to_aspect_ratio());
      break;
    }
    case kRandomBlackPatches: {
      mutable_random_black_patches()->::object_detection::protos::RandomBlackPatches::MergeFrom(from.random_black_patches());
      break;
    }
    case kRandomResizeMethod: {
      mutable_random_resize_method()->::object_detection::protos::RandomResizeMethod::MergeFrom(from.random_resize_method());
      break;
    }
    case kScaleBoxesToPixelCoordinates: {
      mutable_scale_boxes_to_pixel_coordinates()->::object_detection::protos::ScaleBoxesToPixelCoordinates::MergeFrom(from.scale_boxes_to_pixel_coordinates());
      break;
    }
    case kResizeImage: {
      mutable_resize_image()->::object_detection::protos::ResizeImage::MergeFrom(from.resize_image());
      break;
    }
    case kSubtractChannelMean: {
      mutable_subtract_channel_mean()->::object_detection::protos::SubtractChannelMean::MergeFrom(from.subtract_channel_mean());
      break;
    }
    case kSsdRandomCrop: {
      mutable_ssd_random_crop()->::object_detection::protos::SSDRandomCrop::MergeFrom(from.ssd_random_crop());
      break;
    }
    case kSsdRandomCropPad: {
      mutable_ssd_random_crop_pad()->::object_detection::protos::SSDRandomCropPad::MergeFrom(from.ssd_random_crop_pad());
      break;
    }
    case kSsdRandomCropFixedAspectRatio: {
      mutable_ssd_random_crop_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropFixedAspectRatio::MergeFrom(from.ssd_random_crop_fixed_aspect_ratio());
      break;
    }
    case kSsdRandomCropPadFixedAspectRatio: {
      mutable_ssd_random_crop_pad_fixed_aspect_ratio()->::object_detection::protos::SSDRandomCropPadFixedAspectRatio::MergeFrom(from.ssd_random_crop_pad_fixed_aspect_ratio());
      break;
    }
    case kRandomVerticalFlip: {
      mutable_random_vertical_flip()->::object_detection::protos::RandomVerticalFlip::MergeFrom(from.random_vertical_flip());
      break;
    }
    case kRandomRotation90: {
      mutable_random_rotation90()->::object_detection::protos::RandomRotation90::MergeFrom(from.random_rotation90());
      break;
    }
    case kRgbToGray: {
      mutable_rgb_to_gray()->::object_detection::protos::RGBtoGray::MergeFrom(from.rgb_to_gray());
      break;
    }
    case kConvertClassLogitsToSoftmax: {
      mutable_convert_class_logits_to_softmax()->::object_detection::protos::ConvertClassLogitsToSoftmax::MergeFrom(from.convert_class_logits_to_softmax());
      break;
    }
    case kRandomAbsolutePadImage: {
      mutable_random_absolute_pad_image()->::object_detection::protos::RandomAbsolutePadImage::MergeFrom(from.random_absolute_pad_image());
      break;
    }
    case kRandomSelfConcatImage: {
      mutable_random_self_concat_image()->::object_detection::protos::RandomSelfConcatImage::MergeFrom(from.random_self_concat_image());
      break;
    }
    case kAutoaugmentImage: {
      mutable_autoaugment_image()->::object_detection::protos::AutoAugmentImage::MergeFrom(from.autoaugment_image());
      break;
    }
    case kDropLabelProbabilistically: {
      mutable_drop_label_probabilistically()->::object_detection::protos::DropLabelProbabilistically::MergeFrom(from.drop_label_probabilistically());
      break;
    }
    case kRemapLabels: {
      mutable_remap_labels()->::object_detection::protos::RemapLabels::MergeFrom(from.remap_labels());
      break;
    }
    case PREPROCESSING_STEP_NOT_SET: {
      break;
    }
  }
}

void PreprocessingStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessingStep::CopyFrom(const PreprocessingStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.PreprocessingStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessingStep::IsInitialized() const {
  return true;
}

void PreprocessingStep::Swap(PreprocessingStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreprocessingStep::InternalSwap(PreprocessingStep* other) {
  using std::swap;
  swap(preprocessing_step_, other->preprocessing_step_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreprocessingStep::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreprocessingStep

// optional .object_detection.protos.NormalizeImage normalize_image = 1;
bool PreprocessingStep::has_normalize_image() const {
  return preprocessing_step_case() == kNormalizeImage;
}
void PreprocessingStep::set_has_normalize_image() {
  _oneof_case_[0] = kNormalizeImage;
}
void PreprocessingStep::clear_normalize_image() {
  if (has_normalize_image()) {
    delete preprocessing_step_.normalize_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::NormalizeImage& PreprocessingStep::normalize_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.normalize_image)
  return has_normalize_image()
      ? *preprocessing_step_.normalize_image_
      : ::object_detection::protos::NormalizeImage::default_instance();
}
::object_detection::protos::NormalizeImage* PreprocessingStep::mutable_normalize_image() {
  if (!has_normalize_image()) {
    clear_preprocessing_step();
    set_has_normalize_image();
    preprocessing_step_.normalize_image_ = new ::object_detection::protos::NormalizeImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.normalize_image)
  return preprocessing_step_.normalize_image_;
}
::object_detection::protos::NormalizeImage* PreprocessingStep::release_normalize_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.normalize_image)
  if (has_normalize_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::NormalizeImage* temp = preprocessing_step_.normalize_image_;
    preprocessing_step_.normalize_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_normalize_image(::object_detection::protos::NormalizeImage* normalize_image) {
  clear_preprocessing_step();
  if (normalize_image) {
    set_has_normalize_image();
    preprocessing_step_.normalize_image_ = normalize_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.normalize_image)
}

// optional .object_detection.protos.RandomHorizontalFlip random_horizontal_flip = 2;
bool PreprocessingStep::has_random_horizontal_flip() const {
  return preprocessing_step_case() == kRandomHorizontalFlip;
}
void PreprocessingStep::set_has_random_horizontal_flip() {
  _oneof_case_[0] = kRandomHorizontalFlip;
}
void PreprocessingStep::clear_random_horizontal_flip() {
  if (has_random_horizontal_flip()) {
    delete preprocessing_step_.random_horizontal_flip_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomHorizontalFlip& PreprocessingStep::random_horizontal_flip() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_horizontal_flip)
  return has_random_horizontal_flip()
      ? *preprocessing_step_.random_horizontal_flip_
      : ::object_detection::protos::RandomHorizontalFlip::default_instance();
}
::object_detection::protos::RandomHorizontalFlip* PreprocessingStep::mutable_random_horizontal_flip() {
  if (!has_random_horizontal_flip()) {
    clear_preprocessing_step();
    set_has_random_horizontal_flip();
    preprocessing_step_.random_horizontal_flip_ = new ::object_detection::protos::RandomHorizontalFlip;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_horizontal_flip)
  return preprocessing_step_.random_horizontal_flip_;
}
::object_detection::protos::RandomHorizontalFlip* PreprocessingStep::release_random_horizontal_flip() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_horizontal_flip)
  if (has_random_horizontal_flip()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomHorizontalFlip* temp = preprocessing_step_.random_horizontal_flip_;
    preprocessing_step_.random_horizontal_flip_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_horizontal_flip(::object_detection::protos::RandomHorizontalFlip* random_horizontal_flip) {
  clear_preprocessing_step();
  if (random_horizontal_flip) {
    set_has_random_horizontal_flip();
    preprocessing_step_.random_horizontal_flip_ = random_horizontal_flip;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_horizontal_flip)
}

// optional .object_detection.protos.RandomPixelValueScale random_pixel_value_scale = 3;
bool PreprocessingStep::has_random_pixel_value_scale() const {
  return preprocessing_step_case() == kRandomPixelValueScale;
}
void PreprocessingStep::set_has_random_pixel_value_scale() {
  _oneof_case_[0] = kRandomPixelValueScale;
}
void PreprocessingStep::clear_random_pixel_value_scale() {
  if (has_random_pixel_value_scale()) {
    delete preprocessing_step_.random_pixel_value_scale_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomPixelValueScale& PreprocessingStep::random_pixel_value_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_pixel_value_scale)
  return has_random_pixel_value_scale()
      ? *preprocessing_step_.random_pixel_value_scale_
      : ::object_detection::protos::RandomPixelValueScale::default_instance();
}
::object_detection::protos::RandomPixelValueScale* PreprocessingStep::mutable_random_pixel_value_scale() {
  if (!has_random_pixel_value_scale()) {
    clear_preprocessing_step();
    set_has_random_pixel_value_scale();
    preprocessing_step_.random_pixel_value_scale_ = new ::object_detection::protos::RandomPixelValueScale;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_pixel_value_scale)
  return preprocessing_step_.random_pixel_value_scale_;
}
::object_detection::protos::RandomPixelValueScale* PreprocessingStep::release_random_pixel_value_scale() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_pixel_value_scale)
  if (has_random_pixel_value_scale()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomPixelValueScale* temp = preprocessing_step_.random_pixel_value_scale_;
    preprocessing_step_.random_pixel_value_scale_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_pixel_value_scale(::object_detection::protos::RandomPixelValueScale* random_pixel_value_scale) {
  clear_preprocessing_step();
  if (random_pixel_value_scale) {
    set_has_random_pixel_value_scale();
    preprocessing_step_.random_pixel_value_scale_ = random_pixel_value_scale;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_pixel_value_scale)
}

// optional .object_detection.protos.RandomImageScale random_image_scale = 4;
bool PreprocessingStep::has_random_image_scale() const {
  return preprocessing_step_case() == kRandomImageScale;
}
void PreprocessingStep::set_has_random_image_scale() {
  _oneof_case_[0] = kRandomImageScale;
}
void PreprocessingStep::clear_random_image_scale() {
  if (has_random_image_scale()) {
    delete preprocessing_step_.random_image_scale_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomImageScale& PreprocessingStep::random_image_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_image_scale)
  return has_random_image_scale()
      ? *preprocessing_step_.random_image_scale_
      : ::object_detection::protos::RandomImageScale::default_instance();
}
::object_detection::protos::RandomImageScale* PreprocessingStep::mutable_random_image_scale() {
  if (!has_random_image_scale()) {
    clear_preprocessing_step();
    set_has_random_image_scale();
    preprocessing_step_.random_image_scale_ = new ::object_detection::protos::RandomImageScale;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_image_scale)
  return preprocessing_step_.random_image_scale_;
}
::object_detection::protos::RandomImageScale* PreprocessingStep::release_random_image_scale() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_image_scale)
  if (has_random_image_scale()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomImageScale* temp = preprocessing_step_.random_image_scale_;
    preprocessing_step_.random_image_scale_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_image_scale(::object_detection::protos::RandomImageScale* random_image_scale) {
  clear_preprocessing_step();
  if (random_image_scale) {
    set_has_random_image_scale();
    preprocessing_step_.random_image_scale_ = random_image_scale;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_image_scale)
}

// optional .object_detection.protos.RandomRGBtoGray random_rgb_to_gray = 5;
bool PreprocessingStep::has_random_rgb_to_gray() const {
  return preprocessing_step_case() == kRandomRgbToGray;
}
void PreprocessingStep::set_has_random_rgb_to_gray() {
  _oneof_case_[0] = kRandomRgbToGray;
}
void PreprocessingStep::clear_random_rgb_to_gray() {
  if (has_random_rgb_to_gray()) {
    delete preprocessing_step_.random_rgb_to_gray_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomRGBtoGray& PreprocessingStep::random_rgb_to_gray() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_rgb_to_gray)
  return has_random_rgb_to_gray()
      ? *preprocessing_step_.random_rgb_to_gray_
      : ::object_detection::protos::RandomRGBtoGray::default_instance();
}
::object_detection::protos::RandomRGBtoGray* PreprocessingStep::mutable_random_rgb_to_gray() {
  if (!has_random_rgb_to_gray()) {
    clear_preprocessing_step();
    set_has_random_rgb_to_gray();
    preprocessing_step_.random_rgb_to_gray_ = new ::object_detection::protos::RandomRGBtoGray;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_rgb_to_gray)
  return preprocessing_step_.random_rgb_to_gray_;
}
::object_detection::protos::RandomRGBtoGray* PreprocessingStep::release_random_rgb_to_gray() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_rgb_to_gray)
  if (has_random_rgb_to_gray()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomRGBtoGray* temp = preprocessing_step_.random_rgb_to_gray_;
    preprocessing_step_.random_rgb_to_gray_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_rgb_to_gray(::object_detection::protos::RandomRGBtoGray* random_rgb_to_gray) {
  clear_preprocessing_step();
  if (random_rgb_to_gray) {
    set_has_random_rgb_to_gray();
    preprocessing_step_.random_rgb_to_gray_ = random_rgb_to_gray;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_rgb_to_gray)
}

// optional .object_detection.protos.RandomAdjustBrightness random_adjust_brightness = 6;
bool PreprocessingStep::has_random_adjust_brightness() const {
  return preprocessing_step_case() == kRandomAdjustBrightness;
}
void PreprocessingStep::set_has_random_adjust_brightness() {
  _oneof_case_[0] = kRandomAdjustBrightness;
}
void PreprocessingStep::clear_random_adjust_brightness() {
  if (has_random_adjust_brightness()) {
    delete preprocessing_step_.random_adjust_brightness_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomAdjustBrightness& PreprocessingStep::random_adjust_brightness() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_adjust_brightness)
  return has_random_adjust_brightness()
      ? *preprocessing_step_.random_adjust_brightness_
      : ::object_detection::protos::RandomAdjustBrightness::default_instance();
}
::object_detection::protos::RandomAdjustBrightness* PreprocessingStep::mutable_random_adjust_brightness() {
  if (!has_random_adjust_brightness()) {
    clear_preprocessing_step();
    set_has_random_adjust_brightness();
    preprocessing_step_.random_adjust_brightness_ = new ::object_detection::protos::RandomAdjustBrightness;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_adjust_brightness)
  return preprocessing_step_.random_adjust_brightness_;
}
::object_detection::protos::RandomAdjustBrightness* PreprocessingStep::release_random_adjust_brightness() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_adjust_brightness)
  if (has_random_adjust_brightness()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomAdjustBrightness* temp = preprocessing_step_.random_adjust_brightness_;
    preprocessing_step_.random_adjust_brightness_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_adjust_brightness(::object_detection::protos::RandomAdjustBrightness* random_adjust_brightness) {
  clear_preprocessing_step();
  if (random_adjust_brightness) {
    set_has_random_adjust_brightness();
    preprocessing_step_.random_adjust_brightness_ = random_adjust_brightness;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_brightness)
}

// optional .object_detection.protos.RandomAdjustContrast random_adjust_contrast = 7;
bool PreprocessingStep::has_random_adjust_contrast() const {
  return preprocessing_step_case() == kRandomAdjustContrast;
}
void PreprocessingStep::set_has_random_adjust_contrast() {
  _oneof_case_[0] = kRandomAdjustContrast;
}
void PreprocessingStep::clear_random_adjust_contrast() {
  if (has_random_adjust_contrast()) {
    delete preprocessing_step_.random_adjust_contrast_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomAdjustContrast& PreprocessingStep::random_adjust_contrast() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_adjust_contrast)
  return has_random_adjust_contrast()
      ? *preprocessing_step_.random_adjust_contrast_
      : ::object_detection::protos::RandomAdjustContrast::default_instance();
}
::object_detection::protos::RandomAdjustContrast* PreprocessingStep::mutable_random_adjust_contrast() {
  if (!has_random_adjust_contrast()) {
    clear_preprocessing_step();
    set_has_random_adjust_contrast();
    preprocessing_step_.random_adjust_contrast_ = new ::object_detection::protos::RandomAdjustContrast;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_adjust_contrast)
  return preprocessing_step_.random_adjust_contrast_;
}
::object_detection::protos::RandomAdjustContrast* PreprocessingStep::release_random_adjust_contrast() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_adjust_contrast)
  if (has_random_adjust_contrast()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomAdjustContrast* temp = preprocessing_step_.random_adjust_contrast_;
    preprocessing_step_.random_adjust_contrast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_adjust_contrast(::object_detection::protos::RandomAdjustContrast* random_adjust_contrast) {
  clear_preprocessing_step();
  if (random_adjust_contrast) {
    set_has_random_adjust_contrast();
    preprocessing_step_.random_adjust_contrast_ = random_adjust_contrast;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_contrast)
}

// optional .object_detection.protos.RandomAdjustHue random_adjust_hue = 8;
bool PreprocessingStep::has_random_adjust_hue() const {
  return preprocessing_step_case() == kRandomAdjustHue;
}
void PreprocessingStep::set_has_random_adjust_hue() {
  _oneof_case_[0] = kRandomAdjustHue;
}
void PreprocessingStep::clear_random_adjust_hue() {
  if (has_random_adjust_hue()) {
    delete preprocessing_step_.random_adjust_hue_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomAdjustHue& PreprocessingStep::random_adjust_hue() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_adjust_hue)
  return has_random_adjust_hue()
      ? *preprocessing_step_.random_adjust_hue_
      : ::object_detection::protos::RandomAdjustHue::default_instance();
}
::object_detection::protos::RandomAdjustHue* PreprocessingStep::mutable_random_adjust_hue() {
  if (!has_random_adjust_hue()) {
    clear_preprocessing_step();
    set_has_random_adjust_hue();
    preprocessing_step_.random_adjust_hue_ = new ::object_detection::protos::RandomAdjustHue;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_adjust_hue)
  return preprocessing_step_.random_adjust_hue_;
}
::object_detection::protos::RandomAdjustHue* PreprocessingStep::release_random_adjust_hue() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_adjust_hue)
  if (has_random_adjust_hue()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomAdjustHue* temp = preprocessing_step_.random_adjust_hue_;
    preprocessing_step_.random_adjust_hue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_adjust_hue(::object_detection::protos::RandomAdjustHue* random_adjust_hue) {
  clear_preprocessing_step();
  if (random_adjust_hue) {
    set_has_random_adjust_hue();
    preprocessing_step_.random_adjust_hue_ = random_adjust_hue;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_hue)
}

// optional .object_detection.protos.RandomAdjustSaturation random_adjust_saturation = 9;
bool PreprocessingStep::has_random_adjust_saturation() const {
  return preprocessing_step_case() == kRandomAdjustSaturation;
}
void PreprocessingStep::set_has_random_adjust_saturation() {
  _oneof_case_[0] = kRandomAdjustSaturation;
}
void PreprocessingStep::clear_random_adjust_saturation() {
  if (has_random_adjust_saturation()) {
    delete preprocessing_step_.random_adjust_saturation_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomAdjustSaturation& PreprocessingStep::random_adjust_saturation() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_adjust_saturation)
  return has_random_adjust_saturation()
      ? *preprocessing_step_.random_adjust_saturation_
      : ::object_detection::protos::RandomAdjustSaturation::default_instance();
}
::object_detection::protos::RandomAdjustSaturation* PreprocessingStep::mutable_random_adjust_saturation() {
  if (!has_random_adjust_saturation()) {
    clear_preprocessing_step();
    set_has_random_adjust_saturation();
    preprocessing_step_.random_adjust_saturation_ = new ::object_detection::protos::RandomAdjustSaturation;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_adjust_saturation)
  return preprocessing_step_.random_adjust_saturation_;
}
::object_detection::protos::RandomAdjustSaturation* PreprocessingStep::release_random_adjust_saturation() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_adjust_saturation)
  if (has_random_adjust_saturation()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomAdjustSaturation* temp = preprocessing_step_.random_adjust_saturation_;
    preprocessing_step_.random_adjust_saturation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_adjust_saturation(::object_detection::protos::RandomAdjustSaturation* random_adjust_saturation) {
  clear_preprocessing_step();
  if (random_adjust_saturation) {
    set_has_random_adjust_saturation();
    preprocessing_step_.random_adjust_saturation_ = random_adjust_saturation;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_adjust_saturation)
}

// optional .object_detection.protos.RandomDistortColor random_distort_color = 10;
bool PreprocessingStep::has_random_distort_color() const {
  return preprocessing_step_case() == kRandomDistortColor;
}
void PreprocessingStep::set_has_random_distort_color() {
  _oneof_case_[0] = kRandomDistortColor;
}
void PreprocessingStep::clear_random_distort_color() {
  if (has_random_distort_color()) {
    delete preprocessing_step_.random_distort_color_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomDistortColor& PreprocessingStep::random_distort_color() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_distort_color)
  return has_random_distort_color()
      ? *preprocessing_step_.random_distort_color_
      : ::object_detection::protos::RandomDistortColor::default_instance();
}
::object_detection::protos::RandomDistortColor* PreprocessingStep::mutable_random_distort_color() {
  if (!has_random_distort_color()) {
    clear_preprocessing_step();
    set_has_random_distort_color();
    preprocessing_step_.random_distort_color_ = new ::object_detection::protos::RandomDistortColor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_distort_color)
  return preprocessing_step_.random_distort_color_;
}
::object_detection::protos::RandomDistortColor* PreprocessingStep::release_random_distort_color() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_distort_color)
  if (has_random_distort_color()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomDistortColor* temp = preprocessing_step_.random_distort_color_;
    preprocessing_step_.random_distort_color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_distort_color(::object_detection::protos::RandomDistortColor* random_distort_color) {
  clear_preprocessing_step();
  if (random_distort_color) {
    set_has_random_distort_color();
    preprocessing_step_.random_distort_color_ = random_distort_color;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_distort_color)
}

// optional .object_detection.protos.RandomJitterBoxes random_jitter_boxes = 11;
bool PreprocessingStep::has_random_jitter_boxes() const {
  return preprocessing_step_case() == kRandomJitterBoxes;
}
void PreprocessingStep::set_has_random_jitter_boxes() {
  _oneof_case_[0] = kRandomJitterBoxes;
}
void PreprocessingStep::clear_random_jitter_boxes() {
  if (has_random_jitter_boxes()) {
    delete preprocessing_step_.random_jitter_boxes_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomJitterBoxes& PreprocessingStep::random_jitter_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_jitter_boxes)
  return has_random_jitter_boxes()
      ? *preprocessing_step_.random_jitter_boxes_
      : ::object_detection::protos::RandomJitterBoxes::default_instance();
}
::object_detection::protos::RandomJitterBoxes* PreprocessingStep::mutable_random_jitter_boxes() {
  if (!has_random_jitter_boxes()) {
    clear_preprocessing_step();
    set_has_random_jitter_boxes();
    preprocessing_step_.random_jitter_boxes_ = new ::object_detection::protos::RandomJitterBoxes;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_jitter_boxes)
  return preprocessing_step_.random_jitter_boxes_;
}
::object_detection::protos::RandomJitterBoxes* PreprocessingStep::release_random_jitter_boxes() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_jitter_boxes)
  if (has_random_jitter_boxes()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomJitterBoxes* temp = preprocessing_step_.random_jitter_boxes_;
    preprocessing_step_.random_jitter_boxes_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_jitter_boxes(::object_detection::protos::RandomJitterBoxes* random_jitter_boxes) {
  clear_preprocessing_step();
  if (random_jitter_boxes) {
    set_has_random_jitter_boxes();
    preprocessing_step_.random_jitter_boxes_ = random_jitter_boxes;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_jitter_boxes)
}

// optional .object_detection.protos.RandomCropImage random_crop_image = 12;
bool PreprocessingStep::has_random_crop_image() const {
  return preprocessing_step_case() == kRandomCropImage;
}
void PreprocessingStep::set_has_random_crop_image() {
  _oneof_case_[0] = kRandomCropImage;
}
void PreprocessingStep::clear_random_crop_image() {
  if (has_random_crop_image()) {
    delete preprocessing_step_.random_crop_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomCropImage& PreprocessingStep::random_crop_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_crop_image)
  return has_random_crop_image()
      ? *preprocessing_step_.random_crop_image_
      : ::object_detection::protos::RandomCropImage::default_instance();
}
::object_detection::protos::RandomCropImage* PreprocessingStep::mutable_random_crop_image() {
  if (!has_random_crop_image()) {
    clear_preprocessing_step();
    set_has_random_crop_image();
    preprocessing_step_.random_crop_image_ = new ::object_detection::protos::RandomCropImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_crop_image)
  return preprocessing_step_.random_crop_image_;
}
::object_detection::protos::RandomCropImage* PreprocessingStep::release_random_crop_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_crop_image)
  if (has_random_crop_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomCropImage* temp = preprocessing_step_.random_crop_image_;
    preprocessing_step_.random_crop_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_crop_image(::object_detection::protos::RandomCropImage* random_crop_image) {
  clear_preprocessing_step();
  if (random_crop_image) {
    set_has_random_crop_image();
    preprocessing_step_.random_crop_image_ = random_crop_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_crop_image)
}

// optional .object_detection.protos.RandomPadImage random_pad_image = 13;
bool PreprocessingStep::has_random_pad_image() const {
  return preprocessing_step_case() == kRandomPadImage;
}
void PreprocessingStep::set_has_random_pad_image() {
  _oneof_case_[0] = kRandomPadImage;
}
void PreprocessingStep::clear_random_pad_image() {
  if (has_random_pad_image()) {
    delete preprocessing_step_.random_pad_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomPadImage& PreprocessingStep::random_pad_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_pad_image)
  return has_random_pad_image()
      ? *preprocessing_step_.random_pad_image_
      : ::object_detection::protos::RandomPadImage::default_instance();
}
::object_detection::protos::RandomPadImage* PreprocessingStep::mutable_random_pad_image() {
  if (!has_random_pad_image()) {
    clear_preprocessing_step();
    set_has_random_pad_image();
    preprocessing_step_.random_pad_image_ = new ::object_detection::protos::RandomPadImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_pad_image)
  return preprocessing_step_.random_pad_image_;
}
::object_detection::protos::RandomPadImage* PreprocessingStep::release_random_pad_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_pad_image)
  if (has_random_pad_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomPadImage* temp = preprocessing_step_.random_pad_image_;
    preprocessing_step_.random_pad_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_pad_image(::object_detection::protos::RandomPadImage* random_pad_image) {
  clear_preprocessing_step();
  if (random_pad_image) {
    set_has_random_pad_image();
    preprocessing_step_.random_pad_image_ = random_pad_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_pad_image)
}

// optional .object_detection.protos.RandomCropPadImage random_crop_pad_image = 14;
bool PreprocessingStep::has_random_crop_pad_image() const {
  return preprocessing_step_case() == kRandomCropPadImage;
}
void PreprocessingStep::set_has_random_crop_pad_image() {
  _oneof_case_[0] = kRandomCropPadImage;
}
void PreprocessingStep::clear_random_crop_pad_image() {
  if (has_random_crop_pad_image()) {
    delete preprocessing_step_.random_crop_pad_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomCropPadImage& PreprocessingStep::random_crop_pad_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_crop_pad_image)
  return has_random_crop_pad_image()
      ? *preprocessing_step_.random_crop_pad_image_
      : ::object_detection::protos::RandomCropPadImage::default_instance();
}
::object_detection::protos::RandomCropPadImage* PreprocessingStep::mutable_random_crop_pad_image() {
  if (!has_random_crop_pad_image()) {
    clear_preprocessing_step();
    set_has_random_crop_pad_image();
    preprocessing_step_.random_crop_pad_image_ = new ::object_detection::protos::RandomCropPadImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_crop_pad_image)
  return preprocessing_step_.random_crop_pad_image_;
}
::object_detection::protos::RandomCropPadImage* PreprocessingStep::release_random_crop_pad_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_crop_pad_image)
  if (has_random_crop_pad_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomCropPadImage* temp = preprocessing_step_.random_crop_pad_image_;
    preprocessing_step_.random_crop_pad_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_crop_pad_image(::object_detection::protos::RandomCropPadImage* random_crop_pad_image) {
  clear_preprocessing_step();
  if (random_crop_pad_image) {
    set_has_random_crop_pad_image();
    preprocessing_step_.random_crop_pad_image_ = random_crop_pad_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_crop_pad_image)
}

// optional .object_detection.protos.RandomCropToAspectRatio random_crop_to_aspect_ratio = 15;
bool PreprocessingStep::has_random_crop_to_aspect_ratio() const {
  return preprocessing_step_case() == kRandomCropToAspectRatio;
}
void PreprocessingStep::set_has_random_crop_to_aspect_ratio() {
  _oneof_case_[0] = kRandomCropToAspectRatio;
}
void PreprocessingStep::clear_random_crop_to_aspect_ratio() {
  if (has_random_crop_to_aspect_ratio()) {
    delete preprocessing_step_.random_crop_to_aspect_ratio_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomCropToAspectRatio& PreprocessingStep::random_crop_to_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_crop_to_aspect_ratio)
  return has_random_crop_to_aspect_ratio()
      ? *preprocessing_step_.random_crop_to_aspect_ratio_
      : ::object_detection::protos::RandomCropToAspectRatio::default_instance();
}
::object_detection::protos::RandomCropToAspectRatio* PreprocessingStep::mutable_random_crop_to_aspect_ratio() {
  if (!has_random_crop_to_aspect_ratio()) {
    clear_preprocessing_step();
    set_has_random_crop_to_aspect_ratio();
    preprocessing_step_.random_crop_to_aspect_ratio_ = new ::object_detection::protos::RandomCropToAspectRatio;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_crop_to_aspect_ratio)
  return preprocessing_step_.random_crop_to_aspect_ratio_;
}
::object_detection::protos::RandomCropToAspectRatio* PreprocessingStep::release_random_crop_to_aspect_ratio() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_crop_to_aspect_ratio)
  if (has_random_crop_to_aspect_ratio()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomCropToAspectRatio* temp = preprocessing_step_.random_crop_to_aspect_ratio_;
    preprocessing_step_.random_crop_to_aspect_ratio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_crop_to_aspect_ratio(::object_detection::protos::RandomCropToAspectRatio* random_crop_to_aspect_ratio) {
  clear_preprocessing_step();
  if (random_crop_to_aspect_ratio) {
    set_has_random_crop_to_aspect_ratio();
    preprocessing_step_.random_crop_to_aspect_ratio_ = random_crop_to_aspect_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_crop_to_aspect_ratio)
}

// optional .object_detection.protos.RandomBlackPatches random_black_patches = 16;
bool PreprocessingStep::has_random_black_patches() const {
  return preprocessing_step_case() == kRandomBlackPatches;
}
void PreprocessingStep::set_has_random_black_patches() {
  _oneof_case_[0] = kRandomBlackPatches;
}
void PreprocessingStep::clear_random_black_patches() {
  if (has_random_black_patches()) {
    delete preprocessing_step_.random_black_patches_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomBlackPatches& PreprocessingStep::random_black_patches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_black_patches)
  return has_random_black_patches()
      ? *preprocessing_step_.random_black_patches_
      : ::object_detection::protos::RandomBlackPatches::default_instance();
}
::object_detection::protos::RandomBlackPatches* PreprocessingStep::mutable_random_black_patches() {
  if (!has_random_black_patches()) {
    clear_preprocessing_step();
    set_has_random_black_patches();
    preprocessing_step_.random_black_patches_ = new ::object_detection::protos::RandomBlackPatches;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_black_patches)
  return preprocessing_step_.random_black_patches_;
}
::object_detection::protos::RandomBlackPatches* PreprocessingStep::release_random_black_patches() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_black_patches)
  if (has_random_black_patches()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomBlackPatches* temp = preprocessing_step_.random_black_patches_;
    preprocessing_step_.random_black_patches_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_black_patches(::object_detection::protos::RandomBlackPatches* random_black_patches) {
  clear_preprocessing_step();
  if (random_black_patches) {
    set_has_random_black_patches();
    preprocessing_step_.random_black_patches_ = random_black_patches;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_black_patches)
}

// optional .object_detection.protos.RandomResizeMethod random_resize_method = 17;
bool PreprocessingStep::has_random_resize_method() const {
  return preprocessing_step_case() == kRandomResizeMethod;
}
void PreprocessingStep::set_has_random_resize_method() {
  _oneof_case_[0] = kRandomResizeMethod;
}
void PreprocessingStep::clear_random_resize_method() {
  if (has_random_resize_method()) {
    delete preprocessing_step_.random_resize_method_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomResizeMethod& PreprocessingStep::random_resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_resize_method)
  return has_random_resize_method()
      ? *preprocessing_step_.random_resize_method_
      : ::object_detection::protos::RandomResizeMethod::default_instance();
}
::object_detection::protos::RandomResizeMethod* PreprocessingStep::mutable_random_resize_method() {
  if (!has_random_resize_method()) {
    clear_preprocessing_step();
    set_has_random_resize_method();
    preprocessing_step_.random_resize_method_ = new ::object_detection::protos::RandomResizeMethod;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_resize_method)
  return preprocessing_step_.random_resize_method_;
}
::object_detection::protos::RandomResizeMethod* PreprocessingStep::release_random_resize_method() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_resize_method)
  if (has_random_resize_method()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomResizeMethod* temp = preprocessing_step_.random_resize_method_;
    preprocessing_step_.random_resize_method_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_resize_method(::object_detection::protos::RandomResizeMethod* random_resize_method) {
  clear_preprocessing_step();
  if (random_resize_method) {
    set_has_random_resize_method();
    preprocessing_step_.random_resize_method_ = random_resize_method;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_resize_method)
}

// optional .object_detection.protos.ScaleBoxesToPixelCoordinates scale_boxes_to_pixel_coordinates = 18;
bool PreprocessingStep::has_scale_boxes_to_pixel_coordinates() const {
  return preprocessing_step_case() == kScaleBoxesToPixelCoordinates;
}
void PreprocessingStep::set_has_scale_boxes_to_pixel_coordinates() {
  _oneof_case_[0] = kScaleBoxesToPixelCoordinates;
}
void PreprocessingStep::clear_scale_boxes_to_pixel_coordinates() {
  if (has_scale_boxes_to_pixel_coordinates()) {
    delete preprocessing_step_.scale_boxes_to_pixel_coordinates_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::ScaleBoxesToPixelCoordinates& PreprocessingStep::scale_boxes_to_pixel_coordinates() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.scale_boxes_to_pixel_coordinates)
  return has_scale_boxes_to_pixel_coordinates()
      ? *preprocessing_step_.scale_boxes_to_pixel_coordinates_
      : ::object_detection::protos::ScaleBoxesToPixelCoordinates::default_instance();
}
::object_detection::protos::ScaleBoxesToPixelCoordinates* PreprocessingStep::mutable_scale_boxes_to_pixel_coordinates() {
  if (!has_scale_boxes_to_pixel_coordinates()) {
    clear_preprocessing_step();
    set_has_scale_boxes_to_pixel_coordinates();
    preprocessing_step_.scale_boxes_to_pixel_coordinates_ = new ::object_detection::protos::ScaleBoxesToPixelCoordinates;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.scale_boxes_to_pixel_coordinates)
  return preprocessing_step_.scale_boxes_to_pixel_coordinates_;
}
::object_detection::protos::ScaleBoxesToPixelCoordinates* PreprocessingStep::release_scale_boxes_to_pixel_coordinates() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.scale_boxes_to_pixel_coordinates)
  if (has_scale_boxes_to_pixel_coordinates()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::ScaleBoxesToPixelCoordinates* temp = preprocessing_step_.scale_boxes_to_pixel_coordinates_;
    preprocessing_step_.scale_boxes_to_pixel_coordinates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_scale_boxes_to_pixel_coordinates(::object_detection::protos::ScaleBoxesToPixelCoordinates* scale_boxes_to_pixel_coordinates) {
  clear_preprocessing_step();
  if (scale_boxes_to_pixel_coordinates) {
    set_has_scale_boxes_to_pixel_coordinates();
    preprocessing_step_.scale_boxes_to_pixel_coordinates_ = scale_boxes_to_pixel_coordinates;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.scale_boxes_to_pixel_coordinates)
}

// optional .object_detection.protos.ResizeImage resize_image = 19;
bool PreprocessingStep::has_resize_image() const {
  return preprocessing_step_case() == kResizeImage;
}
void PreprocessingStep::set_has_resize_image() {
  _oneof_case_[0] = kResizeImage;
}
void PreprocessingStep::clear_resize_image() {
  if (has_resize_image()) {
    delete preprocessing_step_.resize_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::ResizeImage& PreprocessingStep::resize_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.resize_image)
  return has_resize_image()
      ? *preprocessing_step_.resize_image_
      : ::object_detection::protos::ResizeImage::default_instance();
}
::object_detection::protos::ResizeImage* PreprocessingStep::mutable_resize_image() {
  if (!has_resize_image()) {
    clear_preprocessing_step();
    set_has_resize_image();
    preprocessing_step_.resize_image_ = new ::object_detection::protos::ResizeImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.resize_image)
  return preprocessing_step_.resize_image_;
}
::object_detection::protos::ResizeImage* PreprocessingStep::release_resize_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.resize_image)
  if (has_resize_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::ResizeImage* temp = preprocessing_step_.resize_image_;
    preprocessing_step_.resize_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_resize_image(::object_detection::protos::ResizeImage* resize_image) {
  clear_preprocessing_step();
  if (resize_image) {
    set_has_resize_image();
    preprocessing_step_.resize_image_ = resize_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.resize_image)
}

// optional .object_detection.protos.SubtractChannelMean subtract_channel_mean = 20;
bool PreprocessingStep::has_subtract_channel_mean() const {
  return preprocessing_step_case() == kSubtractChannelMean;
}
void PreprocessingStep::set_has_subtract_channel_mean() {
  _oneof_case_[0] = kSubtractChannelMean;
}
void PreprocessingStep::clear_subtract_channel_mean() {
  if (has_subtract_channel_mean()) {
    delete preprocessing_step_.subtract_channel_mean_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::SubtractChannelMean& PreprocessingStep::subtract_channel_mean() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.subtract_channel_mean)
  return has_subtract_channel_mean()
      ? *preprocessing_step_.subtract_channel_mean_
      : ::object_detection::protos::SubtractChannelMean::default_instance();
}
::object_detection::protos::SubtractChannelMean* PreprocessingStep::mutable_subtract_channel_mean() {
  if (!has_subtract_channel_mean()) {
    clear_preprocessing_step();
    set_has_subtract_channel_mean();
    preprocessing_step_.subtract_channel_mean_ = new ::object_detection::protos::SubtractChannelMean;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.subtract_channel_mean)
  return preprocessing_step_.subtract_channel_mean_;
}
::object_detection::protos::SubtractChannelMean* PreprocessingStep::release_subtract_channel_mean() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.subtract_channel_mean)
  if (has_subtract_channel_mean()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::SubtractChannelMean* temp = preprocessing_step_.subtract_channel_mean_;
    preprocessing_step_.subtract_channel_mean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_subtract_channel_mean(::object_detection::protos::SubtractChannelMean* subtract_channel_mean) {
  clear_preprocessing_step();
  if (subtract_channel_mean) {
    set_has_subtract_channel_mean();
    preprocessing_step_.subtract_channel_mean_ = subtract_channel_mean;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.subtract_channel_mean)
}

// optional .object_detection.protos.SSDRandomCrop ssd_random_crop = 21;
bool PreprocessingStep::has_ssd_random_crop() const {
  return preprocessing_step_case() == kSsdRandomCrop;
}
void PreprocessingStep::set_has_ssd_random_crop() {
  _oneof_case_[0] = kSsdRandomCrop;
}
void PreprocessingStep::clear_ssd_random_crop() {
  if (has_ssd_random_crop()) {
    delete preprocessing_step_.ssd_random_crop_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::SSDRandomCrop& PreprocessingStep::ssd_random_crop() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.ssd_random_crop)
  return has_ssd_random_crop()
      ? *preprocessing_step_.ssd_random_crop_
      : ::object_detection::protos::SSDRandomCrop::default_instance();
}
::object_detection::protos::SSDRandomCrop* PreprocessingStep::mutable_ssd_random_crop() {
  if (!has_ssd_random_crop()) {
    clear_preprocessing_step();
    set_has_ssd_random_crop();
    preprocessing_step_.ssd_random_crop_ = new ::object_detection::protos::SSDRandomCrop;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.ssd_random_crop)
  return preprocessing_step_.ssd_random_crop_;
}
::object_detection::protos::SSDRandomCrop* PreprocessingStep::release_ssd_random_crop() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.ssd_random_crop)
  if (has_ssd_random_crop()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::SSDRandomCrop* temp = preprocessing_step_.ssd_random_crop_;
    preprocessing_step_.ssd_random_crop_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_ssd_random_crop(::object_detection::protos::SSDRandomCrop* ssd_random_crop) {
  clear_preprocessing_step();
  if (ssd_random_crop) {
    set_has_ssd_random_crop();
    preprocessing_step_.ssd_random_crop_ = ssd_random_crop;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop)
}

// optional .object_detection.protos.SSDRandomCropPad ssd_random_crop_pad = 22;
bool PreprocessingStep::has_ssd_random_crop_pad() const {
  return preprocessing_step_case() == kSsdRandomCropPad;
}
void PreprocessingStep::set_has_ssd_random_crop_pad() {
  _oneof_case_[0] = kSsdRandomCropPad;
}
void PreprocessingStep::clear_ssd_random_crop_pad() {
  if (has_ssd_random_crop_pad()) {
    delete preprocessing_step_.ssd_random_crop_pad_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::SSDRandomCropPad& PreprocessingStep::ssd_random_crop_pad() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.ssd_random_crop_pad)
  return has_ssd_random_crop_pad()
      ? *preprocessing_step_.ssd_random_crop_pad_
      : ::object_detection::protos::SSDRandomCropPad::default_instance();
}
::object_detection::protos::SSDRandomCropPad* PreprocessingStep::mutable_ssd_random_crop_pad() {
  if (!has_ssd_random_crop_pad()) {
    clear_preprocessing_step();
    set_has_ssd_random_crop_pad();
    preprocessing_step_.ssd_random_crop_pad_ = new ::object_detection::protos::SSDRandomCropPad;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.ssd_random_crop_pad)
  return preprocessing_step_.ssd_random_crop_pad_;
}
::object_detection::protos::SSDRandomCropPad* PreprocessingStep::release_ssd_random_crop_pad() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.ssd_random_crop_pad)
  if (has_ssd_random_crop_pad()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::SSDRandomCropPad* temp = preprocessing_step_.ssd_random_crop_pad_;
    preprocessing_step_.ssd_random_crop_pad_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_ssd_random_crop_pad(::object_detection::protos::SSDRandomCropPad* ssd_random_crop_pad) {
  clear_preprocessing_step();
  if (ssd_random_crop_pad) {
    set_has_ssd_random_crop_pad();
    preprocessing_step_.ssd_random_crop_pad_ = ssd_random_crop_pad;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop_pad)
}

// optional .object_detection.protos.SSDRandomCropFixedAspectRatio ssd_random_crop_fixed_aspect_ratio = 23;
bool PreprocessingStep::has_ssd_random_crop_fixed_aspect_ratio() const {
  return preprocessing_step_case() == kSsdRandomCropFixedAspectRatio;
}
void PreprocessingStep::set_has_ssd_random_crop_fixed_aspect_ratio() {
  _oneof_case_[0] = kSsdRandomCropFixedAspectRatio;
}
void PreprocessingStep::clear_ssd_random_crop_fixed_aspect_ratio() {
  if (has_ssd_random_crop_fixed_aspect_ratio()) {
    delete preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::SSDRandomCropFixedAspectRatio& PreprocessingStep::ssd_random_crop_fixed_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.ssd_random_crop_fixed_aspect_ratio)
  return has_ssd_random_crop_fixed_aspect_ratio()
      ? *preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_
      : ::object_detection::protos::SSDRandomCropFixedAspectRatio::default_instance();
}
::object_detection::protos::SSDRandomCropFixedAspectRatio* PreprocessingStep::mutable_ssd_random_crop_fixed_aspect_ratio() {
  if (!has_ssd_random_crop_fixed_aspect_ratio()) {
    clear_preprocessing_step();
    set_has_ssd_random_crop_fixed_aspect_ratio();
    preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_ = new ::object_detection::protos::SSDRandomCropFixedAspectRatio;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.ssd_random_crop_fixed_aspect_ratio)
  return preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_;
}
::object_detection::protos::SSDRandomCropFixedAspectRatio* PreprocessingStep::release_ssd_random_crop_fixed_aspect_ratio() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.ssd_random_crop_fixed_aspect_ratio)
  if (has_ssd_random_crop_fixed_aspect_ratio()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::SSDRandomCropFixedAspectRatio* temp = preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_;
    preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_ssd_random_crop_fixed_aspect_ratio(::object_detection::protos::SSDRandomCropFixedAspectRatio* ssd_random_crop_fixed_aspect_ratio) {
  clear_preprocessing_step();
  if (ssd_random_crop_fixed_aspect_ratio) {
    set_has_ssd_random_crop_fixed_aspect_ratio();
    preprocessing_step_.ssd_random_crop_fixed_aspect_ratio_ = ssd_random_crop_fixed_aspect_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop_fixed_aspect_ratio)
}

// optional .object_detection.protos.SSDRandomCropPadFixedAspectRatio ssd_random_crop_pad_fixed_aspect_ratio = 24;
bool PreprocessingStep::has_ssd_random_crop_pad_fixed_aspect_ratio() const {
  return preprocessing_step_case() == kSsdRandomCropPadFixedAspectRatio;
}
void PreprocessingStep::set_has_ssd_random_crop_pad_fixed_aspect_ratio() {
  _oneof_case_[0] = kSsdRandomCropPadFixedAspectRatio;
}
void PreprocessingStep::clear_ssd_random_crop_pad_fixed_aspect_ratio() {
  if (has_ssd_random_crop_pad_fixed_aspect_ratio()) {
    delete preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::SSDRandomCropPadFixedAspectRatio& PreprocessingStep::ssd_random_crop_pad_fixed_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.ssd_random_crop_pad_fixed_aspect_ratio)
  return has_ssd_random_crop_pad_fixed_aspect_ratio()
      ? *preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_
      : ::object_detection::protos::SSDRandomCropPadFixedAspectRatio::default_instance();
}
::object_detection::protos::SSDRandomCropPadFixedAspectRatio* PreprocessingStep::mutable_ssd_random_crop_pad_fixed_aspect_ratio() {
  if (!has_ssd_random_crop_pad_fixed_aspect_ratio()) {
    clear_preprocessing_step();
    set_has_ssd_random_crop_pad_fixed_aspect_ratio();
    preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_ = new ::object_detection::protos::SSDRandomCropPadFixedAspectRatio;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.ssd_random_crop_pad_fixed_aspect_ratio)
  return preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_;
}
::object_detection::protos::SSDRandomCropPadFixedAspectRatio* PreprocessingStep::release_ssd_random_crop_pad_fixed_aspect_ratio() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.ssd_random_crop_pad_fixed_aspect_ratio)
  if (has_ssd_random_crop_pad_fixed_aspect_ratio()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::SSDRandomCropPadFixedAspectRatio* temp = preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_;
    preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_ssd_random_crop_pad_fixed_aspect_ratio(::object_detection::protos::SSDRandomCropPadFixedAspectRatio* ssd_random_crop_pad_fixed_aspect_ratio) {
  clear_preprocessing_step();
  if (ssd_random_crop_pad_fixed_aspect_ratio) {
    set_has_ssd_random_crop_pad_fixed_aspect_ratio();
    preprocessing_step_.ssd_random_crop_pad_fixed_aspect_ratio_ = ssd_random_crop_pad_fixed_aspect_ratio;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.ssd_random_crop_pad_fixed_aspect_ratio)
}

// optional .object_detection.protos.RandomVerticalFlip random_vertical_flip = 25;
bool PreprocessingStep::has_random_vertical_flip() const {
  return preprocessing_step_case() == kRandomVerticalFlip;
}
void PreprocessingStep::set_has_random_vertical_flip() {
  _oneof_case_[0] = kRandomVerticalFlip;
}
void PreprocessingStep::clear_random_vertical_flip() {
  if (has_random_vertical_flip()) {
    delete preprocessing_step_.random_vertical_flip_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomVerticalFlip& PreprocessingStep::random_vertical_flip() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_vertical_flip)
  return has_random_vertical_flip()
      ? *preprocessing_step_.random_vertical_flip_
      : ::object_detection::protos::RandomVerticalFlip::default_instance();
}
::object_detection::protos::RandomVerticalFlip* PreprocessingStep::mutable_random_vertical_flip() {
  if (!has_random_vertical_flip()) {
    clear_preprocessing_step();
    set_has_random_vertical_flip();
    preprocessing_step_.random_vertical_flip_ = new ::object_detection::protos::RandomVerticalFlip;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_vertical_flip)
  return preprocessing_step_.random_vertical_flip_;
}
::object_detection::protos::RandomVerticalFlip* PreprocessingStep::release_random_vertical_flip() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_vertical_flip)
  if (has_random_vertical_flip()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomVerticalFlip* temp = preprocessing_step_.random_vertical_flip_;
    preprocessing_step_.random_vertical_flip_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_vertical_flip(::object_detection::protos::RandomVerticalFlip* random_vertical_flip) {
  clear_preprocessing_step();
  if (random_vertical_flip) {
    set_has_random_vertical_flip();
    preprocessing_step_.random_vertical_flip_ = random_vertical_flip;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_vertical_flip)
}

// optional .object_detection.protos.RandomRotation90 random_rotation90 = 26;
bool PreprocessingStep::has_random_rotation90() const {
  return preprocessing_step_case() == kRandomRotation90;
}
void PreprocessingStep::set_has_random_rotation90() {
  _oneof_case_[0] = kRandomRotation90;
}
void PreprocessingStep::clear_random_rotation90() {
  if (has_random_rotation90()) {
    delete preprocessing_step_.random_rotation90_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomRotation90& PreprocessingStep::random_rotation90() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_rotation90)
  return has_random_rotation90()
      ? *preprocessing_step_.random_rotation90_
      : ::object_detection::protos::RandomRotation90::default_instance();
}
::object_detection::protos::RandomRotation90* PreprocessingStep::mutable_random_rotation90() {
  if (!has_random_rotation90()) {
    clear_preprocessing_step();
    set_has_random_rotation90();
    preprocessing_step_.random_rotation90_ = new ::object_detection::protos::RandomRotation90;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_rotation90)
  return preprocessing_step_.random_rotation90_;
}
::object_detection::protos::RandomRotation90* PreprocessingStep::release_random_rotation90() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_rotation90)
  if (has_random_rotation90()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomRotation90* temp = preprocessing_step_.random_rotation90_;
    preprocessing_step_.random_rotation90_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_rotation90(::object_detection::protos::RandomRotation90* random_rotation90) {
  clear_preprocessing_step();
  if (random_rotation90) {
    set_has_random_rotation90();
    preprocessing_step_.random_rotation90_ = random_rotation90;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_rotation90)
}

// optional .object_detection.protos.RGBtoGray rgb_to_gray = 27;
bool PreprocessingStep::has_rgb_to_gray() const {
  return preprocessing_step_case() == kRgbToGray;
}
void PreprocessingStep::set_has_rgb_to_gray() {
  _oneof_case_[0] = kRgbToGray;
}
void PreprocessingStep::clear_rgb_to_gray() {
  if (has_rgb_to_gray()) {
    delete preprocessing_step_.rgb_to_gray_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RGBtoGray& PreprocessingStep::rgb_to_gray() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.rgb_to_gray)
  return has_rgb_to_gray()
      ? *preprocessing_step_.rgb_to_gray_
      : ::object_detection::protos::RGBtoGray::default_instance();
}
::object_detection::protos::RGBtoGray* PreprocessingStep::mutable_rgb_to_gray() {
  if (!has_rgb_to_gray()) {
    clear_preprocessing_step();
    set_has_rgb_to_gray();
    preprocessing_step_.rgb_to_gray_ = new ::object_detection::protos::RGBtoGray;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.rgb_to_gray)
  return preprocessing_step_.rgb_to_gray_;
}
::object_detection::protos::RGBtoGray* PreprocessingStep::release_rgb_to_gray() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.rgb_to_gray)
  if (has_rgb_to_gray()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RGBtoGray* temp = preprocessing_step_.rgb_to_gray_;
    preprocessing_step_.rgb_to_gray_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_rgb_to_gray(::object_detection::protos::RGBtoGray* rgb_to_gray) {
  clear_preprocessing_step();
  if (rgb_to_gray) {
    set_has_rgb_to_gray();
    preprocessing_step_.rgb_to_gray_ = rgb_to_gray;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.rgb_to_gray)
}

// optional .object_detection.protos.ConvertClassLogitsToSoftmax convert_class_logits_to_softmax = 28;
bool PreprocessingStep::has_convert_class_logits_to_softmax() const {
  return preprocessing_step_case() == kConvertClassLogitsToSoftmax;
}
void PreprocessingStep::set_has_convert_class_logits_to_softmax() {
  _oneof_case_[0] = kConvertClassLogitsToSoftmax;
}
void PreprocessingStep::clear_convert_class_logits_to_softmax() {
  if (has_convert_class_logits_to_softmax()) {
    delete preprocessing_step_.convert_class_logits_to_softmax_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::ConvertClassLogitsToSoftmax& PreprocessingStep::convert_class_logits_to_softmax() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.convert_class_logits_to_softmax)
  return has_convert_class_logits_to_softmax()
      ? *preprocessing_step_.convert_class_logits_to_softmax_
      : ::object_detection::protos::ConvertClassLogitsToSoftmax::default_instance();
}
::object_detection::protos::ConvertClassLogitsToSoftmax* PreprocessingStep::mutable_convert_class_logits_to_softmax() {
  if (!has_convert_class_logits_to_softmax()) {
    clear_preprocessing_step();
    set_has_convert_class_logits_to_softmax();
    preprocessing_step_.convert_class_logits_to_softmax_ = new ::object_detection::protos::ConvertClassLogitsToSoftmax;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.convert_class_logits_to_softmax)
  return preprocessing_step_.convert_class_logits_to_softmax_;
}
::object_detection::protos::ConvertClassLogitsToSoftmax* PreprocessingStep::release_convert_class_logits_to_softmax() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.convert_class_logits_to_softmax)
  if (has_convert_class_logits_to_softmax()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::ConvertClassLogitsToSoftmax* temp = preprocessing_step_.convert_class_logits_to_softmax_;
    preprocessing_step_.convert_class_logits_to_softmax_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_convert_class_logits_to_softmax(::object_detection::protos::ConvertClassLogitsToSoftmax* convert_class_logits_to_softmax) {
  clear_preprocessing_step();
  if (convert_class_logits_to_softmax) {
    set_has_convert_class_logits_to_softmax();
    preprocessing_step_.convert_class_logits_to_softmax_ = convert_class_logits_to_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.convert_class_logits_to_softmax)
}

// optional .object_detection.protos.RandomAbsolutePadImage random_absolute_pad_image = 29;
bool PreprocessingStep::has_random_absolute_pad_image() const {
  return preprocessing_step_case() == kRandomAbsolutePadImage;
}
void PreprocessingStep::set_has_random_absolute_pad_image() {
  _oneof_case_[0] = kRandomAbsolutePadImage;
}
void PreprocessingStep::clear_random_absolute_pad_image() {
  if (has_random_absolute_pad_image()) {
    delete preprocessing_step_.random_absolute_pad_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomAbsolutePadImage& PreprocessingStep::random_absolute_pad_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_absolute_pad_image)
  return has_random_absolute_pad_image()
      ? *preprocessing_step_.random_absolute_pad_image_
      : ::object_detection::protos::RandomAbsolutePadImage::default_instance();
}
::object_detection::protos::RandomAbsolutePadImage* PreprocessingStep::mutable_random_absolute_pad_image() {
  if (!has_random_absolute_pad_image()) {
    clear_preprocessing_step();
    set_has_random_absolute_pad_image();
    preprocessing_step_.random_absolute_pad_image_ = new ::object_detection::protos::RandomAbsolutePadImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_absolute_pad_image)
  return preprocessing_step_.random_absolute_pad_image_;
}
::object_detection::protos::RandomAbsolutePadImage* PreprocessingStep::release_random_absolute_pad_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_absolute_pad_image)
  if (has_random_absolute_pad_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomAbsolutePadImage* temp = preprocessing_step_.random_absolute_pad_image_;
    preprocessing_step_.random_absolute_pad_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_absolute_pad_image(::object_detection::protos::RandomAbsolutePadImage* random_absolute_pad_image) {
  clear_preprocessing_step();
  if (random_absolute_pad_image) {
    set_has_random_absolute_pad_image();
    preprocessing_step_.random_absolute_pad_image_ = random_absolute_pad_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_absolute_pad_image)
}

// optional .object_detection.protos.RandomSelfConcatImage random_self_concat_image = 30;
bool PreprocessingStep::has_random_self_concat_image() const {
  return preprocessing_step_case() == kRandomSelfConcatImage;
}
void PreprocessingStep::set_has_random_self_concat_image() {
  _oneof_case_[0] = kRandomSelfConcatImage;
}
void PreprocessingStep::clear_random_self_concat_image() {
  if (has_random_self_concat_image()) {
    delete preprocessing_step_.random_self_concat_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RandomSelfConcatImage& PreprocessingStep::random_self_concat_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.random_self_concat_image)
  return has_random_self_concat_image()
      ? *preprocessing_step_.random_self_concat_image_
      : ::object_detection::protos::RandomSelfConcatImage::default_instance();
}
::object_detection::protos::RandomSelfConcatImage* PreprocessingStep::mutable_random_self_concat_image() {
  if (!has_random_self_concat_image()) {
    clear_preprocessing_step();
    set_has_random_self_concat_image();
    preprocessing_step_.random_self_concat_image_ = new ::object_detection::protos::RandomSelfConcatImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.random_self_concat_image)
  return preprocessing_step_.random_self_concat_image_;
}
::object_detection::protos::RandomSelfConcatImage* PreprocessingStep::release_random_self_concat_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.random_self_concat_image)
  if (has_random_self_concat_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RandomSelfConcatImage* temp = preprocessing_step_.random_self_concat_image_;
    preprocessing_step_.random_self_concat_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_random_self_concat_image(::object_detection::protos::RandomSelfConcatImage* random_self_concat_image) {
  clear_preprocessing_step();
  if (random_self_concat_image) {
    set_has_random_self_concat_image();
    preprocessing_step_.random_self_concat_image_ = random_self_concat_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.random_self_concat_image)
}

// optional .object_detection.protos.AutoAugmentImage autoaugment_image = 31;
bool PreprocessingStep::has_autoaugment_image() const {
  return preprocessing_step_case() == kAutoaugmentImage;
}
void PreprocessingStep::set_has_autoaugment_image() {
  _oneof_case_[0] = kAutoaugmentImage;
}
void PreprocessingStep::clear_autoaugment_image() {
  if (has_autoaugment_image()) {
    delete preprocessing_step_.autoaugment_image_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::AutoAugmentImage& PreprocessingStep::autoaugment_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.autoaugment_image)
  return has_autoaugment_image()
      ? *preprocessing_step_.autoaugment_image_
      : ::object_detection::protos::AutoAugmentImage::default_instance();
}
::object_detection::protos::AutoAugmentImage* PreprocessingStep::mutable_autoaugment_image() {
  if (!has_autoaugment_image()) {
    clear_preprocessing_step();
    set_has_autoaugment_image();
    preprocessing_step_.autoaugment_image_ = new ::object_detection::protos::AutoAugmentImage;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.autoaugment_image)
  return preprocessing_step_.autoaugment_image_;
}
::object_detection::protos::AutoAugmentImage* PreprocessingStep::release_autoaugment_image() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.autoaugment_image)
  if (has_autoaugment_image()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::AutoAugmentImage* temp = preprocessing_step_.autoaugment_image_;
    preprocessing_step_.autoaugment_image_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_autoaugment_image(::object_detection::protos::AutoAugmentImage* autoaugment_image) {
  clear_preprocessing_step();
  if (autoaugment_image) {
    set_has_autoaugment_image();
    preprocessing_step_.autoaugment_image_ = autoaugment_image;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.autoaugment_image)
}

// optional .object_detection.protos.DropLabelProbabilistically drop_label_probabilistically = 32;
bool PreprocessingStep::has_drop_label_probabilistically() const {
  return preprocessing_step_case() == kDropLabelProbabilistically;
}
void PreprocessingStep::set_has_drop_label_probabilistically() {
  _oneof_case_[0] = kDropLabelProbabilistically;
}
void PreprocessingStep::clear_drop_label_probabilistically() {
  if (has_drop_label_probabilistically()) {
    delete preprocessing_step_.drop_label_probabilistically_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::DropLabelProbabilistically& PreprocessingStep::drop_label_probabilistically() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.drop_label_probabilistically)
  return has_drop_label_probabilistically()
      ? *preprocessing_step_.drop_label_probabilistically_
      : ::object_detection::protos::DropLabelProbabilistically::default_instance();
}
::object_detection::protos::DropLabelProbabilistically* PreprocessingStep::mutable_drop_label_probabilistically() {
  if (!has_drop_label_probabilistically()) {
    clear_preprocessing_step();
    set_has_drop_label_probabilistically();
    preprocessing_step_.drop_label_probabilistically_ = new ::object_detection::protos::DropLabelProbabilistically;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.drop_label_probabilistically)
  return preprocessing_step_.drop_label_probabilistically_;
}
::object_detection::protos::DropLabelProbabilistically* PreprocessingStep::release_drop_label_probabilistically() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.drop_label_probabilistically)
  if (has_drop_label_probabilistically()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::DropLabelProbabilistically* temp = preprocessing_step_.drop_label_probabilistically_;
    preprocessing_step_.drop_label_probabilistically_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_drop_label_probabilistically(::object_detection::protos::DropLabelProbabilistically* drop_label_probabilistically) {
  clear_preprocessing_step();
  if (drop_label_probabilistically) {
    set_has_drop_label_probabilistically();
    preprocessing_step_.drop_label_probabilistically_ = drop_label_probabilistically;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.drop_label_probabilistically)
}

// optional .object_detection.protos.RemapLabels remap_labels = 33;
bool PreprocessingStep::has_remap_labels() const {
  return preprocessing_step_case() == kRemapLabels;
}
void PreprocessingStep::set_has_remap_labels() {
  _oneof_case_[0] = kRemapLabels;
}
void PreprocessingStep::clear_remap_labels() {
  if (has_remap_labels()) {
    delete preprocessing_step_.remap_labels_;
    clear_has_preprocessing_step();
  }
}
 const ::object_detection::protos::RemapLabels& PreprocessingStep::remap_labels() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.PreprocessingStep.remap_labels)
  return has_remap_labels()
      ? *preprocessing_step_.remap_labels_
      : ::object_detection::protos::RemapLabels::default_instance();
}
::object_detection::protos::RemapLabels* PreprocessingStep::mutable_remap_labels() {
  if (!has_remap_labels()) {
    clear_preprocessing_step();
    set_has_remap_labels();
    preprocessing_step_.remap_labels_ = new ::object_detection::protos::RemapLabels;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.PreprocessingStep.remap_labels)
  return preprocessing_step_.remap_labels_;
}
::object_detection::protos::RemapLabels* PreprocessingStep::release_remap_labels() {
  // @@protoc_insertion_point(field_release:object_detection.protos.PreprocessingStep.remap_labels)
  if (has_remap_labels()) {
    clear_has_preprocessing_step();
    ::object_detection::protos::RemapLabels* temp = preprocessing_step_.remap_labels_;
    preprocessing_step_.remap_labels_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PreprocessingStep::set_allocated_remap_labels(::object_detection::protos::RemapLabels* remap_labels) {
  clear_preprocessing_step();
  if (remap_labels) {
    set_has_remap_labels();
    preprocessing_step_.remap_labels_ = remap_labels;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.PreprocessingStep.remap_labels)
}

bool PreprocessingStep::has_preprocessing_step() const {
  return preprocessing_step_case() != PREPROCESSING_STEP_NOT_SET;
}
void PreprocessingStep::clear_has_preprocessing_step() {
  _oneof_case_[0] = PREPROCESSING_STEP_NOT_SET;
}
PreprocessingStep::PreprocessingStepCase PreprocessingStep::preprocessing_step_case() const {
  return PreprocessingStep::PreprocessingStepCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizeImage::kOriginalMinvalFieldNumber;
const int NormalizeImage::kOriginalMaxvalFieldNumber;
const int NormalizeImage::kTargetMinvalFieldNumber;
const int NormalizeImage::kTargetMaxvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizeImage::NormalizeImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.NormalizeImage)
}
NormalizeImage::NormalizeImage(const NormalizeImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&original_minval_, &from.original_minval_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_maxval_) -
    reinterpret_cast<char*>(&original_minval_)) + sizeof(target_maxval_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.NormalizeImage)
}

void NormalizeImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&original_minval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_minval_) -
      reinterpret_cast<char*>(&original_minval_)) + sizeof(target_minval_));
  target_maxval_ = 1;
}

NormalizeImage::~NormalizeImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.NormalizeImage)
  SharedDtor();
}

void NormalizeImage::SharedDtor() {
}

void NormalizeImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizeImage& NormalizeImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

NormalizeImage* NormalizeImage::New(::google::protobuf::Arena* arena) const {
  NormalizeImage* n = new NormalizeImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NormalizeImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.NormalizeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&original_minval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_minval_) -
        reinterpret_cast<char*>(&original_minval_)) + sizeof(target_minval_));
    target_maxval_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizeImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.NormalizeImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float original_minval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_original_minval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &original_minval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float original_maxval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_original_maxval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &original_maxval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float target_minval = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_target_minval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_minval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float target_maxval = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_target_maxval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_maxval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.NormalizeImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.NormalizeImage)
  return false;
#undef DO_
}

void NormalizeImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.NormalizeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float original_minval = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->original_minval(), output);
  }

  // optional float original_maxval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->original_maxval(), output);
  }

  // optional float target_minval = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->target_minval(), output);
  }

  // optional float target_maxval = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->target_maxval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.NormalizeImage)
}

::google::protobuf::uint8* NormalizeImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.NormalizeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float original_minval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->original_minval(), target);
  }

  // optional float original_maxval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->original_maxval(), target);
  }

  // optional float target_minval = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->target_minval(), target);
  }

  // optional float target_maxval = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->target_maxval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.NormalizeImage)
  return target;
}

size_t NormalizeImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.NormalizeImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float original_minval = 1;
    if (has_original_minval()) {
      total_size += 1 + 4;
    }

    // optional float original_maxval = 2;
    if (has_original_maxval()) {
      total_size += 1 + 4;
    }

    // optional float target_minval = 3 [default = 0];
    if (has_target_minval()) {
      total_size += 1 + 4;
    }

    // optional float target_maxval = 4 [default = 1];
    if (has_target_maxval()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.NormalizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizeImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizeImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.NormalizeImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.NormalizeImage)
    MergeFrom(*source);
  }
}

void NormalizeImage::MergeFrom(const NormalizeImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.NormalizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      original_minval_ = from.original_minval_;
    }
    if (cached_has_bits & 0x00000002u) {
      original_maxval_ = from.original_maxval_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_minval_ = from.target_minval_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_maxval_ = from.target_maxval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizeImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.NormalizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeImage::CopyFrom(const NormalizeImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.NormalizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeImage::IsInitialized() const {
  return true;
}

void NormalizeImage::Swap(NormalizeImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizeImage::InternalSwap(NormalizeImage* other) {
  using std::swap;
  swap(original_minval_, other->original_minval_);
  swap(original_maxval_, other->original_maxval_);
  swap(target_minval_, other->target_minval_);
  swap(target_maxval_, other->target_maxval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalizeImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NormalizeImage

// optional float original_minval = 1;
bool NormalizeImage::has_original_minval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NormalizeImage::set_has_original_minval() {
  _has_bits_[0] |= 0x00000001u;
}
void NormalizeImage::clear_has_original_minval() {
  _has_bits_[0] &= ~0x00000001u;
}
void NormalizeImage::clear_original_minval() {
  original_minval_ = 0;
  clear_has_original_minval();
}
float NormalizeImage::original_minval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.NormalizeImage.original_minval)
  return original_minval_;
}
void NormalizeImage::set_original_minval(float value) {
  set_has_original_minval();
  original_minval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.NormalizeImage.original_minval)
}

// optional float original_maxval = 2;
bool NormalizeImage::has_original_maxval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NormalizeImage::set_has_original_maxval() {
  _has_bits_[0] |= 0x00000002u;
}
void NormalizeImage::clear_has_original_maxval() {
  _has_bits_[0] &= ~0x00000002u;
}
void NormalizeImage::clear_original_maxval() {
  original_maxval_ = 0;
  clear_has_original_maxval();
}
float NormalizeImage::original_maxval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.NormalizeImage.original_maxval)
  return original_maxval_;
}
void NormalizeImage::set_original_maxval(float value) {
  set_has_original_maxval();
  original_maxval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.NormalizeImage.original_maxval)
}

// optional float target_minval = 3 [default = 0];
bool NormalizeImage::has_target_minval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NormalizeImage::set_has_target_minval() {
  _has_bits_[0] |= 0x00000004u;
}
void NormalizeImage::clear_has_target_minval() {
  _has_bits_[0] &= ~0x00000004u;
}
void NormalizeImage::clear_target_minval() {
  target_minval_ = 0;
  clear_has_target_minval();
}
float NormalizeImage::target_minval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.NormalizeImage.target_minval)
  return target_minval_;
}
void NormalizeImage::set_target_minval(float value) {
  set_has_target_minval();
  target_minval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.NormalizeImage.target_minval)
}

// optional float target_maxval = 4 [default = 1];
bool NormalizeImage::has_target_maxval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NormalizeImage::set_has_target_maxval() {
  _has_bits_[0] |= 0x00000008u;
}
void NormalizeImage::clear_has_target_maxval() {
  _has_bits_[0] &= ~0x00000008u;
}
void NormalizeImage::clear_target_maxval() {
  target_maxval_ = 1;
  clear_has_target_maxval();
}
float NormalizeImage::target_maxval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.NormalizeImage.target_maxval)
  return target_maxval_;
}
void NormalizeImage::set_target_maxval(float value) {
  set_has_target_maxval();
  target_maxval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.NormalizeImage.target_maxval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomHorizontalFlip::kKeypointFlipPermutationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomHorizontalFlip::RandomHorizontalFlip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomHorizontalFlip)
}
RandomHorizontalFlip::RandomHorizontalFlip(const RandomHorizontalFlip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keypoint_flip_permutation_(from.keypoint_flip_permutation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomHorizontalFlip)
}

void RandomHorizontalFlip::SharedCtor() {
  _cached_size_ = 0;
}

RandomHorizontalFlip::~RandomHorizontalFlip() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomHorizontalFlip)
  SharedDtor();
}

void RandomHorizontalFlip::SharedDtor() {
}

void RandomHorizontalFlip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomHorizontalFlip::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomHorizontalFlip& RandomHorizontalFlip::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomHorizontalFlip* RandomHorizontalFlip::New(::google::protobuf::Arena* arena) const {
  RandomHorizontalFlip* n = new RandomHorizontalFlip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomHorizontalFlip::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomHorizontalFlip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoint_flip_permutation_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomHorizontalFlip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomHorizontalFlip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 keypoint_flip_permutation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_keypoint_flip_permutation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_keypoint_flip_permutation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomHorizontalFlip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomHorizontalFlip)
  return false;
#undef DO_
}

void RandomHorizontalFlip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomHorizontalFlip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  for (int i = 0, n = this->keypoint_flip_permutation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->keypoint_flip_permutation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomHorizontalFlip)
}

::google::protobuf::uint8* RandomHorizontalFlip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomHorizontalFlip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->keypoint_flip_permutation_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomHorizontalFlip)
  return target;
}

size_t RandomHorizontalFlip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomHorizontalFlip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 keypoint_flip_permutation = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->keypoint_flip_permutation_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keypoint_flip_permutation_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomHorizontalFlip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomHorizontalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomHorizontalFlip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomHorizontalFlip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomHorizontalFlip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomHorizontalFlip)
    MergeFrom(*source);
  }
}

void RandomHorizontalFlip::MergeFrom(const RandomHorizontalFlip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomHorizontalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoint_flip_permutation_.MergeFrom(from.keypoint_flip_permutation_);
}

void RandomHorizontalFlip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomHorizontalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomHorizontalFlip::CopyFrom(const RandomHorizontalFlip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomHorizontalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomHorizontalFlip::IsInitialized() const {
  return true;
}

void RandomHorizontalFlip::Swap(RandomHorizontalFlip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomHorizontalFlip::InternalSwap(RandomHorizontalFlip* other) {
  using std::swap;
  keypoint_flip_permutation_.InternalSwap(&other->keypoint_flip_permutation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomHorizontalFlip::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomHorizontalFlip

// repeated int32 keypoint_flip_permutation = 1;
int RandomHorizontalFlip::keypoint_flip_permutation_size() const {
  return keypoint_flip_permutation_.size();
}
void RandomHorizontalFlip::clear_keypoint_flip_permutation() {
  keypoint_flip_permutation_.Clear();
}
::google::protobuf::int32 RandomHorizontalFlip::keypoint_flip_permutation(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomHorizontalFlip.keypoint_flip_permutation)
  return keypoint_flip_permutation_.Get(index);
}
void RandomHorizontalFlip::set_keypoint_flip_permutation(int index, ::google::protobuf::int32 value) {
  keypoint_flip_permutation_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomHorizontalFlip.keypoint_flip_permutation)
}
void RandomHorizontalFlip::add_keypoint_flip_permutation(::google::protobuf::int32 value) {
  keypoint_flip_permutation_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomHorizontalFlip.keypoint_flip_permutation)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandomHorizontalFlip::keypoint_flip_permutation() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomHorizontalFlip.keypoint_flip_permutation)
  return keypoint_flip_permutation_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandomHorizontalFlip::mutable_keypoint_flip_permutation() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomHorizontalFlip.keypoint_flip_permutation)
  return &keypoint_flip_permutation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomVerticalFlip::kKeypointFlipPermutationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomVerticalFlip::RandomVerticalFlip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomVerticalFlip)
}
RandomVerticalFlip::RandomVerticalFlip(const RandomVerticalFlip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keypoint_flip_permutation_(from.keypoint_flip_permutation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomVerticalFlip)
}

void RandomVerticalFlip::SharedCtor() {
  _cached_size_ = 0;
}

RandomVerticalFlip::~RandomVerticalFlip() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomVerticalFlip)
  SharedDtor();
}

void RandomVerticalFlip::SharedDtor() {
}

void RandomVerticalFlip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomVerticalFlip::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomVerticalFlip& RandomVerticalFlip::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomVerticalFlip* RandomVerticalFlip::New(::google::protobuf::Arena* arena) const {
  RandomVerticalFlip* n = new RandomVerticalFlip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomVerticalFlip::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomVerticalFlip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoint_flip_permutation_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomVerticalFlip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomVerticalFlip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 keypoint_flip_permutation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_keypoint_flip_permutation())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_keypoint_flip_permutation())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomVerticalFlip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomVerticalFlip)
  return false;
#undef DO_
}

void RandomVerticalFlip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomVerticalFlip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  for (int i = 0, n = this->keypoint_flip_permutation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->keypoint_flip_permutation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomVerticalFlip)
}

::google::protobuf::uint8* RandomVerticalFlip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomVerticalFlip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 keypoint_flip_permutation = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->keypoint_flip_permutation_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomVerticalFlip)
  return target;
}

size_t RandomVerticalFlip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomVerticalFlip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 keypoint_flip_permutation = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->keypoint_flip_permutation_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->keypoint_flip_permutation_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomVerticalFlip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomVerticalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomVerticalFlip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomVerticalFlip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomVerticalFlip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomVerticalFlip)
    MergeFrom(*source);
  }
}

void RandomVerticalFlip::MergeFrom(const RandomVerticalFlip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomVerticalFlip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoint_flip_permutation_.MergeFrom(from.keypoint_flip_permutation_);
}

void RandomVerticalFlip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomVerticalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomVerticalFlip::CopyFrom(const RandomVerticalFlip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomVerticalFlip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomVerticalFlip::IsInitialized() const {
  return true;
}

void RandomVerticalFlip::Swap(RandomVerticalFlip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomVerticalFlip::InternalSwap(RandomVerticalFlip* other) {
  using std::swap;
  keypoint_flip_permutation_.InternalSwap(&other->keypoint_flip_permutation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomVerticalFlip::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomVerticalFlip

// repeated int32 keypoint_flip_permutation = 1;
int RandomVerticalFlip::keypoint_flip_permutation_size() const {
  return keypoint_flip_permutation_.size();
}
void RandomVerticalFlip::clear_keypoint_flip_permutation() {
  keypoint_flip_permutation_.Clear();
}
::google::protobuf::int32 RandomVerticalFlip::keypoint_flip_permutation(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomVerticalFlip.keypoint_flip_permutation)
  return keypoint_flip_permutation_.Get(index);
}
void RandomVerticalFlip::set_keypoint_flip_permutation(int index, ::google::protobuf::int32 value) {
  keypoint_flip_permutation_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomVerticalFlip.keypoint_flip_permutation)
}
void RandomVerticalFlip::add_keypoint_flip_permutation(::google::protobuf::int32 value) {
  keypoint_flip_permutation_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomVerticalFlip.keypoint_flip_permutation)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RandomVerticalFlip::keypoint_flip_permutation() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomVerticalFlip.keypoint_flip_permutation)
  return keypoint_flip_permutation_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RandomVerticalFlip::mutable_keypoint_flip_permutation() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomVerticalFlip.keypoint_flip_permutation)
  return &keypoint_flip_permutation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomRotation90::RandomRotation90()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomRotation90)
}
RandomRotation90::RandomRotation90(const RandomRotation90& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomRotation90)
}

void RandomRotation90::SharedCtor() {
  _cached_size_ = 0;
}

RandomRotation90::~RandomRotation90() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomRotation90)
  SharedDtor();
}

void RandomRotation90::SharedDtor() {
}

void RandomRotation90::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomRotation90::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomRotation90& RandomRotation90::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomRotation90* RandomRotation90::New(::google::protobuf::Arena* arena) const {
  RandomRotation90* n = new RandomRotation90;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomRotation90::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomRotation90)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomRotation90::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomRotation90)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomRotation90)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomRotation90)
  return false;
#undef DO_
}

void RandomRotation90::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomRotation90)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomRotation90)
}

::google::protobuf::uint8* RandomRotation90::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomRotation90)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomRotation90)
  return target;
}

size_t RandomRotation90::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomRotation90)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomRotation90::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomRotation90)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomRotation90* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomRotation90>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomRotation90)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomRotation90)
    MergeFrom(*source);
  }
}

void RandomRotation90::MergeFrom(const RandomRotation90& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomRotation90)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RandomRotation90::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomRotation90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomRotation90::CopyFrom(const RandomRotation90& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomRotation90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomRotation90::IsInitialized() const {
  return true;
}

void RandomRotation90::Swap(RandomRotation90* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomRotation90::InternalSwap(RandomRotation90* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomRotation90::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomRotation90

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomPixelValueScale::kMinvalFieldNumber;
const int RandomPixelValueScale::kMaxvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomPixelValueScale::RandomPixelValueScale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomPixelValueScale)
}
RandomPixelValueScale::RandomPixelValueScale(const RandomPixelValueScale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minval_, &from.minval_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxval_) -
    reinterpret_cast<char*>(&minval_)) + sizeof(maxval_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomPixelValueScale)
}

void RandomPixelValueScale::SharedCtor() {
  _cached_size_ = 0;
  minval_ = 0.9f;
  maxval_ = 1.1f;
}

RandomPixelValueScale::~RandomPixelValueScale() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomPixelValueScale)
  SharedDtor();
}

void RandomPixelValueScale::SharedDtor() {
}

void RandomPixelValueScale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomPixelValueScale::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomPixelValueScale& RandomPixelValueScale::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomPixelValueScale* RandomPixelValueScale::New(::google::protobuf::Arena* arena) const {
  RandomPixelValueScale* n = new RandomPixelValueScale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomPixelValueScale::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomPixelValueScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    minval_ = 0.9f;
    maxval_ = 1.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomPixelValueScale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomPixelValueScale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float minval = 1 [default = 0.9];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_minval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float maxval = 2 [default = 1.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_maxval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomPixelValueScale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomPixelValueScale)
  return false;
#undef DO_
}

void RandomPixelValueScale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomPixelValueScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float minval = 1 [default = 0.9];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->minval(), output);
  }

  // optional float maxval = 2 [default = 1.1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->maxval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomPixelValueScale)
}

::google::protobuf::uint8* RandomPixelValueScale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomPixelValueScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float minval = 1 [default = 0.9];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->minval(), target);
  }

  // optional float maxval = 2 [default = 1.1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->maxval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomPixelValueScale)
  return target;
}

size_t RandomPixelValueScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomPixelValueScale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float minval = 1 [default = 0.9];
    if (has_minval()) {
      total_size += 1 + 4;
    }

    // optional float maxval = 2 [default = 1.1];
    if (has_maxval()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomPixelValueScale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomPixelValueScale)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomPixelValueScale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomPixelValueScale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomPixelValueScale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomPixelValueScale)
    MergeFrom(*source);
  }
}

void RandomPixelValueScale::MergeFrom(const RandomPixelValueScale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomPixelValueScale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      minval_ = from.minval_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxval_ = from.maxval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomPixelValueScale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomPixelValueScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomPixelValueScale::CopyFrom(const RandomPixelValueScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomPixelValueScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomPixelValueScale::IsInitialized() const {
  return true;
}

void RandomPixelValueScale::Swap(RandomPixelValueScale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomPixelValueScale::InternalSwap(RandomPixelValueScale* other) {
  using std::swap;
  swap(minval_, other->minval_);
  swap(maxval_, other->maxval_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomPixelValueScale::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomPixelValueScale

// optional float minval = 1 [default = 0.9];
bool RandomPixelValueScale::has_minval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomPixelValueScale::set_has_minval() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomPixelValueScale::clear_has_minval() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomPixelValueScale::clear_minval() {
  minval_ = 0.9f;
  clear_has_minval();
}
float RandomPixelValueScale::minval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPixelValueScale.minval)
  return minval_;
}
void RandomPixelValueScale::set_minval(float value) {
  set_has_minval();
  minval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPixelValueScale.minval)
}

// optional float maxval = 2 [default = 1.1];
bool RandomPixelValueScale::has_maxval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomPixelValueScale::set_has_maxval() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomPixelValueScale::clear_has_maxval() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomPixelValueScale::clear_maxval() {
  maxval_ = 1.1f;
  clear_has_maxval();
}
float RandomPixelValueScale::maxval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPixelValueScale.maxval)
  return maxval_;
}
void RandomPixelValueScale::set_maxval(float value) {
  set_has_maxval();
  maxval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPixelValueScale.maxval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomImageScale::kMinScaleRatioFieldNumber;
const int RandomImageScale::kMaxScaleRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomImageScale::RandomImageScale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomImageScale)
}
RandomImageScale::RandomImageScale(const RandomImageScale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_scale_ratio_, &from.min_scale_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_scale_ratio_) -
    reinterpret_cast<char*>(&min_scale_ratio_)) + sizeof(max_scale_ratio_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomImageScale)
}

void RandomImageScale::SharedCtor() {
  _cached_size_ = 0;
  min_scale_ratio_ = 0.5f;
  max_scale_ratio_ = 2;
}

RandomImageScale::~RandomImageScale() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomImageScale)
  SharedDtor();
}

void RandomImageScale::SharedDtor() {
}

void RandomImageScale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomImageScale::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomImageScale& RandomImageScale::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomImageScale* RandomImageScale::New(::google::protobuf::Arena* arena) const {
  RandomImageScale* n = new RandomImageScale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomImageScale::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomImageScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    min_scale_ratio_ = 0.5f;
    max_scale_ratio_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomImageScale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomImageScale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_scale_ratio = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_scale_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_scale_ratio = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_scale_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_scale_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomImageScale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomImageScale)
  return false;
#undef DO_
}

void RandomImageScale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomImageScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_scale_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_scale_ratio(), output);
  }

  // optional float max_scale_ratio = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_scale_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomImageScale)
}

::google::protobuf::uint8* RandomImageScale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomImageScale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_scale_ratio = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_scale_ratio(), target);
  }

  // optional float max_scale_ratio = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_scale_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomImageScale)
  return target;
}

size_t RandomImageScale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomImageScale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float min_scale_ratio = 1 [default = 0.5];
    if (has_min_scale_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_scale_ratio = 2 [default = 2];
    if (has_max_scale_ratio()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomImageScale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomImageScale)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomImageScale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomImageScale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomImageScale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomImageScale)
    MergeFrom(*source);
  }
}

void RandomImageScale::MergeFrom(const RandomImageScale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomImageScale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_scale_ratio_ = from.min_scale_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_scale_ratio_ = from.max_scale_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomImageScale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomImageScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomImageScale::CopyFrom(const RandomImageScale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomImageScale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomImageScale::IsInitialized() const {
  return true;
}

void RandomImageScale::Swap(RandomImageScale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomImageScale::InternalSwap(RandomImageScale* other) {
  using std::swap;
  swap(min_scale_ratio_, other->min_scale_ratio_);
  swap(max_scale_ratio_, other->max_scale_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomImageScale::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomImageScale

// optional float min_scale_ratio = 1 [default = 0.5];
bool RandomImageScale::has_min_scale_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomImageScale::set_has_min_scale_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomImageScale::clear_has_min_scale_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomImageScale::clear_min_scale_ratio() {
  min_scale_ratio_ = 0.5f;
  clear_has_min_scale_ratio();
}
float RandomImageScale::min_scale_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomImageScale.min_scale_ratio)
  return min_scale_ratio_;
}
void RandomImageScale::set_min_scale_ratio(float value) {
  set_has_min_scale_ratio();
  min_scale_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomImageScale.min_scale_ratio)
}

// optional float max_scale_ratio = 2 [default = 2];
bool RandomImageScale::has_max_scale_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomImageScale::set_has_max_scale_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomImageScale::clear_has_max_scale_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomImageScale::clear_max_scale_ratio() {
  max_scale_ratio_ = 2;
  clear_has_max_scale_ratio();
}
float RandomImageScale::max_scale_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomImageScale.max_scale_ratio)
  return max_scale_ratio_;
}
void RandomImageScale::set_max_scale_ratio(float value) {
  set_has_max_scale_ratio();
  max_scale_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomImageScale.max_scale_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomRGBtoGray::kProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomRGBtoGray::RandomRGBtoGray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomRGBtoGray)
}
RandomRGBtoGray::RandomRGBtoGray(const RandomRGBtoGray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomRGBtoGray)
}

void RandomRGBtoGray::SharedCtor() {
  _cached_size_ = 0;
  probability_ = 0.1f;
}

RandomRGBtoGray::~RandomRGBtoGray() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomRGBtoGray)
  SharedDtor();
}

void RandomRGBtoGray::SharedDtor() {
}

void RandomRGBtoGray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomRGBtoGray::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomRGBtoGray& RandomRGBtoGray::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomRGBtoGray* RandomRGBtoGray::New(::google::protobuf::Arena* arena) const {
  RandomRGBtoGray* n = new RandomRGBtoGray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomRGBtoGray::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomRGBtoGray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probability_ = 0.1f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomRGBtoGray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomRGBtoGray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float probability = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomRGBtoGray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomRGBtoGray)
  return false;
#undef DO_
}

void RandomRGBtoGray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomRGBtoGray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float probability = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomRGBtoGray)
}

::google::protobuf::uint8* RandomRGBtoGray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomRGBtoGray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float probability = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomRGBtoGray)
  return target;
}

size_t RandomRGBtoGray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomRGBtoGray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float probability = 1 [default = 0.1];
  if (has_probability()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomRGBtoGray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomRGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomRGBtoGray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomRGBtoGray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomRGBtoGray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomRGBtoGray)
    MergeFrom(*source);
  }
}

void RandomRGBtoGray::MergeFrom(const RandomRGBtoGray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomRGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void RandomRGBtoGray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomRGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomRGBtoGray::CopyFrom(const RandomRGBtoGray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomRGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomRGBtoGray::IsInitialized() const {
  return true;
}

void RandomRGBtoGray::Swap(RandomRGBtoGray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomRGBtoGray::InternalSwap(RandomRGBtoGray* other) {
  using std::swap;
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomRGBtoGray::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomRGBtoGray

// optional float probability = 1 [default = 0.1];
bool RandomRGBtoGray::has_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomRGBtoGray::set_has_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomRGBtoGray::clear_has_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomRGBtoGray::clear_probability() {
  probability_ = 0.1f;
  clear_has_probability();
}
float RandomRGBtoGray::probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomRGBtoGray.probability)
  return probability_;
}
void RandomRGBtoGray::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomRGBtoGray.probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomAdjustBrightness::kMaxDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomAdjustBrightness::RandomAdjustBrightness()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustBrightness)
}
RandomAdjustBrightness::RandomAdjustBrightness(const RandomAdjustBrightness& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_delta_ = from.max_delta_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustBrightness)
}

void RandomAdjustBrightness::SharedCtor() {
  _cached_size_ = 0;
  max_delta_ = 0.2f;
}

RandomAdjustBrightness::~RandomAdjustBrightness() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustBrightness)
  SharedDtor();
}

void RandomAdjustBrightness::SharedDtor() {
}

void RandomAdjustBrightness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomAdjustBrightness::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomAdjustBrightness& RandomAdjustBrightness::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomAdjustBrightness* RandomAdjustBrightness::New(::google::protobuf::Arena* arena) const {
  RandomAdjustBrightness* n = new RandomAdjustBrightness;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomAdjustBrightness::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustBrightness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_delta_ = 0.2f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomAdjustBrightness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomAdjustBrightness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float max_delta = 1 [default = 0.2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_max_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomAdjustBrightness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomAdjustBrightness)
  return false;
#undef DO_
}

void RandomAdjustBrightness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomAdjustBrightness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_delta = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomAdjustBrightness)
}

::google::protobuf::uint8* RandomAdjustBrightness::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustBrightness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_delta = 1 [default = 0.2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustBrightness)
  return target;
}

size_t RandomAdjustBrightness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustBrightness)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float max_delta = 1 [default = 0.2];
  if (has_max_delta()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomAdjustBrightness::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustBrightness)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustBrightness* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomAdjustBrightness>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustBrightness)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustBrightness)
    MergeFrom(*source);
  }
}

void RandomAdjustBrightness::MergeFrom(const RandomAdjustBrightness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustBrightness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_delta()) {
    set_max_delta(from.max_delta());
  }
}

void RandomAdjustBrightness::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustBrightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustBrightness::CopyFrom(const RandomAdjustBrightness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustBrightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustBrightness::IsInitialized() const {
  return true;
}

void RandomAdjustBrightness::Swap(RandomAdjustBrightness* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomAdjustBrightness::InternalSwap(RandomAdjustBrightness* other) {
  using std::swap;
  swap(max_delta_, other->max_delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomAdjustBrightness::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomAdjustBrightness

// optional float max_delta = 1 [default = 0.2];
bool RandomAdjustBrightness::has_max_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomAdjustBrightness::set_has_max_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomAdjustBrightness::clear_has_max_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomAdjustBrightness::clear_max_delta() {
  max_delta_ = 0.2f;
  clear_has_max_delta();
}
float RandomAdjustBrightness::max_delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAdjustBrightness.max_delta)
  return max_delta_;
}
void RandomAdjustBrightness::set_max_delta(float value) {
  set_has_max_delta();
  max_delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAdjustBrightness.max_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomAdjustContrast::kMinDeltaFieldNumber;
const int RandomAdjustContrast::kMaxDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomAdjustContrast::RandomAdjustContrast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustContrast)
}
RandomAdjustContrast::RandomAdjustContrast(const RandomAdjustContrast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_delta_, &from.min_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_delta_) -
    reinterpret_cast<char*>(&min_delta_)) + sizeof(max_delta_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustContrast)
}

void RandomAdjustContrast::SharedCtor() {
  _cached_size_ = 0;
  min_delta_ = 0.8f;
  max_delta_ = 1.25f;
}

RandomAdjustContrast::~RandomAdjustContrast() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustContrast)
  SharedDtor();
}

void RandomAdjustContrast::SharedDtor() {
}

void RandomAdjustContrast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomAdjustContrast::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomAdjustContrast& RandomAdjustContrast::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomAdjustContrast* RandomAdjustContrast::New(::google::protobuf::Arena* arena) const {
  RandomAdjustContrast* n = new RandomAdjustContrast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomAdjustContrast::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustContrast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    min_delta_ = 0.8f;
    max_delta_ = 1.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomAdjustContrast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomAdjustContrast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_delta = 1 [default = 0.8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_delta = 2 [default = 1.25];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomAdjustContrast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomAdjustContrast)
  return false;
#undef DO_
}

void RandomAdjustContrast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomAdjustContrast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_delta = 1 [default = 0.8];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_delta(), output);
  }

  // optional float max_delta = 2 [default = 1.25];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomAdjustContrast)
}

::google::protobuf::uint8* RandomAdjustContrast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustContrast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_delta = 1 [default = 0.8];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_delta(), target);
  }

  // optional float max_delta = 2 [default = 1.25];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustContrast)
  return target;
}

size_t RandomAdjustContrast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustContrast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float min_delta = 1 [default = 0.8];
    if (has_min_delta()) {
      total_size += 1 + 4;
    }

    // optional float max_delta = 2 [default = 1.25];
    if (has_max_delta()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomAdjustContrast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustContrast)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustContrast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomAdjustContrast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustContrast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustContrast)
    MergeFrom(*source);
  }
}

void RandomAdjustContrast::MergeFrom(const RandomAdjustContrast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustContrast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_delta_ = from.min_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_delta_ = from.max_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomAdjustContrast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustContrast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustContrast::CopyFrom(const RandomAdjustContrast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustContrast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustContrast::IsInitialized() const {
  return true;
}

void RandomAdjustContrast::Swap(RandomAdjustContrast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomAdjustContrast::InternalSwap(RandomAdjustContrast* other) {
  using std::swap;
  swap(min_delta_, other->min_delta_);
  swap(max_delta_, other->max_delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomAdjustContrast::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomAdjustContrast

// optional float min_delta = 1 [default = 0.8];
bool RandomAdjustContrast::has_min_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomAdjustContrast::set_has_min_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomAdjustContrast::clear_has_min_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomAdjustContrast::clear_min_delta() {
  min_delta_ = 0.8f;
  clear_has_min_delta();
}
float RandomAdjustContrast::min_delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAdjustContrast.min_delta)
  return min_delta_;
}
void RandomAdjustContrast::set_min_delta(float value) {
  set_has_min_delta();
  min_delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAdjustContrast.min_delta)
}

// optional float max_delta = 2 [default = 1.25];
bool RandomAdjustContrast::has_max_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomAdjustContrast::set_has_max_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomAdjustContrast::clear_has_max_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomAdjustContrast::clear_max_delta() {
  max_delta_ = 1.25f;
  clear_has_max_delta();
}
float RandomAdjustContrast::max_delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAdjustContrast.max_delta)
  return max_delta_;
}
void RandomAdjustContrast::set_max_delta(float value) {
  set_has_max_delta();
  max_delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAdjustContrast.max_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomAdjustHue::kMaxDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomAdjustHue::RandomAdjustHue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustHue)
}
RandomAdjustHue::RandomAdjustHue(const RandomAdjustHue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_delta_ = from.max_delta_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustHue)
}

void RandomAdjustHue::SharedCtor() {
  _cached_size_ = 0;
  max_delta_ = 0.02f;
}

RandomAdjustHue::~RandomAdjustHue() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustHue)
  SharedDtor();
}

void RandomAdjustHue::SharedDtor() {
}

void RandomAdjustHue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomAdjustHue::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomAdjustHue& RandomAdjustHue::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomAdjustHue* RandomAdjustHue::New(::google::protobuf::Arena* arena) const {
  RandomAdjustHue* n = new RandomAdjustHue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomAdjustHue::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustHue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_delta_ = 0.02f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomAdjustHue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomAdjustHue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float max_delta = 1 [default = 0.02];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_max_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomAdjustHue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomAdjustHue)
  return false;
#undef DO_
}

void RandomAdjustHue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomAdjustHue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_delta = 1 [default = 0.02];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomAdjustHue)
}

::google::protobuf::uint8* RandomAdjustHue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustHue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_delta = 1 [default = 0.02];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustHue)
  return target;
}

size_t RandomAdjustHue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustHue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float max_delta = 1 [default = 0.02];
  if (has_max_delta()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomAdjustHue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustHue)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustHue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomAdjustHue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustHue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustHue)
    MergeFrom(*source);
  }
}

void RandomAdjustHue::MergeFrom(const RandomAdjustHue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustHue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_delta()) {
    set_max_delta(from.max_delta());
  }
}

void RandomAdjustHue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustHue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustHue::CopyFrom(const RandomAdjustHue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustHue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustHue::IsInitialized() const {
  return true;
}

void RandomAdjustHue::Swap(RandomAdjustHue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomAdjustHue::InternalSwap(RandomAdjustHue* other) {
  using std::swap;
  swap(max_delta_, other->max_delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomAdjustHue::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomAdjustHue

// optional float max_delta = 1 [default = 0.02];
bool RandomAdjustHue::has_max_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomAdjustHue::set_has_max_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomAdjustHue::clear_has_max_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomAdjustHue::clear_max_delta() {
  max_delta_ = 0.02f;
  clear_has_max_delta();
}
float RandomAdjustHue::max_delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAdjustHue.max_delta)
  return max_delta_;
}
void RandomAdjustHue::set_max_delta(float value) {
  set_has_max_delta();
  max_delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAdjustHue.max_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomAdjustSaturation::kMinDeltaFieldNumber;
const int RandomAdjustSaturation::kMaxDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomAdjustSaturation::RandomAdjustSaturation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAdjustSaturation)
}
RandomAdjustSaturation::RandomAdjustSaturation(const RandomAdjustSaturation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_delta_, &from.min_delta_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_delta_) -
    reinterpret_cast<char*>(&min_delta_)) + sizeof(max_delta_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAdjustSaturation)
}

void RandomAdjustSaturation::SharedCtor() {
  _cached_size_ = 0;
  min_delta_ = 0.8f;
  max_delta_ = 1.25f;
}

RandomAdjustSaturation::~RandomAdjustSaturation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAdjustSaturation)
  SharedDtor();
}

void RandomAdjustSaturation::SharedDtor() {
}

void RandomAdjustSaturation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomAdjustSaturation::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomAdjustSaturation& RandomAdjustSaturation::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomAdjustSaturation* RandomAdjustSaturation::New(::google::protobuf::Arena* arena) const {
  RandomAdjustSaturation* n = new RandomAdjustSaturation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomAdjustSaturation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAdjustSaturation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    min_delta_ = 0.8f;
    max_delta_ = 1.25f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomAdjustSaturation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomAdjustSaturation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_delta = 1 [default = 0.8];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_delta = 2 [default = 1.25];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomAdjustSaturation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomAdjustSaturation)
  return false;
#undef DO_
}

void RandomAdjustSaturation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomAdjustSaturation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_delta = 1 [default = 0.8];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_delta(), output);
  }

  // optional float max_delta = 2 [default = 1.25];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomAdjustSaturation)
}

::google::protobuf::uint8* RandomAdjustSaturation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAdjustSaturation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_delta = 1 [default = 0.8];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_delta(), target);
  }

  // optional float max_delta = 2 [default = 1.25];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAdjustSaturation)
  return target;
}

size_t RandomAdjustSaturation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAdjustSaturation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float min_delta = 1 [default = 0.8];
    if (has_min_delta()) {
      total_size += 1 + 4;
    }

    // optional float max_delta = 2 [default = 1.25];
    if (has_max_delta()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomAdjustSaturation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAdjustSaturation)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAdjustSaturation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomAdjustSaturation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAdjustSaturation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAdjustSaturation)
    MergeFrom(*source);
  }
}

void RandomAdjustSaturation::MergeFrom(const RandomAdjustSaturation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAdjustSaturation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_delta_ = from.min_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_delta_ = from.max_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomAdjustSaturation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAdjustSaturation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAdjustSaturation::CopyFrom(const RandomAdjustSaturation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAdjustSaturation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAdjustSaturation::IsInitialized() const {
  return true;
}

void RandomAdjustSaturation::Swap(RandomAdjustSaturation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomAdjustSaturation::InternalSwap(RandomAdjustSaturation* other) {
  using std::swap;
  swap(min_delta_, other->min_delta_);
  swap(max_delta_, other->max_delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomAdjustSaturation::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomAdjustSaturation

// optional float min_delta = 1 [default = 0.8];
bool RandomAdjustSaturation::has_min_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomAdjustSaturation::set_has_min_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomAdjustSaturation::clear_has_min_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomAdjustSaturation::clear_min_delta() {
  min_delta_ = 0.8f;
  clear_has_min_delta();
}
float RandomAdjustSaturation::min_delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAdjustSaturation.min_delta)
  return min_delta_;
}
void RandomAdjustSaturation::set_min_delta(float value) {
  set_has_min_delta();
  min_delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAdjustSaturation.min_delta)
}

// optional float max_delta = 2 [default = 1.25];
bool RandomAdjustSaturation::has_max_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomAdjustSaturation::set_has_max_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomAdjustSaturation::clear_has_max_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomAdjustSaturation::clear_max_delta() {
  max_delta_ = 1.25f;
  clear_has_max_delta();
}
float RandomAdjustSaturation::max_delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAdjustSaturation.max_delta)
  return max_delta_;
}
void RandomAdjustSaturation::set_max_delta(float value) {
  set_has_max_delta();
  max_delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAdjustSaturation.max_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomDistortColor::kColorOrderingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomDistortColor::RandomDistortColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomDistortColor)
}
RandomDistortColor::RandomDistortColor(const RandomDistortColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ordering_ = from.color_ordering_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomDistortColor)
}

void RandomDistortColor::SharedCtor() {
  _cached_size_ = 0;
  color_ordering_ = 0;
}

RandomDistortColor::~RandomDistortColor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomDistortColor)
  SharedDtor();
}

void RandomDistortColor::SharedDtor() {
}

void RandomDistortColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomDistortColor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomDistortColor& RandomDistortColor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomDistortColor* RandomDistortColor::New(::google::protobuf::Arena* arena) const {
  RandomDistortColor* n = new RandomDistortColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomDistortColor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomDistortColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ordering_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomDistortColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomDistortColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 color_ordering = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_color_ordering();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_ordering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomDistortColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomDistortColor)
  return false;
#undef DO_
}

void RandomDistortColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomDistortColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 color_ordering = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color_ordering(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomDistortColor)
}

::google::protobuf::uint8* RandomDistortColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomDistortColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 color_ordering = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color_ordering(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomDistortColor)
  return target;
}

size_t RandomDistortColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomDistortColor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 color_ordering = 1;
  if (has_color_ordering()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color_ordering());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomDistortColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomDistortColor)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomDistortColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomDistortColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomDistortColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomDistortColor)
    MergeFrom(*source);
  }
}

void RandomDistortColor::MergeFrom(const RandomDistortColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomDistortColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color_ordering()) {
    set_color_ordering(from.color_ordering());
  }
}

void RandomDistortColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomDistortColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomDistortColor::CopyFrom(const RandomDistortColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomDistortColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomDistortColor::IsInitialized() const {
  return true;
}

void RandomDistortColor::Swap(RandomDistortColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomDistortColor::InternalSwap(RandomDistortColor* other) {
  using std::swap;
  swap(color_ordering_, other->color_ordering_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomDistortColor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomDistortColor

// optional int32 color_ordering = 1;
bool RandomDistortColor::has_color_ordering() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomDistortColor::set_has_color_ordering() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomDistortColor::clear_has_color_ordering() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomDistortColor::clear_color_ordering() {
  color_ordering_ = 0;
  clear_has_color_ordering();
}
::google::protobuf::int32 RandomDistortColor::color_ordering() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomDistortColor.color_ordering)
  return color_ordering_;
}
void RandomDistortColor::set_color_ordering(::google::protobuf::int32 value) {
  set_has_color_ordering();
  color_ordering_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomDistortColor.color_ordering)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomJitterBoxes::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomJitterBoxes::RandomJitterBoxes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomJitterBoxes)
}
RandomJitterBoxes::RandomJitterBoxes(const RandomJitterBoxes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomJitterBoxes)
}

void RandomJitterBoxes::SharedCtor() {
  _cached_size_ = 0;
  ratio_ = 0.05f;
}

RandomJitterBoxes::~RandomJitterBoxes() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomJitterBoxes)
  SharedDtor();
}

void RandomJitterBoxes::SharedDtor() {
}

void RandomJitterBoxes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomJitterBoxes::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomJitterBoxes& RandomJitterBoxes::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomJitterBoxes* RandomJitterBoxes::New(::google::protobuf::Arena* arena) const {
  RandomJitterBoxes* n = new RandomJitterBoxes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomJitterBoxes::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomJitterBoxes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0.05f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomJitterBoxes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomJitterBoxes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ratio = 1 [default = 0.05];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomJitterBoxes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomJitterBoxes)
  return false;
#undef DO_
}

void RandomJitterBoxes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomJitterBoxes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1 [default = 0.05];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomJitterBoxes)
}

::google::protobuf::uint8* RandomJitterBoxes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomJitterBoxes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ratio = 1 [default = 0.05];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomJitterBoxes)
  return target;
}

size_t RandomJitterBoxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomJitterBoxes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float ratio = 1 [default = 0.05];
  if (has_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomJitterBoxes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomJitterBoxes)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomJitterBoxes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomJitterBoxes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomJitterBoxes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomJitterBoxes)
    MergeFrom(*source);
  }
}

void RandomJitterBoxes::MergeFrom(const RandomJitterBoxes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomJitterBoxes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ratio()) {
    set_ratio(from.ratio());
  }
}

void RandomJitterBoxes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomJitterBoxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomJitterBoxes::CopyFrom(const RandomJitterBoxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomJitterBoxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomJitterBoxes::IsInitialized() const {
  return true;
}

void RandomJitterBoxes::Swap(RandomJitterBoxes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomJitterBoxes::InternalSwap(RandomJitterBoxes* other) {
  using std::swap;
  swap(ratio_, other->ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomJitterBoxes::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomJitterBoxes

// optional float ratio = 1 [default = 0.05];
bool RandomJitterBoxes::has_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomJitterBoxes::set_has_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomJitterBoxes::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomJitterBoxes::clear_ratio() {
  ratio_ = 0.05f;
  clear_has_ratio();
}
float RandomJitterBoxes::ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomJitterBoxes.ratio)
  return ratio_;
}
void RandomJitterBoxes::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomJitterBoxes.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomCropImage::kMinObjectCoveredFieldNumber;
const int RandomCropImage::kMinAspectRatioFieldNumber;
const int RandomCropImage::kMaxAspectRatioFieldNumber;
const int RandomCropImage::kMinAreaFieldNumber;
const int RandomCropImage::kMaxAreaFieldNumber;
const int RandomCropImage::kOverlapThreshFieldNumber;
const int RandomCropImage::kClipBoxesFieldNumber;
const int RandomCropImage::kRandomCoefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomCropImage::RandomCropImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomCropImage)
}
RandomCropImage::RandomCropImage(const RandomCropImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_coef_, &from.random_coef_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_thresh_) -
    reinterpret_cast<char*>(&random_coef_)) + sizeof(overlap_thresh_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomCropImage)
}

void RandomCropImage::SharedCtor() {
  _cached_size_ = 0;
  random_coef_ = 0;
  clip_boxes_ = true;
  min_object_covered_ = 1;
  min_aspect_ratio_ = 0.75f;
  max_aspect_ratio_ = 1.33f;
  min_area_ = 0.1f;
  max_area_ = 1;
  overlap_thresh_ = 0.3f;
}

RandomCropImage::~RandomCropImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomCropImage)
  SharedDtor();
}

void RandomCropImage::SharedDtor() {
}

void RandomCropImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomCropImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomCropImage& RandomCropImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomCropImage* RandomCropImage::New(::google::protobuf::Arena* arena) const {
  RandomCropImage* n = new RandomCropImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomCropImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomCropImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    random_coef_ = 0;
    clip_boxes_ = true;
    min_object_covered_ = 1;
    min_aspect_ratio_ = 0.75f;
    max_aspect_ratio_ = 1.33f;
    min_area_ = 0.1f;
    max_area_ = 1;
    overlap_thresh_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomCropImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomCropImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_object_covered = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_object_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_aspect_ratio = 2 [default = 0.75];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_aspect_ratio = 3 [default = 1.33];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_area = 4 [default = 0.1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_area = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 6 [default = 0.3];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_coef = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_random_coef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomCropImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomCropImage)
  return false;
#undef DO_
}

void RandomCropImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomCropImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_object_covered(), output);
  }

  // optional float min_aspect_ratio = 2 [default = 0.75];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_aspect_ratio(), output);
  }

  // optional float max_aspect_ratio = 3 [default = 1.33];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_aspect_ratio(), output);
  }

  // optional float min_area = 4 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_area(), output);
  }

  // optional float max_area = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_area(), output);
  }

  // optional float overlap_thresh = 6 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->overlap_thresh(), output);
  }

  // optional float random_coef = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_coef(), output);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomCropImage)
}

::google::protobuf::uint8* RandomCropImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomCropImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2 [default = 0.75];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3 [default = 1.33];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_aspect_ratio(), target);
  }

  // optional float min_area = 4 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_area(), target);
  }

  // optional float max_area = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_area(), target);
  }

  // optional float overlap_thresh = 6 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->overlap_thresh(), target);
  }

  // optional float random_coef = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomCropImage)
  return target;
}

size_t RandomCropImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomCropImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float random_coef = 7 [default = 0];
    if (has_random_coef()) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

    // optional float min_object_covered = 1 [default = 1];
    if (has_min_object_covered()) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2 [default = 0.75];
    if (has_min_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3 [default = 1.33];
    if (has_max_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4 [default = 0.1];
    if (has_min_area()) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5 [default = 1];
    if (has_max_area()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6 [default = 0.3];
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomCropImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomCropImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomCropImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomCropImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomCropImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomCropImage)
    MergeFrom(*source);
  }
}

void RandomCropImage::MergeFrom(const RandomCropImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomCropImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000002u) {
      clip_boxes_ = from.clip_boxes_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000080u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomCropImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomCropImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomCropImage::CopyFrom(const RandomCropImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomCropImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomCropImage::IsInitialized() const {
  return true;
}

void RandomCropImage::Swap(RandomCropImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomCropImage::InternalSwap(RandomCropImage* other) {
  using std::swap;
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomCropImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomCropImage

// optional float min_object_covered = 1 [default = 1];
bool RandomCropImage::has_min_object_covered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RandomCropImage::set_has_min_object_covered() {
  _has_bits_[0] |= 0x00000004u;
}
void RandomCropImage::clear_has_min_object_covered() {
  _has_bits_[0] &= ~0x00000004u;
}
void RandomCropImage::clear_min_object_covered() {
  min_object_covered_ = 1;
  clear_has_min_object_covered();
}
float RandomCropImage::min_object_covered() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.min_object_covered)
  return min_object_covered_;
}
void RandomCropImage::set_min_object_covered(float value) {
  set_has_min_object_covered();
  min_object_covered_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.min_object_covered)
}

// optional float min_aspect_ratio = 2 [default = 0.75];
bool RandomCropImage::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RandomCropImage::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void RandomCropImage::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void RandomCropImage::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0.75f;
  clear_has_min_aspect_ratio();
}
float RandomCropImage::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.min_aspect_ratio)
  return min_aspect_ratio_;
}
void RandomCropImage::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.min_aspect_ratio)
}

// optional float max_aspect_ratio = 3 [default = 1.33];
bool RandomCropImage::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RandomCropImage::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
void RandomCropImage::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
void RandomCropImage::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 1.33f;
  clear_has_max_aspect_ratio();
}
float RandomCropImage::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.max_aspect_ratio)
  return max_aspect_ratio_;
}
void RandomCropImage::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.max_aspect_ratio)
}

// optional float min_area = 4 [default = 0.1];
bool RandomCropImage::has_min_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RandomCropImage::set_has_min_area() {
  _has_bits_[0] |= 0x00000020u;
}
void RandomCropImage::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000020u;
}
void RandomCropImage::clear_min_area() {
  min_area_ = 0.1f;
  clear_has_min_area();
}
float RandomCropImage::min_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.min_area)
  return min_area_;
}
void RandomCropImage::set_min_area(float value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.min_area)
}

// optional float max_area = 5 [default = 1];
bool RandomCropImage::has_max_area() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RandomCropImage::set_has_max_area() {
  _has_bits_[0] |= 0x00000040u;
}
void RandomCropImage::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000040u;
}
void RandomCropImage::clear_max_area() {
  max_area_ = 1;
  clear_has_max_area();
}
float RandomCropImage::max_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.max_area)
  return max_area_;
}
void RandomCropImage::set_max_area(float value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.max_area)
}

// optional float overlap_thresh = 6 [default = 0.3];
bool RandomCropImage::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RandomCropImage::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000080u;
}
void RandomCropImage::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000080u;
}
void RandomCropImage::clear_overlap_thresh() {
  overlap_thresh_ = 0.3f;
  clear_has_overlap_thresh();
}
float RandomCropImage::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.overlap_thresh)
  return overlap_thresh_;
}
void RandomCropImage::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.overlap_thresh)
}

// optional bool clip_boxes = 8 [default = true];
bool RandomCropImage::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomCropImage::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomCropImage::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomCropImage::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool RandomCropImage::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.clip_boxes)
  return clip_boxes_;
}
void RandomCropImage::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.clip_boxes)
}

// optional float random_coef = 7 [default = 0];
bool RandomCropImage::has_random_coef() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomCropImage::set_has_random_coef() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomCropImage::clear_has_random_coef() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomCropImage::clear_random_coef() {
  random_coef_ = 0;
  clear_has_random_coef();
}
float RandomCropImage::random_coef() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropImage.random_coef)
  return random_coef_;
}
void RandomCropImage::set_random_coef(float value) {
  set_has_random_coef();
  random_coef_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropImage.random_coef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomPadImage::kMinImageHeightFieldNumber;
const int RandomPadImage::kMinImageWidthFieldNumber;
const int RandomPadImage::kMaxImageHeightFieldNumber;
const int RandomPadImage::kMaxImageWidthFieldNumber;
const int RandomPadImage::kPadColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomPadImage::RandomPadImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomPadImage)
}
RandomPadImage::RandomPadImage(const RandomPadImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pad_color_(from.pad_color_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_image_height_, &from.min_image_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_image_width_) -
    reinterpret_cast<char*>(&min_image_height_)) + sizeof(max_image_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomPadImage)
}

void RandomPadImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_image_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_image_width_) -
      reinterpret_cast<char*>(&min_image_height_)) + sizeof(max_image_width_));
}

RandomPadImage::~RandomPadImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomPadImage)
  SharedDtor();
}

void RandomPadImage::SharedDtor() {
}

void RandomPadImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomPadImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomPadImage& RandomPadImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomPadImage* RandomPadImage::New(::google::protobuf::Arena* arena) const {
  RandomPadImage* n = new RandomPadImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomPadImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomPadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_color_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_image_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_image_width_) -
        reinterpret_cast<char*>(&min_image_height_)) + sizeof(max_image_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomPadImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomPadImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_image_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_image_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_image_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_image_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pad_color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_pad_color())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pad_color())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomPadImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomPadImage)
  return false;
#undef DO_
}

void RandomPadImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomPadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_image_height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_image_height(), output);
  }

  // optional int32 min_image_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_image_width(), output);
  }

  // optional int32 max_image_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_image_height(), output);
  }

  // optional int32 max_image_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_image_width(), output);
  }

  // repeated float pad_color = 5;
  for (int i = 0, n = this->pad_color_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->pad_color(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomPadImage)
}

::google::protobuf::uint8* RandomPadImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomPadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_image_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_image_height(), target);
  }

  // optional int32 min_image_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_image_width(), target);
  }

  // optional int32 max_image_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_image_height(), target);
  }

  // optional int32 max_image_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_image_width(), target);
  }

  // repeated float pad_color = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->pad_color_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomPadImage)
  return target;
}

size_t RandomPadImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomPadImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float pad_color = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->pad_color_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_color_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 min_image_height = 1;
    if (has_min_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_image_height());
    }

    // optional int32 min_image_width = 2;
    if (has_min_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_image_width());
    }

    // optional int32 max_image_height = 3;
    if (has_max_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_image_height());
    }

    // optional int32 max_image_width = 4;
    if (has_max_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_image_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomPadImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomPadImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomPadImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomPadImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomPadImage)
    MergeFrom(*source);
  }
}

void RandomPadImage::MergeFrom(const RandomPadImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_color_.MergeFrom(from.pad_color_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_image_height_ = from.min_image_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_image_width_ = from.min_image_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_image_height_ = from.max_image_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_image_width_ = from.max_image_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomPadImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomPadImage::CopyFrom(const RandomPadImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomPadImage::IsInitialized() const {
  return true;
}

void RandomPadImage::Swap(RandomPadImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomPadImage::InternalSwap(RandomPadImage* other) {
  using std::swap;
  pad_color_.InternalSwap(&other->pad_color_);
  swap(min_image_height_, other->min_image_height_);
  swap(min_image_width_, other->min_image_width_);
  swap(max_image_height_, other->max_image_height_);
  swap(max_image_width_, other->max_image_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomPadImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomPadImage

// optional int32 min_image_height = 1;
bool RandomPadImage::has_min_image_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomPadImage::set_has_min_image_height() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomPadImage::clear_has_min_image_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomPadImage::clear_min_image_height() {
  min_image_height_ = 0;
  clear_has_min_image_height();
}
::google::protobuf::int32 RandomPadImage::min_image_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPadImage.min_image_height)
  return min_image_height_;
}
void RandomPadImage::set_min_image_height(::google::protobuf::int32 value) {
  set_has_min_image_height();
  min_image_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPadImage.min_image_height)
}

// optional int32 min_image_width = 2;
bool RandomPadImage::has_min_image_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomPadImage::set_has_min_image_width() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomPadImage::clear_has_min_image_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomPadImage::clear_min_image_width() {
  min_image_width_ = 0;
  clear_has_min_image_width();
}
::google::protobuf::int32 RandomPadImage::min_image_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPadImage.min_image_width)
  return min_image_width_;
}
void RandomPadImage::set_min_image_width(::google::protobuf::int32 value) {
  set_has_min_image_width();
  min_image_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPadImage.min_image_width)
}

// optional int32 max_image_height = 3;
bool RandomPadImage::has_max_image_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RandomPadImage::set_has_max_image_height() {
  _has_bits_[0] |= 0x00000004u;
}
void RandomPadImage::clear_has_max_image_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void RandomPadImage::clear_max_image_height() {
  max_image_height_ = 0;
  clear_has_max_image_height();
}
::google::protobuf::int32 RandomPadImage::max_image_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPadImage.max_image_height)
  return max_image_height_;
}
void RandomPadImage::set_max_image_height(::google::protobuf::int32 value) {
  set_has_max_image_height();
  max_image_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPadImage.max_image_height)
}

// optional int32 max_image_width = 4;
bool RandomPadImage::has_max_image_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RandomPadImage::set_has_max_image_width() {
  _has_bits_[0] |= 0x00000008u;
}
void RandomPadImage::clear_has_max_image_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void RandomPadImage::clear_max_image_width() {
  max_image_width_ = 0;
  clear_has_max_image_width();
}
::google::protobuf::int32 RandomPadImage::max_image_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPadImage.max_image_width)
  return max_image_width_;
}
void RandomPadImage::set_max_image_width(::google::protobuf::int32 value) {
  set_has_max_image_width();
  max_image_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPadImage.max_image_width)
}

// repeated float pad_color = 5;
int RandomPadImage::pad_color_size() const {
  return pad_color_.size();
}
void RandomPadImage::clear_pad_color() {
  pad_color_.Clear();
}
float RandomPadImage::pad_color(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomPadImage.pad_color)
  return pad_color_.Get(index);
}
void RandomPadImage::set_pad_color(int index, float value) {
  pad_color_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomPadImage.pad_color)
}
void RandomPadImage::add_pad_color(float value) {
  pad_color_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomPadImage.pad_color)
}
const ::google::protobuf::RepeatedField< float >&
RandomPadImage::pad_color() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomPadImage.pad_color)
  return pad_color_;
}
::google::protobuf::RepeatedField< float >*
RandomPadImage::mutable_pad_color() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomPadImage.pad_color)
  return &pad_color_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomAbsolutePadImage::kMaxHeightPaddingFieldNumber;
const int RandomAbsolutePadImage::kMaxWidthPaddingFieldNumber;
const int RandomAbsolutePadImage::kPadColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomAbsolutePadImage::RandomAbsolutePadImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomAbsolutePadImage)
}
RandomAbsolutePadImage::RandomAbsolutePadImage(const RandomAbsolutePadImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pad_color_(from.pad_color_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_height_padding_, &from.max_height_padding_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_width_padding_) -
    reinterpret_cast<char*>(&max_height_padding_)) + sizeof(max_width_padding_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomAbsolutePadImage)
}

void RandomAbsolutePadImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_height_padding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_width_padding_) -
      reinterpret_cast<char*>(&max_height_padding_)) + sizeof(max_width_padding_));
}

RandomAbsolutePadImage::~RandomAbsolutePadImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomAbsolutePadImage)
  SharedDtor();
}

void RandomAbsolutePadImage::SharedDtor() {
}

void RandomAbsolutePadImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomAbsolutePadImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomAbsolutePadImage& RandomAbsolutePadImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomAbsolutePadImage* RandomAbsolutePadImage::New(::google::protobuf::Arena* arena) const {
  RandomAbsolutePadImage* n = new RandomAbsolutePadImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomAbsolutePadImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomAbsolutePadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pad_color_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&max_height_padding_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_width_padding_) -
        reinterpret_cast<char*>(&max_height_padding_)) + sizeof(max_width_padding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomAbsolutePadImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomAbsolutePadImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_height_padding = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_height_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_height_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_width_padding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_width_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_width_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pad_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_pad_color())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pad_color())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomAbsolutePadImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomAbsolutePadImage)
  return false;
#undef DO_
}

void RandomAbsolutePadImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomAbsolutePadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_height_padding = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_height_padding(), output);
  }

  // optional int32 max_width_padding = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_width_padding(), output);
  }

  // repeated float pad_color = 3;
  for (int i = 0, n = this->pad_color_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->pad_color(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomAbsolutePadImage)
}

::google::protobuf::uint8* RandomAbsolutePadImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomAbsolutePadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_height_padding = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_height_padding(), target);
  }

  // optional int32 max_width_padding = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_width_padding(), target);
  }

  // repeated float pad_color = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->pad_color_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomAbsolutePadImage)
  return target;
}

size_t RandomAbsolutePadImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomAbsolutePadImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float pad_color = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pad_color_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_color_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 max_height_padding = 1;
    if (has_max_height_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_height_padding());
    }

    // optional int32 max_width_padding = 2;
    if (has_max_width_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_width_padding());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomAbsolutePadImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomAbsolutePadImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomAbsolutePadImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomAbsolutePadImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomAbsolutePadImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomAbsolutePadImage)
    MergeFrom(*source);
  }
}

void RandomAbsolutePadImage::MergeFrom(const RandomAbsolutePadImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomAbsolutePadImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pad_color_.MergeFrom(from.pad_color_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      max_height_padding_ = from.max_height_padding_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_width_padding_ = from.max_width_padding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomAbsolutePadImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomAbsolutePadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomAbsolutePadImage::CopyFrom(const RandomAbsolutePadImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomAbsolutePadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomAbsolutePadImage::IsInitialized() const {
  return true;
}

void RandomAbsolutePadImage::Swap(RandomAbsolutePadImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomAbsolutePadImage::InternalSwap(RandomAbsolutePadImage* other) {
  using std::swap;
  pad_color_.InternalSwap(&other->pad_color_);
  swap(max_height_padding_, other->max_height_padding_);
  swap(max_width_padding_, other->max_width_padding_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomAbsolutePadImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomAbsolutePadImage

// optional int32 max_height_padding = 1;
bool RandomAbsolutePadImage::has_max_height_padding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomAbsolutePadImage::set_has_max_height_padding() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomAbsolutePadImage::clear_has_max_height_padding() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomAbsolutePadImage::clear_max_height_padding() {
  max_height_padding_ = 0;
  clear_has_max_height_padding();
}
::google::protobuf::int32 RandomAbsolutePadImage::max_height_padding() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAbsolutePadImage.max_height_padding)
  return max_height_padding_;
}
void RandomAbsolutePadImage::set_max_height_padding(::google::protobuf::int32 value) {
  set_has_max_height_padding();
  max_height_padding_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAbsolutePadImage.max_height_padding)
}

// optional int32 max_width_padding = 2;
bool RandomAbsolutePadImage::has_max_width_padding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomAbsolutePadImage::set_has_max_width_padding() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomAbsolutePadImage::clear_has_max_width_padding() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomAbsolutePadImage::clear_max_width_padding() {
  max_width_padding_ = 0;
  clear_has_max_width_padding();
}
::google::protobuf::int32 RandomAbsolutePadImage::max_width_padding() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAbsolutePadImage.max_width_padding)
  return max_width_padding_;
}
void RandomAbsolutePadImage::set_max_width_padding(::google::protobuf::int32 value) {
  set_has_max_width_padding();
  max_width_padding_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAbsolutePadImage.max_width_padding)
}

// repeated float pad_color = 3;
int RandomAbsolutePadImage::pad_color_size() const {
  return pad_color_.size();
}
void RandomAbsolutePadImage::clear_pad_color() {
  pad_color_.Clear();
}
float RandomAbsolutePadImage::pad_color(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomAbsolutePadImage.pad_color)
  return pad_color_.Get(index);
}
void RandomAbsolutePadImage::set_pad_color(int index, float value) {
  pad_color_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomAbsolutePadImage.pad_color)
}
void RandomAbsolutePadImage::add_pad_color(float value) {
  pad_color_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomAbsolutePadImage.pad_color)
}
const ::google::protobuf::RepeatedField< float >&
RandomAbsolutePadImage::pad_color() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomAbsolutePadImage.pad_color)
  return pad_color_;
}
::google::protobuf::RepeatedField< float >*
RandomAbsolutePadImage::mutable_pad_color() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomAbsolutePadImage.pad_color)
  return &pad_color_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomCropPadImage::kMinObjectCoveredFieldNumber;
const int RandomCropPadImage::kMinAspectRatioFieldNumber;
const int RandomCropPadImage::kMaxAspectRatioFieldNumber;
const int RandomCropPadImage::kMinAreaFieldNumber;
const int RandomCropPadImage::kMaxAreaFieldNumber;
const int RandomCropPadImage::kOverlapThreshFieldNumber;
const int RandomCropPadImage::kClipBoxesFieldNumber;
const int RandomCropPadImage::kRandomCoefFieldNumber;
const int RandomCropPadImage::kMinPaddedSizeRatioFieldNumber;
const int RandomCropPadImage::kMaxPaddedSizeRatioFieldNumber;
const int RandomCropPadImage::kPadColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomCropPadImage::RandomCropPadImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomCropPadImage)
}
RandomCropPadImage::RandomCropPadImage(const RandomCropPadImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      min_padded_size_ratio_(from.min_padded_size_ratio_),
      max_padded_size_ratio_(from.max_padded_size_ratio_),
      pad_color_(from.pad_color_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_coef_, &from.random_coef_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_thresh_) -
    reinterpret_cast<char*>(&random_coef_)) + sizeof(overlap_thresh_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomCropPadImage)
}

void RandomCropPadImage::SharedCtor() {
  _cached_size_ = 0;
  random_coef_ = 0;
  clip_boxes_ = true;
  min_object_covered_ = 1;
  min_aspect_ratio_ = 0.75f;
  max_aspect_ratio_ = 1.33f;
  min_area_ = 0.1f;
  max_area_ = 1;
  overlap_thresh_ = 0.3f;
}

RandomCropPadImage::~RandomCropPadImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomCropPadImage)
  SharedDtor();
}

void RandomCropPadImage::SharedDtor() {
}

void RandomCropPadImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomCropPadImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomCropPadImage& RandomCropPadImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomCropPadImage* RandomCropPadImage::New(::google::protobuf::Arena* arena) const {
  RandomCropPadImage* n = new RandomCropPadImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomCropPadImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomCropPadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_padded_size_ratio_.Clear();
  max_padded_size_ratio_.Clear();
  pad_color_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    random_coef_ = 0;
    clip_boxes_ = true;
    min_object_covered_ = 1;
    min_aspect_ratio_ = 0.75f;
    max_aspect_ratio_ = 1.33f;
    min_area_ = 0.1f;
    max_area_ = 1;
    overlap_thresh_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomCropPadImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomCropPadImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_object_covered = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_object_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_aspect_ratio = 2 [default = 0.75];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_aspect_ratio = 3 [default = 1.33];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_area = 4 [default = 0.1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_area = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 6 [default = 0.3];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_coef = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_random_coef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float min_padded_size_ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_min_padded_size_ratio())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_min_padded_size_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float max_padded_size_ratio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77u, input, this->mutable_max_padded_size_ratio())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_max_padded_size_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pad_color = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85u, input, this->mutable_pad_color())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pad_color())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomCropPadImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomCropPadImage)
  return false;
#undef DO_
}

void RandomCropPadImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomCropPadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_object_covered(), output);
  }

  // optional float min_aspect_ratio = 2 [default = 0.75];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_aspect_ratio(), output);
  }

  // optional float max_aspect_ratio = 3 [default = 1.33];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_aspect_ratio(), output);
  }

  // optional float min_area = 4 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_area(), output);
  }

  // optional float max_area = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_area(), output);
  }

  // optional float overlap_thresh = 6 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->overlap_thresh(), output);
  }

  // optional float random_coef = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_coef(), output);
  }

  // repeated float min_padded_size_ratio = 8;
  for (int i = 0, n = this->min_padded_size_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->min_padded_size_ratio(i), output);
  }

  // repeated float max_padded_size_ratio = 9;
  for (int i = 0, n = this->max_padded_size_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->max_padded_size_ratio(i), output);
  }

  // repeated float pad_color = 10;
  for (int i = 0, n = this->pad_color_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->pad_color(i), output);
  }

  // optional bool clip_boxes = 11 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomCropPadImage)
}

::google::protobuf::uint8* RandomCropPadImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomCropPadImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2 [default = 0.75];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3 [default = 1.33];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_aspect_ratio(), target);
  }

  // optional float min_area = 4 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_area(), target);
  }

  // optional float max_area = 5 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_area(), target);
  }

  // optional float overlap_thresh = 6 [default = 0.3];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->overlap_thresh(), target);
  }

  // optional float random_coef = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_coef(), target);
  }

  // repeated float min_padded_size_ratio = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->min_padded_size_ratio_, target);

  // repeated float max_padded_size_ratio = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(9, this->max_padded_size_ratio_, target);

  // repeated float pad_color = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(10, this->pad_color_, target);

  // optional bool clip_boxes = 11 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomCropPadImage)
  return target;
}

size_t RandomCropPadImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomCropPadImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float min_padded_size_ratio = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->min_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->min_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float max_padded_size_ratio = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->max_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->max_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float pad_color = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->pad_color_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pad_color_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional float random_coef = 7 [default = 0];
    if (has_random_coef()) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 11 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

    // optional float min_object_covered = 1 [default = 1];
    if (has_min_object_covered()) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2 [default = 0.75];
    if (has_min_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3 [default = 1.33];
    if (has_max_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4 [default = 0.1];
    if (has_min_area()) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5 [default = 1];
    if (has_max_area()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6 [default = 0.3];
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomCropPadImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomCropPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomCropPadImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomCropPadImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomCropPadImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomCropPadImage)
    MergeFrom(*source);
  }
}

void RandomCropPadImage::MergeFrom(const RandomCropPadImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomCropPadImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_padded_size_ratio_.MergeFrom(from.min_padded_size_ratio_);
  max_padded_size_ratio_.MergeFrom(from.max_padded_size_ratio_);
  pad_color_.MergeFrom(from.pad_color_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000002u) {
      clip_boxes_ = from.clip_boxes_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000080u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomCropPadImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomCropPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomCropPadImage::CopyFrom(const RandomCropPadImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomCropPadImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomCropPadImage::IsInitialized() const {
  return true;
}

void RandomCropPadImage::Swap(RandomCropPadImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomCropPadImage::InternalSwap(RandomCropPadImage* other) {
  using std::swap;
  min_padded_size_ratio_.InternalSwap(&other->min_padded_size_ratio_);
  max_padded_size_ratio_.InternalSwap(&other->max_padded_size_ratio_);
  pad_color_.InternalSwap(&other->pad_color_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomCropPadImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomCropPadImage

// optional float min_object_covered = 1 [default = 1];
bool RandomCropPadImage::has_min_object_covered() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RandomCropPadImage::set_has_min_object_covered() {
  _has_bits_[0] |= 0x00000004u;
}
void RandomCropPadImage::clear_has_min_object_covered() {
  _has_bits_[0] &= ~0x00000004u;
}
void RandomCropPadImage::clear_min_object_covered() {
  min_object_covered_ = 1;
  clear_has_min_object_covered();
}
float RandomCropPadImage::min_object_covered() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.min_object_covered)
  return min_object_covered_;
}
void RandomCropPadImage::set_min_object_covered(float value) {
  set_has_min_object_covered();
  min_object_covered_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.min_object_covered)
}

// optional float min_aspect_ratio = 2 [default = 0.75];
bool RandomCropPadImage::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RandomCropPadImage::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
void RandomCropPadImage::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void RandomCropPadImage::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0.75f;
  clear_has_min_aspect_ratio();
}
float RandomCropPadImage::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.min_aspect_ratio)
  return min_aspect_ratio_;
}
void RandomCropPadImage::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.min_aspect_ratio)
}

// optional float max_aspect_ratio = 3 [default = 1.33];
bool RandomCropPadImage::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RandomCropPadImage::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000010u;
}
void RandomCropPadImage::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000010u;
}
void RandomCropPadImage::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 1.33f;
  clear_has_max_aspect_ratio();
}
float RandomCropPadImage::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.max_aspect_ratio)
  return max_aspect_ratio_;
}
void RandomCropPadImage::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.max_aspect_ratio)
}

// optional float min_area = 4 [default = 0.1];
bool RandomCropPadImage::has_min_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RandomCropPadImage::set_has_min_area() {
  _has_bits_[0] |= 0x00000020u;
}
void RandomCropPadImage::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000020u;
}
void RandomCropPadImage::clear_min_area() {
  min_area_ = 0.1f;
  clear_has_min_area();
}
float RandomCropPadImage::min_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.min_area)
  return min_area_;
}
void RandomCropPadImage::set_min_area(float value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.min_area)
}

// optional float max_area = 5 [default = 1];
bool RandomCropPadImage::has_max_area() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RandomCropPadImage::set_has_max_area() {
  _has_bits_[0] |= 0x00000040u;
}
void RandomCropPadImage::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000040u;
}
void RandomCropPadImage::clear_max_area() {
  max_area_ = 1;
  clear_has_max_area();
}
float RandomCropPadImage::max_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.max_area)
  return max_area_;
}
void RandomCropPadImage::set_max_area(float value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.max_area)
}

// optional float overlap_thresh = 6 [default = 0.3];
bool RandomCropPadImage::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RandomCropPadImage::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000080u;
}
void RandomCropPadImage::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000080u;
}
void RandomCropPadImage::clear_overlap_thresh() {
  overlap_thresh_ = 0.3f;
  clear_has_overlap_thresh();
}
float RandomCropPadImage::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.overlap_thresh)
  return overlap_thresh_;
}
void RandomCropPadImage::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.overlap_thresh)
}

// optional bool clip_boxes = 11 [default = true];
bool RandomCropPadImage::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomCropPadImage::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomCropPadImage::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomCropPadImage::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool RandomCropPadImage::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.clip_boxes)
  return clip_boxes_;
}
void RandomCropPadImage::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.clip_boxes)
}

// optional float random_coef = 7 [default = 0];
bool RandomCropPadImage::has_random_coef() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomCropPadImage::set_has_random_coef() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomCropPadImage::clear_has_random_coef() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomCropPadImage::clear_random_coef() {
  random_coef_ = 0;
  clear_has_random_coef();
}
float RandomCropPadImage::random_coef() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.random_coef)
  return random_coef_;
}
void RandomCropPadImage::set_random_coef(float value) {
  set_has_random_coef();
  random_coef_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.random_coef)
}

// repeated float min_padded_size_ratio = 8;
int RandomCropPadImage::min_padded_size_ratio_size() const {
  return min_padded_size_ratio_.size();
}
void RandomCropPadImage::clear_min_padded_size_ratio() {
  min_padded_size_ratio_.Clear();
}
float RandomCropPadImage::min_padded_size_ratio(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.min_padded_size_ratio)
  return min_padded_size_ratio_.Get(index);
}
void RandomCropPadImage::set_min_padded_size_ratio(int index, float value) {
  min_padded_size_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.min_padded_size_ratio)
}
void RandomCropPadImage::add_min_padded_size_ratio(float value) {
  min_padded_size_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomCropPadImage.min_padded_size_ratio)
}
const ::google::protobuf::RepeatedField< float >&
RandomCropPadImage::min_padded_size_ratio() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomCropPadImage.min_padded_size_ratio)
  return min_padded_size_ratio_;
}
::google::protobuf::RepeatedField< float >*
RandomCropPadImage::mutable_min_padded_size_ratio() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomCropPadImage.min_padded_size_ratio)
  return &min_padded_size_ratio_;
}

// repeated float max_padded_size_ratio = 9;
int RandomCropPadImage::max_padded_size_ratio_size() const {
  return max_padded_size_ratio_.size();
}
void RandomCropPadImage::clear_max_padded_size_ratio() {
  max_padded_size_ratio_.Clear();
}
float RandomCropPadImage::max_padded_size_ratio(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.max_padded_size_ratio)
  return max_padded_size_ratio_.Get(index);
}
void RandomCropPadImage::set_max_padded_size_ratio(int index, float value) {
  max_padded_size_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.max_padded_size_ratio)
}
void RandomCropPadImage::add_max_padded_size_ratio(float value) {
  max_padded_size_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomCropPadImage.max_padded_size_ratio)
}
const ::google::protobuf::RepeatedField< float >&
RandomCropPadImage::max_padded_size_ratio() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomCropPadImage.max_padded_size_ratio)
  return max_padded_size_ratio_;
}
::google::protobuf::RepeatedField< float >*
RandomCropPadImage::mutable_max_padded_size_ratio() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomCropPadImage.max_padded_size_ratio)
  return &max_padded_size_ratio_;
}

// repeated float pad_color = 10;
int RandomCropPadImage::pad_color_size() const {
  return pad_color_.size();
}
void RandomCropPadImage::clear_pad_color() {
  pad_color_.Clear();
}
float RandomCropPadImage::pad_color(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropPadImage.pad_color)
  return pad_color_.Get(index);
}
void RandomCropPadImage::set_pad_color(int index, float value) {
  pad_color_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropPadImage.pad_color)
}
void RandomCropPadImage::add_pad_color(float value) {
  pad_color_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RandomCropPadImage.pad_color)
}
const ::google::protobuf::RepeatedField< float >&
RandomCropPadImage::pad_color() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RandomCropPadImage.pad_color)
  return pad_color_;
}
::google::protobuf::RepeatedField< float >*
RandomCropPadImage::mutable_pad_color() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RandomCropPadImage.pad_color)
  return &pad_color_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomCropToAspectRatio::kAspectRatioFieldNumber;
const int RandomCropToAspectRatio::kOverlapThreshFieldNumber;
const int RandomCropToAspectRatio::kClipBoxesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomCropToAspectRatio::RandomCropToAspectRatio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomCropToAspectRatio)
}
RandomCropToAspectRatio::RandomCropToAspectRatio(const RandomCropToAspectRatio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clip_boxes_, &from.clip_boxes_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_thresh_) -
    reinterpret_cast<char*>(&clip_boxes_)) + sizeof(overlap_thresh_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomCropToAspectRatio)
}

void RandomCropToAspectRatio::SharedCtor() {
  _cached_size_ = 0;
  clip_boxes_ = true;
  aspect_ratio_ = 1;
  overlap_thresh_ = 0.3f;
}

RandomCropToAspectRatio::~RandomCropToAspectRatio() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomCropToAspectRatio)
  SharedDtor();
}

void RandomCropToAspectRatio::SharedDtor() {
}

void RandomCropToAspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomCropToAspectRatio::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomCropToAspectRatio& RandomCropToAspectRatio::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomCropToAspectRatio* RandomCropToAspectRatio::New(::google::protobuf::Arena* arena) const {
  RandomCropToAspectRatio* n = new RandomCropToAspectRatio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomCropToAspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomCropToAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    clip_boxes_ = true;
    aspect_ratio_ = 1;
    overlap_thresh_ = 0.3f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomCropToAspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomCropToAspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float aspect_ratio = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 2 [default = 0.3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomCropToAspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomCropToAspectRatio)
  return false;
#undef DO_
}

void RandomCropToAspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomCropToAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->aspect_ratio(), output);
  }

  // optional float overlap_thresh = 2 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->overlap_thresh(), output);
  }

  // optional bool clip_boxes = 3 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomCropToAspectRatio)
}

::google::protobuf::uint8* RandomCropToAspectRatio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomCropToAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->aspect_ratio(), target);
  }

  // optional float overlap_thresh = 2 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->overlap_thresh(), target);
  }

  // optional bool clip_boxes = 3 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomCropToAspectRatio)
  return target;
}

size_t RandomCropToAspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomCropToAspectRatio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool clip_boxes = 3 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

    // optional float aspect_ratio = 1 [default = 1];
    if (has_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 2 [default = 0.3];
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomCropToAspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomCropToAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomCropToAspectRatio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomCropToAspectRatio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomCropToAspectRatio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomCropToAspectRatio)
    MergeFrom(*source);
  }
}

void RandomCropToAspectRatio::MergeFrom(const RandomCropToAspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomCropToAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clip_boxes_ = from.clip_boxes_;
    }
    if (cached_has_bits & 0x00000002u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomCropToAspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomCropToAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomCropToAspectRatio::CopyFrom(const RandomCropToAspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomCropToAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomCropToAspectRatio::IsInitialized() const {
  return true;
}

void RandomCropToAspectRatio::Swap(RandomCropToAspectRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomCropToAspectRatio::InternalSwap(RandomCropToAspectRatio* other) {
  using std::swap;
  swap(clip_boxes_, other->clip_boxes_);
  swap(aspect_ratio_, other->aspect_ratio_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomCropToAspectRatio::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomCropToAspectRatio

// optional float aspect_ratio = 1 [default = 1];
bool RandomCropToAspectRatio::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomCropToAspectRatio::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomCropToAspectRatio::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomCropToAspectRatio::clear_aspect_ratio() {
  aspect_ratio_ = 1;
  clear_has_aspect_ratio();
}
float RandomCropToAspectRatio::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropToAspectRatio.aspect_ratio)
  return aspect_ratio_;
}
void RandomCropToAspectRatio::set_aspect_ratio(float value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropToAspectRatio.aspect_ratio)
}

// optional float overlap_thresh = 2 [default = 0.3];
bool RandomCropToAspectRatio::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RandomCropToAspectRatio::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000004u;
}
void RandomCropToAspectRatio::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000004u;
}
void RandomCropToAspectRatio::clear_overlap_thresh() {
  overlap_thresh_ = 0.3f;
  clear_has_overlap_thresh();
}
float RandomCropToAspectRatio::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropToAspectRatio.overlap_thresh)
  return overlap_thresh_;
}
void RandomCropToAspectRatio::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropToAspectRatio.overlap_thresh)
}

// optional bool clip_boxes = 3 [default = true];
bool RandomCropToAspectRatio::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomCropToAspectRatio::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomCropToAspectRatio::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomCropToAspectRatio::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool RandomCropToAspectRatio::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomCropToAspectRatio.clip_boxes)
  return clip_boxes_;
}
void RandomCropToAspectRatio::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomCropToAspectRatio.clip_boxes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomBlackPatches::kMaxBlackPatchesFieldNumber;
const int RandomBlackPatches::kProbabilityFieldNumber;
const int RandomBlackPatches::kSizeToImageRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomBlackPatches::RandomBlackPatches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomBlackPatches)
}
RandomBlackPatches::RandomBlackPatches(const RandomBlackPatches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_to_image_ratio_, &from.size_to_image_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&size_to_image_ratio_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomBlackPatches)
}

void RandomBlackPatches::SharedCtor() {
  _cached_size_ = 0;
  size_to_image_ratio_ = 0.1f;
  max_black_patches_ = 10;
  probability_ = 0.5f;
}

RandomBlackPatches::~RandomBlackPatches() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomBlackPatches)
  SharedDtor();
}

void RandomBlackPatches::SharedDtor() {
}

void RandomBlackPatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomBlackPatches::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomBlackPatches& RandomBlackPatches::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomBlackPatches* RandomBlackPatches::New(::google::protobuf::Arena* arena) const {
  RandomBlackPatches* n = new RandomBlackPatches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomBlackPatches::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomBlackPatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    size_to_image_ratio_ = 0.1f;
    max_black_patches_ = 10;
    probability_ = 0.5f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomBlackPatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomBlackPatches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_black_patches = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_black_patches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_black_patches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float probability = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float size_to_image_ratio = 3 [default = 0.1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_size_to_image_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_to_image_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomBlackPatches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomBlackPatches)
  return false;
#undef DO_
}

void RandomBlackPatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomBlackPatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_black_patches = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_black_patches(), output);
  }

  // optional float probability = 2 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->probability(), output);
  }

  // optional float size_to_image_ratio = 3 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->size_to_image_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomBlackPatches)
}

::google::protobuf::uint8* RandomBlackPatches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomBlackPatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_black_patches = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_black_patches(), target);
  }

  // optional float probability = 2 [default = 0.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->probability(), target);
  }

  // optional float size_to_image_ratio = 3 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->size_to_image_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomBlackPatches)
  return target;
}

size_t RandomBlackPatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomBlackPatches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float size_to_image_ratio = 3 [default = 0.1];
    if (has_size_to_image_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 max_black_patches = 1 [default = 10];
    if (has_max_black_patches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_black_patches());
    }

    // optional float probability = 2 [default = 0.5];
    if (has_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomBlackPatches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomBlackPatches)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomBlackPatches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomBlackPatches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomBlackPatches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomBlackPatches)
    MergeFrom(*source);
  }
}

void RandomBlackPatches::MergeFrom(const RandomBlackPatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomBlackPatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      size_to_image_ratio_ = from.size_to_image_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_black_patches_ = from.max_black_patches_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomBlackPatches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomBlackPatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomBlackPatches::CopyFrom(const RandomBlackPatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomBlackPatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomBlackPatches::IsInitialized() const {
  return true;
}

void RandomBlackPatches::Swap(RandomBlackPatches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomBlackPatches::InternalSwap(RandomBlackPatches* other) {
  using std::swap;
  swap(size_to_image_ratio_, other->size_to_image_ratio_);
  swap(max_black_patches_, other->max_black_patches_);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomBlackPatches::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomBlackPatches

// optional int32 max_black_patches = 1 [default = 10];
bool RandomBlackPatches::has_max_black_patches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomBlackPatches::set_has_max_black_patches() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomBlackPatches::clear_has_max_black_patches() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomBlackPatches::clear_max_black_patches() {
  max_black_patches_ = 10;
  clear_has_max_black_patches();
}
::google::protobuf::int32 RandomBlackPatches::max_black_patches() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomBlackPatches.max_black_patches)
  return max_black_patches_;
}
void RandomBlackPatches::set_max_black_patches(::google::protobuf::int32 value) {
  set_has_max_black_patches();
  max_black_patches_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomBlackPatches.max_black_patches)
}

// optional float probability = 2 [default = 0.5];
bool RandomBlackPatches::has_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RandomBlackPatches::set_has_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void RandomBlackPatches::clear_has_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void RandomBlackPatches::clear_probability() {
  probability_ = 0.5f;
  clear_has_probability();
}
float RandomBlackPatches::probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomBlackPatches.probability)
  return probability_;
}
void RandomBlackPatches::set_probability(float value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomBlackPatches.probability)
}

// optional float size_to_image_ratio = 3 [default = 0.1];
bool RandomBlackPatches::has_size_to_image_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomBlackPatches::set_has_size_to_image_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomBlackPatches::clear_has_size_to_image_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomBlackPatches::clear_size_to_image_ratio() {
  size_to_image_ratio_ = 0.1f;
  clear_has_size_to_image_ratio();
}
float RandomBlackPatches::size_to_image_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomBlackPatches.size_to_image_ratio)
  return size_to_image_ratio_;
}
void RandomBlackPatches::set_size_to_image_ratio(float value) {
  set_has_size_to_image_ratio();
  size_to_image_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomBlackPatches.size_to_image_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomResizeMethod::kTargetHeightFieldNumber;
const int RandomResizeMethod::kTargetWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomResizeMethod::RandomResizeMethod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomResizeMethod)
}
RandomResizeMethod::RandomResizeMethod(const RandomResizeMethod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_height_, &from.target_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_width_) -
    reinterpret_cast<char*>(&target_height_)) + sizeof(target_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomResizeMethod)
}

void RandomResizeMethod::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_width_) -
      reinterpret_cast<char*>(&target_height_)) + sizeof(target_width_));
}

RandomResizeMethod::~RandomResizeMethod() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomResizeMethod)
  SharedDtor();
}

void RandomResizeMethod::SharedDtor() {
}

void RandomResizeMethod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomResizeMethod::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomResizeMethod& RandomResizeMethod::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomResizeMethod* RandomResizeMethod::New(::google::protobuf::Arena* arena) const {
  RandomResizeMethod* n = new RandomResizeMethod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomResizeMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomResizeMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&target_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_width_) -
        reinterpret_cast<char*>(&target_height_)) + sizeof(target_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomResizeMethod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomResizeMethod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 target_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_target_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomResizeMethod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomResizeMethod)
  return false;
#undef DO_
}

void RandomResizeMethod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomResizeMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target_height(), output);
  }

  // optional int32 target_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomResizeMethod)
}

::google::protobuf::uint8* RandomResizeMethod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomResizeMethod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 target_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target_height(), target);
  }

  // optional int32 target_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomResizeMethod)
  return target;
}

size_t RandomResizeMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomResizeMethod)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 target_height = 1;
    if (has_target_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_height());
    }

    // optional int32 target_width = 2;
    if (has_target_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomResizeMethod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomResizeMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomResizeMethod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomResizeMethod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomResizeMethod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomResizeMethod)
    MergeFrom(*source);
  }
}

void RandomResizeMethod::MergeFrom(const RandomResizeMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomResizeMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      target_height_ = from.target_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_width_ = from.target_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomResizeMethod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomResizeMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomResizeMethod::CopyFrom(const RandomResizeMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomResizeMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomResizeMethod::IsInitialized() const {
  return true;
}

void RandomResizeMethod::Swap(RandomResizeMethod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomResizeMethod::InternalSwap(RandomResizeMethod* other) {
  using std::swap;
  swap(target_height_, other->target_height_);
  swap(target_width_, other->target_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomResizeMethod::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomResizeMethod

// optional int32 target_height = 1;
bool RandomResizeMethod::has_target_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomResizeMethod::set_has_target_height() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomResizeMethod::clear_has_target_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomResizeMethod::clear_target_height() {
  target_height_ = 0;
  clear_has_target_height();
}
::google::protobuf::int32 RandomResizeMethod::target_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomResizeMethod.target_height)
  return target_height_;
}
void RandomResizeMethod::set_target_height(::google::protobuf::int32 value) {
  set_has_target_height();
  target_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomResizeMethod.target_height)
}

// optional int32 target_width = 2;
bool RandomResizeMethod::has_target_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomResizeMethod::set_has_target_width() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomResizeMethod::clear_has_target_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomResizeMethod::clear_target_width() {
  target_width_ = 0;
  clear_has_target_width();
}
::google::protobuf::int32 RandomResizeMethod::target_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomResizeMethod.target_width)
  return target_width_;
}
void RandomResizeMethod::set_target_width(::google::protobuf::int32 value) {
  set_has_target_width();
  target_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomResizeMethod.target_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RGBtoGray::RGBtoGray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RGBtoGray)
}
RGBtoGray::RGBtoGray(const RGBtoGray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RGBtoGray)
}

void RGBtoGray::SharedCtor() {
  _cached_size_ = 0;
}

RGBtoGray::~RGBtoGray() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RGBtoGray)
  SharedDtor();
}

void RGBtoGray::SharedDtor() {
}

void RGBtoGray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGBtoGray::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RGBtoGray& RGBtoGray::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RGBtoGray* RGBtoGray::New(::google::protobuf::Arena* arena) const {
  RGBtoGray* n = new RGBtoGray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RGBtoGray::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RGBtoGray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RGBtoGray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RGBtoGray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RGBtoGray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RGBtoGray)
  return false;
#undef DO_
}

void RGBtoGray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RGBtoGray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RGBtoGray)
}

::google::protobuf::uint8* RGBtoGray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RGBtoGray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RGBtoGray)
  return target;
}

size_t RGBtoGray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RGBtoGray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGBtoGray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  const RGBtoGray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RGBtoGray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RGBtoGray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RGBtoGray)
    MergeFrom(*source);
  }
}

void RGBtoGray::MergeFrom(const RGBtoGray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RGBtoGray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RGBtoGray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGBtoGray::CopyFrom(const RGBtoGray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RGBtoGray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGBtoGray::IsInitialized() const {
  return true;
}

void RGBtoGray::Swap(RGBtoGray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RGBtoGray::InternalSwap(RGBtoGray* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RGBtoGray::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RGBtoGray

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScaleBoxesToPixelCoordinates::ScaleBoxesToPixelCoordinates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ScaleBoxesToPixelCoordinates)
}
ScaleBoxesToPixelCoordinates::ScaleBoxesToPixelCoordinates(const ScaleBoxesToPixelCoordinates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ScaleBoxesToPixelCoordinates)
}

void ScaleBoxesToPixelCoordinates::SharedCtor() {
  _cached_size_ = 0;
}

ScaleBoxesToPixelCoordinates::~ScaleBoxesToPixelCoordinates() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ScaleBoxesToPixelCoordinates)
  SharedDtor();
}

void ScaleBoxesToPixelCoordinates::SharedDtor() {
}

void ScaleBoxesToPixelCoordinates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScaleBoxesToPixelCoordinates::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScaleBoxesToPixelCoordinates& ScaleBoxesToPixelCoordinates::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScaleBoxesToPixelCoordinates* ScaleBoxesToPixelCoordinates::New(::google::protobuf::Arena* arena) const {
  ScaleBoxesToPixelCoordinates* n = new ScaleBoxesToPixelCoordinates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScaleBoxesToPixelCoordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScaleBoxesToPixelCoordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ScaleBoxesToPixelCoordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ScaleBoxesToPixelCoordinates)
  return false;
#undef DO_
}

void ScaleBoxesToPixelCoordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ScaleBoxesToPixelCoordinates)
}

::google::protobuf::uint8* ScaleBoxesToPixelCoordinates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ScaleBoxesToPixelCoordinates)
  return target;
}

size_t ScaleBoxesToPixelCoordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScaleBoxesToPixelCoordinates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const ScaleBoxesToPixelCoordinates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScaleBoxesToPixelCoordinates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ScaleBoxesToPixelCoordinates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ScaleBoxesToPixelCoordinates)
    MergeFrom(*source);
  }
}

void ScaleBoxesToPixelCoordinates::MergeFrom(const ScaleBoxesToPixelCoordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScaleBoxesToPixelCoordinates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScaleBoxesToPixelCoordinates::CopyFrom(const ScaleBoxesToPixelCoordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ScaleBoxesToPixelCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleBoxesToPixelCoordinates::IsInitialized() const {
  return true;
}

void ScaleBoxesToPixelCoordinates::Swap(ScaleBoxesToPixelCoordinates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScaleBoxesToPixelCoordinates::InternalSwap(ScaleBoxesToPixelCoordinates* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScaleBoxesToPixelCoordinates::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScaleBoxesToPixelCoordinates

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeImage::kNewHeightFieldNumber;
const int ResizeImage::kNewWidthFieldNumber;
const int ResizeImage::kMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeImage::ResizeImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ResizeImage)
}
ResizeImage::ResizeImage(const ResizeImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_height_, &from.new_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&new_height_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ResizeImage)
}

void ResizeImage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&new_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_width_) -
      reinterpret_cast<char*>(&new_height_)) + sizeof(new_width_));
  method_ = 3;
}

ResizeImage::~ResizeImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ResizeImage)
  SharedDtor();
}

void ResizeImage::SharedDtor() {
}

void ResizeImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResizeImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResizeImage& ResizeImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResizeImage* ResizeImage::New(::google::protobuf::Arena* arena) const {
  ResizeImage* n = new ResizeImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResizeImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ResizeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&new_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_width_) -
        reinterpret_cast<char*>(&new_height_)) + sizeof(new_width_));
    method_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResizeImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ResizeImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 new_height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_new_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_new_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeImage_Method_IsValid(value)) {
            set_method(static_cast< ::object_detection::protos::ResizeImage_Method >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ResizeImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ResizeImage)
  return false;
#undef DO_
}

void ResizeImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ResizeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 new_height = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_height(), output);
  }

  // optional int32 new_width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_width(), output);
  }

  // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ResizeImage)
}

::google::protobuf::uint8* ResizeImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ResizeImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 new_height = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_height(), target);
  }

  // optional int32 new_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_width(), target);
  }

  // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ResizeImage)
  return target;
}

size_t ResizeImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ResizeImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 new_height = 1;
    if (has_new_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_height());
    }

    // optional int32 new_width = 2;
    if (has_new_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_width());
    }

    // optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResizeImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ResizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResizeImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ResizeImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ResizeImage)
    MergeFrom(*source);
  }
}

void ResizeImage::MergeFrom(const ResizeImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ResizeImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      new_height_ = from.new_height_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_width_ = from.new_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizeImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ResizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeImage::CopyFrom(const ResizeImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ResizeImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeImage::IsInitialized() const {
  return true;
}

void ResizeImage::Swap(ResizeImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeImage::InternalSwap(ResizeImage* other) {
  using std::swap;
  swap(new_height_, other->new_height_);
  swap(new_width_, other->new_width_);
  swap(method_, other->method_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResizeImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResizeImage

// optional int32 new_height = 1;
bool ResizeImage::has_new_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResizeImage::set_has_new_height() {
  _has_bits_[0] |= 0x00000001u;
}
void ResizeImage::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResizeImage::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
::google::protobuf::int32 ResizeImage::new_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ResizeImage.new_height)
  return new_height_;
}
void ResizeImage::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ResizeImage.new_height)
}

// optional int32 new_width = 2;
bool ResizeImage::has_new_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResizeImage::set_has_new_width() {
  _has_bits_[0] |= 0x00000002u;
}
void ResizeImage::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResizeImage::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
::google::protobuf::int32 ResizeImage::new_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ResizeImage.new_width)
  return new_width_;
}
void ResizeImage::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ResizeImage.new_width)
}

// optional .object_detection.protos.ResizeImage.Method method = 3 [default = BILINEAR];
bool ResizeImage::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResizeImage::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
void ResizeImage::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResizeImage::clear_method() {
  method_ = 3;
  clear_has_method();
}
::object_detection::protos::ResizeImage_Method ResizeImage::method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ResizeImage.method)
  return static_cast< ::object_detection::protos::ResizeImage_Method >(method_);
}
void ResizeImage::set_method(::object_detection::protos::ResizeImage_Method value) {
  assert(::object_detection::protos::ResizeImage_Method_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ResizeImage.method)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubtractChannelMean::kMeansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubtractChannelMean::SubtractChannelMean()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SubtractChannelMean)
}
SubtractChannelMean::SubtractChannelMean(const SubtractChannelMean& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      means_(from.means_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SubtractChannelMean)
}

void SubtractChannelMean::SharedCtor() {
  _cached_size_ = 0;
}

SubtractChannelMean::~SubtractChannelMean() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SubtractChannelMean)
  SharedDtor();
}

void SubtractChannelMean::SharedDtor() {
}

void SubtractChannelMean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubtractChannelMean::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubtractChannelMean& SubtractChannelMean::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubtractChannelMean* SubtractChannelMean::New(::google::protobuf::Arena* arena) const {
  SubtractChannelMean* n = new SubtractChannelMean;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubtractChannelMean::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SubtractChannelMean)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  means_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SubtractChannelMean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SubtractChannelMean)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float means = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_means())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_means())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SubtractChannelMean)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SubtractChannelMean)
  return false;
#undef DO_
}

void SubtractChannelMean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SubtractChannelMean)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float means = 1;
  for (int i = 0, n = this->means_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->means(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SubtractChannelMean)
}

::google::protobuf::uint8* SubtractChannelMean::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SubtractChannelMean)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float means = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->means_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SubtractChannelMean)
  return target;
}

size_t SubtractChannelMean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SubtractChannelMean)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float means = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->means_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->means_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubtractChannelMean::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SubtractChannelMean)
  GOOGLE_DCHECK_NE(&from, this);
  const SubtractChannelMean* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubtractChannelMean>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SubtractChannelMean)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SubtractChannelMean)
    MergeFrom(*source);
  }
}

void SubtractChannelMean::MergeFrom(const SubtractChannelMean& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SubtractChannelMean)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  means_.MergeFrom(from.means_);
}

void SubtractChannelMean::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SubtractChannelMean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubtractChannelMean::CopyFrom(const SubtractChannelMean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SubtractChannelMean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubtractChannelMean::IsInitialized() const {
  return true;
}

void SubtractChannelMean::Swap(SubtractChannelMean* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubtractChannelMean::InternalSwap(SubtractChannelMean* other) {
  using std::swap;
  means_.InternalSwap(&other->means_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubtractChannelMean::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubtractChannelMean

// repeated float means = 1;
int SubtractChannelMean::means_size() const {
  return means_.size();
}
void SubtractChannelMean::clear_means() {
  means_.Clear();
}
float SubtractChannelMean::means(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SubtractChannelMean.means)
  return means_.Get(index);
}
void SubtractChannelMean::set_means(int index, float value) {
  means_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SubtractChannelMean.means)
}
void SubtractChannelMean::add_means(float value) {
  means_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SubtractChannelMean.means)
}
const ::google::protobuf::RepeatedField< float >&
SubtractChannelMean::means() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SubtractChannelMean.means)
  return means_;
}
::google::protobuf::RepeatedField< float >*
SubtractChannelMean::mutable_means() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SubtractChannelMean.means)
  return &means_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropOperation::kMinObjectCoveredFieldNumber;
const int SSDRandomCropOperation::kMinAspectRatioFieldNumber;
const int SSDRandomCropOperation::kMaxAspectRatioFieldNumber;
const int SSDRandomCropOperation::kMinAreaFieldNumber;
const int SSDRandomCropOperation::kMaxAreaFieldNumber;
const int SSDRandomCropOperation::kOverlapThreshFieldNumber;
const int SSDRandomCropOperation::kClipBoxesFieldNumber;
const int SSDRandomCropOperation::kRandomCoefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropOperation::SSDRandomCropOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropOperation)
}
SSDRandomCropOperation::SSDRandomCropOperation(const SSDRandomCropOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropOperation)
}

void SSDRandomCropOperation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  clip_boxes_ = true;
}

SSDRandomCropOperation::~SSDRandomCropOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropOperation)
  SharedDtor();
}

void SSDRandomCropOperation::SharedDtor() {
}

void SSDRandomCropOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropOperation::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropOperation& SSDRandomCropOperation::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropOperation* SSDRandomCropOperation::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropOperation* n = new SSDRandomCropOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_coef_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_object_covered = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_object_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_aspect_ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_aspect_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_area = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_coef = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_random_coef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropOperation)
  return false;
#undef DO_
}

void SSDRandomCropOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_object_covered(), output);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_aspect_ratio(), output);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_aspect_ratio(), output);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_area(), output);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_area(), output);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->overlap_thresh(), output);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_coef(), output);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropOperation)
}

::google::protobuf::uint8* SSDRandomCropOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_aspect_ratio(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropOperation)
  return target;
}

size_t SSDRandomCropOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float min_object_covered = 1;
    if (has_min_object_covered()) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2;
    if (has_min_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3;
    if (has_max_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (has_min_area()) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (has_max_area()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (has_random_coef()) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropOperation::MergeFrom(const SSDRandomCropOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000080u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropOperation::CopyFrom(const SSDRandomCropOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropOperation::Swap(SSDRandomCropOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropOperation::InternalSwap(SSDRandomCropOperation* other) {
  using std::swap;
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropOperation::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropOperation

// optional float min_object_covered = 1;
bool SSDRandomCropOperation::has_min_object_covered() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSDRandomCropOperation::set_has_min_object_covered() {
  _has_bits_[0] |= 0x00000001u;
}
void SSDRandomCropOperation::clear_has_min_object_covered() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSDRandomCropOperation::clear_min_object_covered() {
  min_object_covered_ = 0;
  clear_has_min_object_covered();
}
float SSDRandomCropOperation::min_object_covered() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.min_object_covered)
  return min_object_covered_;
}
void SSDRandomCropOperation::set_min_object_covered(float value) {
  set_has_min_object_covered();
  min_object_covered_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.min_object_covered)
}

// optional float min_aspect_ratio = 2;
bool SSDRandomCropOperation::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSDRandomCropOperation::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void SSDRandomCropOperation::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSDRandomCropOperation::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0;
  clear_has_min_aspect_ratio();
}
float SSDRandomCropOperation::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.min_aspect_ratio)
  return min_aspect_ratio_;
}
void SSDRandomCropOperation::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.min_aspect_ratio)
}

// optional float max_aspect_ratio = 3;
bool SSDRandomCropOperation::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSDRandomCropOperation::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void SSDRandomCropOperation::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSDRandomCropOperation::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 0;
  clear_has_max_aspect_ratio();
}
float SSDRandomCropOperation::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.max_aspect_ratio)
  return max_aspect_ratio_;
}
void SSDRandomCropOperation::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.max_aspect_ratio)
}

// optional float min_area = 4;
bool SSDRandomCropOperation::has_min_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSDRandomCropOperation::set_has_min_area() {
  _has_bits_[0] |= 0x00000008u;
}
void SSDRandomCropOperation::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSDRandomCropOperation::clear_min_area() {
  min_area_ = 0;
  clear_has_min_area();
}
float SSDRandomCropOperation::min_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.min_area)
  return min_area_;
}
void SSDRandomCropOperation::set_min_area(float value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.min_area)
}

// optional float max_area = 5;
bool SSDRandomCropOperation::has_max_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSDRandomCropOperation::set_has_max_area() {
  _has_bits_[0] |= 0x00000010u;
}
void SSDRandomCropOperation::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSDRandomCropOperation::clear_max_area() {
  max_area_ = 0;
  clear_has_max_area();
}
float SSDRandomCropOperation::max_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.max_area)
  return max_area_;
}
void SSDRandomCropOperation::set_max_area(float value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.max_area)
}

// optional float overlap_thresh = 6;
bool SSDRandomCropOperation::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSDRandomCropOperation::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
void SSDRandomCropOperation::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSDRandomCropOperation::clear_overlap_thresh() {
  overlap_thresh_ = 0;
  clear_has_overlap_thresh();
}
float SSDRandomCropOperation::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.overlap_thresh)
  return overlap_thresh_;
}
void SSDRandomCropOperation::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.overlap_thresh)
}

// optional bool clip_boxes = 8 [default = true];
bool SSDRandomCropOperation::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSDRandomCropOperation::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000080u;
}
void SSDRandomCropOperation::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSDRandomCropOperation::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool SSDRandomCropOperation::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.clip_boxes)
  return clip_boxes_;
}
void SSDRandomCropOperation::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.clip_boxes)
}

// optional float random_coef = 7;
bool SSDRandomCropOperation::has_random_coef() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSDRandomCropOperation::set_has_random_coef() {
  _has_bits_[0] |= 0x00000040u;
}
void SSDRandomCropOperation::clear_has_random_coef() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSDRandomCropOperation::clear_random_coef() {
  random_coef_ = 0;
  clear_has_random_coef();
}
float SSDRandomCropOperation::random_coef() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropOperation.random_coef)
  return random_coef_;
}
void SSDRandomCropOperation::set_random_coef(float value) {
  set_has_random_coef();
  random_coef_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropOperation.random_coef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCrop::kOperationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCrop::SSDRandomCrop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCrop)
}
SSDRandomCrop::SSDRandomCrop(const SSDRandomCrop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCrop)
}

void SSDRandomCrop::SharedCtor() {
  _cached_size_ = 0;
}

SSDRandomCrop::~SSDRandomCrop() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCrop)
  SharedDtor();
}

void SSDRandomCrop::SharedDtor() {
}

void SSDRandomCrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCrop::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCrop& SSDRandomCrop::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCrop* SSDRandomCrop::New(::google::protobuf::Arena* arena) const {
  SSDRandomCrop* n = new SSDRandomCrop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCrop::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCrop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCrop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCrop)
  return false;
#undef DO_
}

void SSDRandomCrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operations(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCrop)
}

::google::protobuf::uint8* SSDRandomCrop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCrop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->operations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCrop)
  return target;
}

size_t SSDRandomCrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCrop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCrop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCrop)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCrop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCrop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCrop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCrop)
    MergeFrom(*source);
  }
}

void SSDRandomCrop::MergeFrom(const SSDRandomCrop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCrop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void SSDRandomCrop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCrop::CopyFrom(const SSDRandomCrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCrop::IsInitialized() const {
  return true;
}

void SSDRandomCrop::Swap(SSDRandomCrop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCrop::InternalSwap(SSDRandomCrop* other) {
  using std::swap;
  operations_.InternalSwap(&other->operations_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCrop::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCrop

// repeated .object_detection.protos.SSDRandomCropOperation operations = 1;
int SSDRandomCrop::operations_size() const {
  return operations_.size();
}
void SSDRandomCrop::clear_operations() {
  operations_.Clear();
}
const ::object_detection::protos::SSDRandomCropOperation& SSDRandomCrop::operations(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCrop.operations)
  return operations_.Get(index);
}
::object_detection::protos::SSDRandomCropOperation* SSDRandomCrop::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SSDRandomCrop.operations)
  return operations_.Mutable(index);
}
::object_detection::protos::SSDRandomCropOperation* SSDRandomCrop::add_operations() {
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCrop.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropOperation >*
SSDRandomCrop::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCrop.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropOperation >&
SSDRandomCrop::operations() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCrop.operations)
  return operations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropPadOperation::kMinObjectCoveredFieldNumber;
const int SSDRandomCropPadOperation::kMinAspectRatioFieldNumber;
const int SSDRandomCropPadOperation::kMaxAspectRatioFieldNumber;
const int SSDRandomCropPadOperation::kMinAreaFieldNumber;
const int SSDRandomCropPadOperation::kMaxAreaFieldNumber;
const int SSDRandomCropPadOperation::kOverlapThreshFieldNumber;
const int SSDRandomCropPadOperation::kClipBoxesFieldNumber;
const int SSDRandomCropPadOperation::kRandomCoefFieldNumber;
const int SSDRandomCropPadOperation::kMinPaddedSizeRatioFieldNumber;
const int SSDRandomCropPadOperation::kMaxPaddedSizeRatioFieldNumber;
const int SSDRandomCropPadOperation::kPadColorRFieldNumber;
const int SSDRandomCropPadOperation::kPadColorGFieldNumber;
const int SSDRandomCropPadOperation::kPadColorBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropPadOperation::SSDRandomCropPadOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPadOperation)
}
SSDRandomCropPadOperation::SSDRandomCropPadOperation(const SSDRandomCropPadOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      min_padded_size_ratio_(from.min_padded_size_ratio_),
      max_padded_size_ratio_(from.max_padded_size_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPadOperation)
}

void SSDRandomCropPadOperation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pad_color_b_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(pad_color_b_));
  clip_boxes_ = true;
}

SSDRandomCropPadOperation::~SSDRandomCropPadOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPadOperation)
  SharedDtor();
}

void SSDRandomCropPadOperation::SharedDtor() {
}

void SSDRandomCropPadOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropPadOperation::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropPadOperation& SSDRandomCropPadOperation::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropPadOperation* SSDRandomCropPadOperation::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropPadOperation* n = new SSDRandomCropPadOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropPadOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPadOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_padded_size_ratio_.Clear();
  max_padded_size_ratio_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_color_r_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(pad_color_r_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&pad_color_g_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pad_color_b_) -
        reinterpret_cast<char*>(&pad_color_g_)) + sizeof(pad_color_b_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropPadOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropPadOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_object_covered = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_object_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_aspect_ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_aspect_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_area = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_coef = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_random_coef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float min_padded_size_ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 69u, input, this->mutable_min_padded_size_ratio())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_min_padded_size_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float max_padded_size_ratio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77u, input, this->mutable_max_padded_size_ratio())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_max_padded_size_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pad_color_r = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_pad_color_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pad_color_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pad_color_g = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_pad_color_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pad_color_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pad_color_b = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_pad_color_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pad_color_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 13 [default = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropPadOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropPadOperation)
  return false;
#undef DO_
}

void SSDRandomCropPadOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropPadOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_object_covered(), output);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_aspect_ratio(), output);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_aspect_ratio(), output);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_area(), output);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_area(), output);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->overlap_thresh(), output);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_coef(), output);
  }

  // repeated float min_padded_size_ratio = 8;
  for (int i = 0, n = this->min_padded_size_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      8, this->min_padded_size_ratio(i), output);
  }

  // repeated float max_padded_size_ratio = 9;
  for (int i = 0, n = this->max_padded_size_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->max_padded_size_ratio(i), output);
  }

  // optional float pad_color_r = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pad_color_r(), output);
  }

  // optional float pad_color_g = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pad_color_g(), output);
  }

  // optional float pad_color_b = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pad_color_b(), output);
  }

  // optional bool clip_boxes = 13 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropPadOperation)
}

::google::protobuf::uint8* SSDRandomCropPadOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPadOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_aspect_ratio(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_coef(), target);
  }

  // repeated float min_padded_size_ratio = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(8, this->min_padded_size_ratio_, target);

  // repeated float max_padded_size_ratio = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(9, this->max_padded_size_ratio_, target);

  // optional float pad_color_r = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pad_color_r(), target);
  }

  // optional float pad_color_g = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pad_color_g(), target);
  }

  // optional float pad_color_b = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pad_color_b(), target);
  }

  // optional bool clip_boxes = 13 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPadOperation)
  return target;
}

size_t SSDRandomCropPadOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPadOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float min_padded_size_ratio = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->min_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->min_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float max_padded_size_ratio = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->max_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->max_padded_size_ratio_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional float min_object_covered = 1;
    if (has_min_object_covered()) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2;
    if (has_min_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3;
    if (has_max_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (has_min_area()) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (has_max_area()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (has_random_coef()) {
      total_size += 1 + 4;
    }

    // optional float pad_color_r = 10;
    if (has_pad_color_r()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float pad_color_g = 11;
    if (has_pad_color_g()) {
      total_size += 1 + 4;
    }

    // optional float pad_color_b = 12;
    if (has_pad_color_b()) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 13 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropPadOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPadOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPadOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropPadOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPadOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPadOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropPadOperation::MergeFrom(const SSDRandomCropPadOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPadOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_padded_size_ratio_.MergeFrom(from.min_padded_size_ratio_);
  max_padded_size_ratio_.MergeFrom(from.max_padded_size_ratio_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000080u) {
      pad_color_r_ = from.pad_color_r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      pad_color_g_ = from.pad_color_g_;
    }
    if (cached_has_bits & 0x00000200u) {
      pad_color_b_ = from.pad_color_b_;
    }
    if (cached_has_bits & 0x00000400u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropPadOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPadOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPadOperation::CopyFrom(const SSDRandomCropPadOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPadOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPadOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropPadOperation::Swap(SSDRandomCropPadOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropPadOperation::InternalSwap(SSDRandomCropPadOperation* other) {
  using std::swap;
  min_padded_size_ratio_.InternalSwap(&other->min_padded_size_ratio_);
  max_padded_size_ratio_.InternalSwap(&other->max_padded_size_ratio_);
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(pad_color_r_, other->pad_color_r_);
  swap(pad_color_g_, other->pad_color_g_);
  swap(pad_color_b_, other->pad_color_b_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropPadOperation::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropPadOperation

// optional float min_object_covered = 1;
bool SSDRandomCropPadOperation::has_min_object_covered() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSDRandomCropPadOperation::set_has_min_object_covered() {
  _has_bits_[0] |= 0x00000001u;
}
void SSDRandomCropPadOperation::clear_has_min_object_covered() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSDRandomCropPadOperation::clear_min_object_covered() {
  min_object_covered_ = 0;
  clear_has_min_object_covered();
}
float SSDRandomCropPadOperation::min_object_covered() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.min_object_covered)
  return min_object_covered_;
}
void SSDRandomCropPadOperation::set_min_object_covered(float value) {
  set_has_min_object_covered();
  min_object_covered_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.min_object_covered)
}

// optional float min_aspect_ratio = 2;
bool SSDRandomCropPadOperation::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSDRandomCropPadOperation::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void SSDRandomCropPadOperation::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSDRandomCropPadOperation::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0;
  clear_has_min_aspect_ratio();
}
float SSDRandomCropPadOperation::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.min_aspect_ratio)
  return min_aspect_ratio_;
}
void SSDRandomCropPadOperation::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.min_aspect_ratio)
}

// optional float max_aspect_ratio = 3;
bool SSDRandomCropPadOperation::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSDRandomCropPadOperation::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void SSDRandomCropPadOperation::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSDRandomCropPadOperation::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 0;
  clear_has_max_aspect_ratio();
}
float SSDRandomCropPadOperation::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.max_aspect_ratio)
  return max_aspect_ratio_;
}
void SSDRandomCropPadOperation::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.max_aspect_ratio)
}

// optional float min_area = 4;
bool SSDRandomCropPadOperation::has_min_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSDRandomCropPadOperation::set_has_min_area() {
  _has_bits_[0] |= 0x00000008u;
}
void SSDRandomCropPadOperation::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSDRandomCropPadOperation::clear_min_area() {
  min_area_ = 0;
  clear_has_min_area();
}
float SSDRandomCropPadOperation::min_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.min_area)
  return min_area_;
}
void SSDRandomCropPadOperation::set_min_area(float value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.min_area)
}

// optional float max_area = 5;
bool SSDRandomCropPadOperation::has_max_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSDRandomCropPadOperation::set_has_max_area() {
  _has_bits_[0] |= 0x00000010u;
}
void SSDRandomCropPadOperation::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSDRandomCropPadOperation::clear_max_area() {
  max_area_ = 0;
  clear_has_max_area();
}
float SSDRandomCropPadOperation::max_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.max_area)
  return max_area_;
}
void SSDRandomCropPadOperation::set_max_area(float value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.max_area)
}

// optional float overlap_thresh = 6;
bool SSDRandomCropPadOperation::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSDRandomCropPadOperation::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
void SSDRandomCropPadOperation::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSDRandomCropPadOperation::clear_overlap_thresh() {
  overlap_thresh_ = 0;
  clear_has_overlap_thresh();
}
float SSDRandomCropPadOperation::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.overlap_thresh)
  return overlap_thresh_;
}
void SSDRandomCropPadOperation::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.overlap_thresh)
}

// optional bool clip_boxes = 13 [default = true];
bool SSDRandomCropPadOperation::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SSDRandomCropPadOperation::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000400u;
}
void SSDRandomCropPadOperation::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000400u;
}
void SSDRandomCropPadOperation::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool SSDRandomCropPadOperation::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.clip_boxes)
  return clip_boxes_;
}
void SSDRandomCropPadOperation::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.clip_boxes)
}

// optional float random_coef = 7;
bool SSDRandomCropPadOperation::has_random_coef() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSDRandomCropPadOperation::set_has_random_coef() {
  _has_bits_[0] |= 0x00000040u;
}
void SSDRandomCropPadOperation::clear_has_random_coef() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSDRandomCropPadOperation::clear_random_coef() {
  random_coef_ = 0;
  clear_has_random_coef();
}
float SSDRandomCropPadOperation::random_coef() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.random_coef)
  return random_coef_;
}
void SSDRandomCropPadOperation::set_random_coef(float value) {
  set_has_random_coef();
  random_coef_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.random_coef)
}

// repeated float min_padded_size_ratio = 8;
int SSDRandomCropPadOperation::min_padded_size_ratio_size() const {
  return min_padded_size_ratio_.size();
}
void SSDRandomCropPadOperation::clear_min_padded_size_ratio() {
  min_padded_size_ratio_.Clear();
}
float SSDRandomCropPadOperation::min_padded_size_ratio(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.min_padded_size_ratio)
  return min_padded_size_ratio_.Get(index);
}
void SSDRandomCropPadOperation::set_min_padded_size_ratio(int index, float value) {
  min_padded_size_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.min_padded_size_ratio)
}
void SSDRandomCropPadOperation::add_min_padded_size_ratio(float value) {
  min_padded_size_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropPadOperation.min_padded_size_ratio)
}
const ::google::protobuf::RepeatedField< float >&
SSDRandomCropPadOperation::min_padded_size_ratio() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropPadOperation.min_padded_size_ratio)
  return min_padded_size_ratio_;
}
::google::protobuf::RepeatedField< float >*
SSDRandomCropPadOperation::mutable_min_padded_size_ratio() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropPadOperation.min_padded_size_ratio)
  return &min_padded_size_ratio_;
}

// repeated float max_padded_size_ratio = 9;
int SSDRandomCropPadOperation::max_padded_size_ratio_size() const {
  return max_padded_size_ratio_.size();
}
void SSDRandomCropPadOperation::clear_max_padded_size_ratio() {
  max_padded_size_ratio_.Clear();
}
float SSDRandomCropPadOperation::max_padded_size_ratio(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.max_padded_size_ratio)
  return max_padded_size_ratio_.Get(index);
}
void SSDRandomCropPadOperation::set_max_padded_size_ratio(int index, float value) {
  max_padded_size_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.max_padded_size_ratio)
}
void SSDRandomCropPadOperation::add_max_padded_size_ratio(float value) {
  max_padded_size_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropPadOperation.max_padded_size_ratio)
}
const ::google::protobuf::RepeatedField< float >&
SSDRandomCropPadOperation::max_padded_size_ratio() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropPadOperation.max_padded_size_ratio)
  return max_padded_size_ratio_;
}
::google::protobuf::RepeatedField< float >*
SSDRandomCropPadOperation::mutable_max_padded_size_ratio() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropPadOperation.max_padded_size_ratio)
  return &max_padded_size_ratio_;
}

// optional float pad_color_r = 10;
bool SSDRandomCropPadOperation::has_pad_color_r() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSDRandomCropPadOperation::set_has_pad_color_r() {
  _has_bits_[0] |= 0x00000080u;
}
void SSDRandomCropPadOperation::clear_has_pad_color_r() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSDRandomCropPadOperation::clear_pad_color_r() {
  pad_color_r_ = 0;
  clear_has_pad_color_r();
}
float SSDRandomCropPadOperation::pad_color_r() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.pad_color_r)
  return pad_color_r_;
}
void SSDRandomCropPadOperation::set_pad_color_r(float value) {
  set_has_pad_color_r();
  pad_color_r_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.pad_color_r)
}

// optional float pad_color_g = 11;
bool SSDRandomCropPadOperation::has_pad_color_g() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SSDRandomCropPadOperation::set_has_pad_color_g() {
  _has_bits_[0] |= 0x00000100u;
}
void SSDRandomCropPadOperation::clear_has_pad_color_g() {
  _has_bits_[0] &= ~0x00000100u;
}
void SSDRandomCropPadOperation::clear_pad_color_g() {
  pad_color_g_ = 0;
  clear_has_pad_color_g();
}
float SSDRandomCropPadOperation::pad_color_g() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.pad_color_g)
  return pad_color_g_;
}
void SSDRandomCropPadOperation::set_pad_color_g(float value) {
  set_has_pad_color_g();
  pad_color_g_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.pad_color_g)
}

// optional float pad_color_b = 12;
bool SSDRandomCropPadOperation::has_pad_color_b() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SSDRandomCropPadOperation::set_has_pad_color_b() {
  _has_bits_[0] |= 0x00000200u;
}
void SSDRandomCropPadOperation::clear_has_pad_color_b() {
  _has_bits_[0] &= ~0x00000200u;
}
void SSDRandomCropPadOperation::clear_pad_color_b() {
  pad_color_b_ = 0;
  clear_has_pad_color_b();
}
float SSDRandomCropPadOperation::pad_color_b() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadOperation.pad_color_b)
  return pad_color_b_;
}
void SSDRandomCropPadOperation::set_pad_color_b(float value) {
  set_has_pad_color_b();
  pad_color_b_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadOperation.pad_color_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropPad::kOperationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropPad::SSDRandomCropPad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPad)
}
SSDRandomCropPad::SSDRandomCropPad(const SSDRandomCropPad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPad)
}

void SSDRandomCropPad::SharedCtor() {
  _cached_size_ = 0;
}

SSDRandomCropPad::~SSDRandomCropPad() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPad)
  SharedDtor();
}

void SSDRandomCropPad::SharedDtor() {
}

void SSDRandomCropPad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropPad::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropPad& SSDRandomCropPad::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropPad* SSDRandomCropPad::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropPad* n = new SSDRandomCropPad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropPad::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropPad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropPad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropPad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropPad)
  return false;
#undef DO_
}

void SSDRandomCropPad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropPad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operations(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropPad)
}

::google::protobuf::uint8* SSDRandomCropPad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->operations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPad)
  return target;
}

size_t SSDRandomCropPad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropPad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPad)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropPad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPad)
    MergeFrom(*source);
  }
}

void SSDRandomCropPad::MergeFrom(const SSDRandomCropPad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void SSDRandomCropPad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPad::CopyFrom(const SSDRandomCropPad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPad::IsInitialized() const {
  return true;
}

void SSDRandomCropPad::Swap(SSDRandomCropPad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropPad::InternalSwap(SSDRandomCropPad* other) {
  using std::swap;
  operations_.InternalSwap(&other->operations_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropPad::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropPad

// repeated .object_detection.protos.SSDRandomCropPadOperation operations = 1;
int SSDRandomCropPad::operations_size() const {
  return operations_.size();
}
void SSDRandomCropPad::clear_operations() {
  operations_.Clear();
}
const ::object_detection::protos::SSDRandomCropPadOperation& SSDRandomCropPad::operations(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPad.operations)
  return operations_.Get(index);
}
::object_detection::protos::SSDRandomCropPadOperation* SSDRandomCropPad::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SSDRandomCropPad.operations)
  return operations_.Mutable(index);
}
::object_detection::protos::SSDRandomCropPadOperation* SSDRandomCropPad::add_operations() {
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropPad.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropPadOperation >*
SSDRandomCropPad::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropPad.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropPadOperation >&
SSDRandomCropPad::operations() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropPad.operations)
  return operations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropFixedAspectRatioOperation::kMinObjectCoveredFieldNumber;
const int SSDRandomCropFixedAspectRatioOperation::kMinAreaFieldNumber;
const int SSDRandomCropFixedAspectRatioOperation::kMaxAreaFieldNumber;
const int SSDRandomCropFixedAspectRatioOperation::kOverlapThreshFieldNumber;
const int SSDRandomCropFixedAspectRatioOperation::kClipBoxesFieldNumber;
const int SSDRandomCropFixedAspectRatioOperation::kRandomCoefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropFixedAspectRatioOperation::SSDRandomCropFixedAspectRatioOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
}
SSDRandomCropFixedAspectRatioOperation::SSDRandomCropFixedAspectRatioOperation(const SSDRandomCropFixedAspectRatioOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
}

void SSDRandomCropFixedAspectRatioOperation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  clip_boxes_ = true;
}

SSDRandomCropFixedAspectRatioOperation::~SSDRandomCropFixedAspectRatioOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  SharedDtor();
}

void SSDRandomCropFixedAspectRatioOperation::SharedDtor() {
}

void SSDRandomCropFixedAspectRatioOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropFixedAspectRatioOperation::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropFixedAspectRatioOperation& SSDRandomCropFixedAspectRatioOperation::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropFixedAspectRatioOperation* SSDRandomCropFixedAspectRatioOperation::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropFixedAspectRatioOperation* n = new SSDRandomCropFixedAspectRatioOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropFixedAspectRatioOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_coef_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropFixedAspectRatioOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_object_covered = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_object_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_area = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_coef = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_random_coef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  return false;
#undef DO_
}

void SSDRandomCropFixedAspectRatioOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_object_covered(), output);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_area(), output);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_area(), output);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->overlap_thresh(), output);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_coef(), output);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
}

::google::protobuf::uint8* SSDRandomCropFixedAspectRatioOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_object_covered(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  return target;
}

size_t SSDRandomCropFixedAspectRatioOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float min_object_covered = 1;
    if (has_min_object_covered()) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (has_min_area()) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (has_max_area()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (has_random_coef()) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropFixedAspectRatioOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropFixedAspectRatioOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropFixedAspectRatioOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropFixedAspectRatioOperation::MergeFrom(const SSDRandomCropFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000008u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000020u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropFixedAspectRatioOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropFixedAspectRatioOperation::CopyFrom(const SSDRandomCropFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropFixedAspectRatioOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropFixedAspectRatioOperation::Swap(SSDRandomCropFixedAspectRatioOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropFixedAspectRatioOperation::InternalSwap(SSDRandomCropFixedAspectRatioOperation* other) {
  using std::swap;
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropFixedAspectRatioOperation::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropFixedAspectRatioOperation

// optional float min_object_covered = 1;
bool SSDRandomCropFixedAspectRatioOperation::has_min_object_covered() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSDRandomCropFixedAspectRatioOperation::set_has_min_object_covered() {
  _has_bits_[0] |= 0x00000001u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_has_min_object_covered() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_min_object_covered() {
  min_object_covered_ = 0;
  clear_has_min_object_covered();
}
float SSDRandomCropFixedAspectRatioOperation::min_object_covered() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.min_object_covered)
  return min_object_covered_;
}
void SSDRandomCropFixedAspectRatioOperation::set_min_object_covered(float value) {
  set_has_min_object_covered();
  min_object_covered_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.min_object_covered)
}

// optional float min_area = 4;
bool SSDRandomCropFixedAspectRatioOperation::has_min_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSDRandomCropFixedAspectRatioOperation::set_has_min_area() {
  _has_bits_[0] |= 0x00000002u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_min_area() {
  min_area_ = 0;
  clear_has_min_area();
}
float SSDRandomCropFixedAspectRatioOperation::min_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.min_area)
  return min_area_;
}
void SSDRandomCropFixedAspectRatioOperation::set_min_area(float value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.min_area)
}

// optional float max_area = 5;
bool SSDRandomCropFixedAspectRatioOperation::has_max_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSDRandomCropFixedAspectRatioOperation::set_has_max_area() {
  _has_bits_[0] |= 0x00000004u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_max_area() {
  max_area_ = 0;
  clear_has_max_area();
}
float SSDRandomCropFixedAspectRatioOperation::max_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.max_area)
  return max_area_;
}
void SSDRandomCropFixedAspectRatioOperation::set_max_area(float value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.max_area)
}

// optional float overlap_thresh = 6;
bool SSDRandomCropFixedAspectRatioOperation::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSDRandomCropFixedAspectRatioOperation::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_overlap_thresh() {
  overlap_thresh_ = 0;
  clear_has_overlap_thresh();
}
float SSDRandomCropFixedAspectRatioOperation::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.overlap_thresh)
  return overlap_thresh_;
}
void SSDRandomCropFixedAspectRatioOperation::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.overlap_thresh)
}

// optional bool clip_boxes = 8 [default = true];
bool SSDRandomCropFixedAspectRatioOperation::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSDRandomCropFixedAspectRatioOperation::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000020u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool SSDRandomCropFixedAspectRatioOperation::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.clip_boxes)
  return clip_boxes_;
}
void SSDRandomCropFixedAspectRatioOperation::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.clip_boxes)
}

// optional float random_coef = 7;
bool SSDRandomCropFixedAspectRatioOperation::has_random_coef() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSDRandomCropFixedAspectRatioOperation::set_has_random_coef() {
  _has_bits_[0] |= 0x00000010u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_has_random_coef() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSDRandomCropFixedAspectRatioOperation::clear_random_coef() {
  random_coef_ = 0;
  clear_has_random_coef();
}
float SSDRandomCropFixedAspectRatioOperation::random_coef() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.random_coef)
  return random_coef_;
}
void SSDRandomCropFixedAspectRatioOperation::set_random_coef(float value) {
  set_has_random_coef();
  random_coef_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatioOperation.random_coef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropFixedAspectRatio::kOperationsFieldNumber;
const int SSDRandomCropFixedAspectRatio::kAspectRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropFixedAspectRatio::SSDRandomCropFixedAspectRatio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropFixedAspectRatio)
}
SSDRandomCropFixedAspectRatio::SSDRandomCropFixedAspectRatio(const SSDRandomCropFixedAspectRatio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspect_ratio_ = from.aspect_ratio_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropFixedAspectRatio)
}

void SSDRandomCropFixedAspectRatio::SharedCtor() {
  _cached_size_ = 0;
  aspect_ratio_ = 1;
}

SSDRandomCropFixedAspectRatio::~SSDRandomCropFixedAspectRatio() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropFixedAspectRatio)
  SharedDtor();
}

void SSDRandomCropFixedAspectRatio::SharedDtor() {
}

void SSDRandomCropFixedAspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropFixedAspectRatio::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropFixedAspectRatio& SSDRandomCropFixedAspectRatio::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropFixedAspectRatio* SSDRandomCropFixedAspectRatio::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropFixedAspectRatio* n = new SSDRandomCropFixedAspectRatio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropFixedAspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  aspect_ratio_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropFixedAspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float aspect_ratio = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropFixedAspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropFixedAspectRatio)
  return false;
#undef DO_
}

void SSDRandomCropFixedAspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operations(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->aspect_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropFixedAspectRatio)
}

::google::protobuf::uint8* SSDRandomCropFixedAspectRatio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->operations(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->aspect_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropFixedAspectRatio)
  return target;
}

size_t SSDRandomCropFixedAspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(static_cast<int>(i)));
    }
  }

  // optional float aspect_ratio = 2 [default = 1];
  if (has_aspect_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropFixedAspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropFixedAspectRatio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropFixedAspectRatio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropFixedAspectRatio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropFixedAspectRatio)
    MergeFrom(*source);
  }
}

void SSDRandomCropFixedAspectRatio::MergeFrom(const SSDRandomCropFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (from.has_aspect_ratio()) {
    set_aspect_ratio(from.aspect_ratio());
  }
}

void SSDRandomCropFixedAspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropFixedAspectRatio::CopyFrom(const SSDRandomCropFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropFixedAspectRatio::IsInitialized() const {
  return true;
}

void SSDRandomCropFixedAspectRatio::Swap(SSDRandomCropFixedAspectRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropFixedAspectRatio::InternalSwap(SSDRandomCropFixedAspectRatio* other) {
  using std::swap;
  operations_.InternalSwap(&other->operations_);
  swap(aspect_ratio_, other->aspect_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropFixedAspectRatio::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropFixedAspectRatio

// repeated .object_detection.protos.SSDRandomCropFixedAspectRatioOperation operations = 1;
int SSDRandomCropFixedAspectRatio::operations_size() const {
  return operations_.size();
}
void SSDRandomCropFixedAspectRatio::clear_operations() {
  operations_.Clear();
}
const ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation& SSDRandomCropFixedAspectRatio::operations(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatio.operations)
  return operations_.Get(index);
}
::object_detection::protos::SSDRandomCropFixedAspectRatioOperation* SSDRandomCropFixedAspectRatio::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SSDRandomCropFixedAspectRatio.operations)
  return operations_.Mutable(index);
}
::object_detection::protos::SSDRandomCropFixedAspectRatioOperation* SSDRandomCropFixedAspectRatio::add_operations() {
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropFixedAspectRatio.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation >*
SSDRandomCropFixedAspectRatio::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropFixedAspectRatio.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropFixedAspectRatioOperation >&
SSDRandomCropFixedAspectRatio::operations() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropFixedAspectRatio.operations)
  return operations_;
}

// optional float aspect_ratio = 2 [default = 1];
bool SSDRandomCropFixedAspectRatio::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSDRandomCropFixedAspectRatio::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void SSDRandomCropFixedAspectRatio::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSDRandomCropFixedAspectRatio::clear_aspect_ratio() {
  aspect_ratio_ = 1;
  clear_has_aspect_ratio();
}
float SSDRandomCropFixedAspectRatio::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropFixedAspectRatio.aspect_ratio)
  return aspect_ratio_;
}
void SSDRandomCropFixedAspectRatio::set_aspect_ratio(float value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropFixedAspectRatio.aspect_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropPadFixedAspectRatioOperation::kMinObjectCoveredFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kMinAspectRatioFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kMaxAspectRatioFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kMinAreaFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kMaxAreaFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kOverlapThreshFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kClipBoxesFieldNumber;
const int SSDRandomCropPadFixedAspectRatioOperation::kRandomCoefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropPadFixedAspectRatioOperation::SSDRandomCropPadFixedAspectRatioOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
}
SSDRandomCropPadFixedAspectRatioOperation::SSDRandomCropPadFixedAspectRatioOperation(const SSDRandomCropPadFixedAspectRatioOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_object_covered_, &from.min_object_covered_,
    static_cast<size_t>(reinterpret_cast<char*>(&clip_boxes_) -
    reinterpret_cast<char*>(&min_object_covered_)) + sizeof(clip_boxes_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
}

void SSDRandomCropPadFixedAspectRatioOperation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_object_covered_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_coef_) -
      reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
  clip_boxes_ = true;
}

SSDRandomCropPadFixedAspectRatioOperation::~SSDRandomCropPadFixedAspectRatioOperation() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  SharedDtor();
}

void SSDRandomCropPadFixedAspectRatioOperation::SharedDtor() {
}

void SSDRandomCropPadFixedAspectRatioOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropPadFixedAspectRatioOperation::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropPadFixedAspectRatioOperation& SSDRandomCropPadFixedAspectRatioOperation::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropPadFixedAspectRatioOperation* SSDRandomCropPadFixedAspectRatioOperation::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropPadFixedAspectRatioOperation* n = new SSDRandomCropPadFixedAspectRatioOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropPadFixedAspectRatioOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&min_object_covered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_coef_) -
        reinterpret_cast<char*>(&min_object_covered_)) + sizeof(random_coef_));
    clip_boxes_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropPadFixedAspectRatioOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_object_covered = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_object_covered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_covered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_aspect_ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_aspect_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_area = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_min_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_max_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overlap_thresh = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_overlap_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overlap_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_coef = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_random_coef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_coef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_boxes = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_clip_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  return false;
#undef DO_
}

void SSDRandomCropPadFixedAspectRatioOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_object_covered(), output);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_aspect_ratio(), output);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_aspect_ratio(), output);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_area(), output);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_area(), output);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->overlap_thresh(), output);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->random_coef(), output);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->clip_boxes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
}

::google::protobuf::uint8* SSDRandomCropPadFixedAspectRatioOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_object_covered = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_object_covered(), target);
  }

  // optional float min_aspect_ratio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_aspect_ratio(), target);
  }

  // optional float max_aspect_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_aspect_ratio(), target);
  }

  // optional float min_area = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_area(), target);
  }

  // optional float max_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_area(), target);
  }

  // optional float overlap_thresh = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->overlap_thresh(), target);
  }

  // optional float random_coef = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->random_coef(), target);
  }

  // optional bool clip_boxes = 8 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->clip_boxes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  return target;
}

size_t SSDRandomCropPadFixedAspectRatioOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float min_object_covered = 1;
    if (has_min_object_covered()) {
      total_size += 1 + 4;
    }

    // optional float min_aspect_ratio = 2;
    if (has_min_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float max_aspect_ratio = 3;
    if (has_max_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional float min_area = 4;
    if (has_min_area()) {
      total_size += 1 + 4;
    }

    // optional float max_area = 5;
    if (has_max_area()) {
      total_size += 1 + 4;
    }

    // optional float overlap_thresh = 6;
    if (has_overlap_thresh()) {
      total_size += 1 + 4;
    }

    // optional float random_coef = 7;
    if (has_random_coef()) {
      total_size += 1 + 4;
    }

    // optional bool clip_boxes = 8 [default = true];
    if (has_clip_boxes()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropPadFixedAspectRatioOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPadFixedAspectRatioOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropPadFixedAspectRatioOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
    MergeFrom(*source);
  }
}

void SSDRandomCropPadFixedAspectRatioOperation::MergeFrom(const SSDRandomCropPadFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_object_covered_ = from.min_object_covered_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_aspect_ratio_ = from.min_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_aspect_ratio_ = from.max_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_area_ = from.min_area_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_area_ = from.max_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      overlap_thresh_ = from.overlap_thresh_;
    }
    if (cached_has_bits & 0x00000040u) {
      random_coef_ = from.random_coef_;
    }
    if (cached_has_bits & 0x00000080u) {
      clip_boxes_ = from.clip_boxes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSDRandomCropPadFixedAspectRatioOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPadFixedAspectRatioOperation::CopyFrom(const SSDRandomCropPadFixedAspectRatioOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPadFixedAspectRatioOperation::IsInitialized() const {
  return true;
}

void SSDRandomCropPadFixedAspectRatioOperation::Swap(SSDRandomCropPadFixedAspectRatioOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropPadFixedAspectRatioOperation::InternalSwap(SSDRandomCropPadFixedAspectRatioOperation* other) {
  using std::swap;
  swap(min_object_covered_, other->min_object_covered_);
  swap(min_aspect_ratio_, other->min_aspect_ratio_);
  swap(max_aspect_ratio_, other->max_aspect_ratio_);
  swap(min_area_, other->min_area_);
  swap(max_area_, other->max_area_);
  swap(overlap_thresh_, other->overlap_thresh_);
  swap(random_coef_, other->random_coef_);
  swap(clip_boxes_, other->clip_boxes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropPadFixedAspectRatioOperation::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropPadFixedAspectRatioOperation

// optional float min_object_covered = 1;
bool SSDRandomCropPadFixedAspectRatioOperation::has_min_object_covered() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_min_object_covered() {
  _has_bits_[0] |= 0x00000001u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_min_object_covered() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_min_object_covered() {
  min_object_covered_ = 0;
  clear_has_min_object_covered();
}
float SSDRandomCropPadFixedAspectRatioOperation::min_object_covered() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.min_object_covered)
  return min_object_covered_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_min_object_covered(float value) {
  set_has_min_object_covered();
  min_object_covered_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.min_object_covered)
}

// optional float min_aspect_ratio = 2;
bool SSDRandomCropPadFixedAspectRatioOperation::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 0;
  clear_has_min_aspect_ratio();
}
float SSDRandomCropPadFixedAspectRatioOperation::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.min_aspect_ratio)
  return min_aspect_ratio_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.min_aspect_ratio)
}

// optional float max_aspect_ratio = 3;
bool SSDRandomCropPadFixedAspectRatioOperation::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 0;
  clear_has_max_aspect_ratio();
}
float SSDRandomCropPadFixedAspectRatioOperation::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.max_aspect_ratio)
  return max_aspect_ratio_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.max_aspect_ratio)
}

// optional float min_area = 4;
bool SSDRandomCropPadFixedAspectRatioOperation::has_min_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_min_area() {
  _has_bits_[0] |= 0x00000008u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_min_area() {
  min_area_ = 0;
  clear_has_min_area();
}
float SSDRandomCropPadFixedAspectRatioOperation::min_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.min_area)
  return min_area_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_min_area(float value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.min_area)
}

// optional float max_area = 5;
bool SSDRandomCropPadFixedAspectRatioOperation::has_max_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_max_area() {
  _has_bits_[0] |= 0x00000010u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_max_area() {
  max_area_ = 0;
  clear_has_max_area();
}
float SSDRandomCropPadFixedAspectRatioOperation::max_area() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.max_area)
  return max_area_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_max_area(float value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.max_area)
}

// optional float overlap_thresh = 6;
bool SSDRandomCropPadFixedAspectRatioOperation::has_overlap_thresh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_overlap_thresh() {
  _has_bits_[0] |= 0x00000020u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_overlap_thresh() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_overlap_thresh() {
  overlap_thresh_ = 0;
  clear_has_overlap_thresh();
}
float SSDRandomCropPadFixedAspectRatioOperation::overlap_thresh() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.overlap_thresh)
  return overlap_thresh_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_overlap_thresh(float value) {
  set_has_overlap_thresh();
  overlap_thresh_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.overlap_thresh)
}

// optional bool clip_boxes = 8 [default = true];
bool SSDRandomCropPadFixedAspectRatioOperation::has_clip_boxes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_clip_boxes() {
  _has_bits_[0] |= 0x00000080u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_clip_boxes() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_clip_boxes() {
  clip_boxes_ = true;
  clear_has_clip_boxes();
}
bool SSDRandomCropPadFixedAspectRatioOperation::clip_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.clip_boxes)
  return clip_boxes_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_clip_boxes(bool value) {
  set_has_clip_boxes();
  clip_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.clip_boxes)
}

// optional float random_coef = 7;
bool SSDRandomCropPadFixedAspectRatioOperation::has_random_coef() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_has_random_coef() {
  _has_bits_[0] |= 0x00000040u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_has_random_coef() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSDRandomCropPadFixedAspectRatioOperation::clear_random_coef() {
  random_coef_ = 0;
  clear_has_random_coef();
}
float SSDRandomCropPadFixedAspectRatioOperation::random_coef() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.random_coef)
  return random_coef_;
}
void SSDRandomCropPadFixedAspectRatioOperation::set_random_coef(float value) {
  set_has_random_coef();
  random_coef_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation.random_coef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSDRandomCropPadFixedAspectRatio::kOperationsFieldNumber;
const int SSDRandomCropPadFixedAspectRatio::kAspectRatioFieldNumber;
const int SSDRandomCropPadFixedAspectRatio::kMinPaddedSizeRatioFieldNumber;
const int SSDRandomCropPadFixedAspectRatio::kMaxPaddedSizeRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSDRandomCropPadFixedAspectRatio::SSDRandomCropPadFixedAspectRatio()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
}
SSDRandomCropPadFixedAspectRatio::SSDRandomCropPadFixedAspectRatio(const SSDRandomCropPadFixedAspectRatio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      operations_(from.operations_),
      min_padded_size_ratio_(from.min_padded_size_ratio_),
      max_padded_size_ratio_(from.max_padded_size_ratio_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  aspect_ratio_ = from.aspect_ratio_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
}

void SSDRandomCropPadFixedAspectRatio::SharedCtor() {
  _cached_size_ = 0;
  aspect_ratio_ = 1;
}

SSDRandomCropPadFixedAspectRatio::~SSDRandomCropPadFixedAspectRatio() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  SharedDtor();
}

void SSDRandomCropPadFixedAspectRatio::SharedDtor() {
}

void SSDRandomCropPadFixedAspectRatio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSDRandomCropPadFixedAspectRatio::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SSDRandomCropPadFixedAspectRatio& SSDRandomCropPadFixedAspectRatio::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSDRandomCropPadFixedAspectRatio* SSDRandomCropPadFixedAspectRatio::New(::google::protobuf::Arena* arena) const {
  SSDRandomCropPadFixedAspectRatio* n = new SSDRandomCropPadFixedAspectRatio;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSDRandomCropPadFixedAspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  min_padded_size_ratio_.Clear();
  max_padded_size_ratio_.Clear();
  aspect_ratio_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSDRandomCropPadFixedAspectRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float aspect_ratio = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float min_padded_size_ratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_min_padded_size_ratio())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_min_padded_size_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float max_padded_size_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_max_padded_size_ratio())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_max_padded_size_ratio())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  return false;
#undef DO_
}

void SSDRandomCropPadFixedAspectRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operations(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->aspect_ratio(), output);
  }

  // repeated float min_padded_size_ratio = 3;
  for (int i = 0, n = this->min_padded_size_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->min_padded_size_ratio(i), output);
  }

  // repeated float max_padded_size_ratio = 4;
  for (int i = 0, n = this->max_padded_size_ratio_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->max_padded_size_ratio(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
}

::google::protobuf::uint8* SSDRandomCropPadFixedAspectRatio::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->operations(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float aspect_ratio = 2 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->aspect_ratio(), target);
  }

  // repeated float min_padded_size_ratio = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->min_padded_size_ratio_, target);

  // repeated float max_padded_size_ratio = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->max_padded_size_ratio_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  return target;
}

size_t SSDRandomCropPadFixedAspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(static_cast<int>(i)));
    }
  }

  // repeated float min_padded_size_ratio = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->min_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->min_padded_size_ratio_size());
    total_size += data_size;
  }

  // repeated float max_padded_size_ratio = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->max_padded_size_ratio_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->max_padded_size_ratio_size());
    total_size += data_size;
  }

  // optional float aspect_ratio = 2 [default = 1];
  if (has_aspect_ratio()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSDRandomCropPadFixedAspectRatio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const SSDRandomCropPadFixedAspectRatio* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSDRandomCropPadFixedAspectRatio>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
    MergeFrom(*source);
  }
}

void SSDRandomCropPadFixedAspectRatio::MergeFrom(const SSDRandomCropPadFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  min_padded_size_ratio_.MergeFrom(from.min_padded_size_ratio_);
  max_padded_size_ratio_.MergeFrom(from.max_padded_size_ratio_);
  if (from.has_aspect_ratio()) {
    set_aspect_ratio(from.aspect_ratio());
  }
}

void SSDRandomCropPadFixedAspectRatio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSDRandomCropPadFixedAspectRatio::CopyFrom(const SSDRandomCropPadFixedAspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SSDRandomCropPadFixedAspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSDRandomCropPadFixedAspectRatio::IsInitialized() const {
  return true;
}

void SSDRandomCropPadFixedAspectRatio::Swap(SSDRandomCropPadFixedAspectRatio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSDRandomCropPadFixedAspectRatio::InternalSwap(SSDRandomCropPadFixedAspectRatio* other) {
  using std::swap;
  operations_.InternalSwap(&other->operations_);
  min_padded_size_ratio_.InternalSwap(&other->min_padded_size_ratio_);
  max_padded_size_ratio_.InternalSwap(&other->max_padded_size_ratio_);
  swap(aspect_ratio_, other->aspect_ratio_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSDRandomCropPadFixedAspectRatio::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSDRandomCropPadFixedAspectRatio

// repeated .object_detection.protos.SSDRandomCropPadFixedAspectRatioOperation operations = 1;
int SSDRandomCropPadFixedAspectRatio::operations_size() const {
  return operations_.size();
}
void SSDRandomCropPadFixedAspectRatio::clear_operations() {
  operations_.Clear();
}
const ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation& SSDRandomCropPadFixedAspectRatio::operations(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatio.operations)
  return operations_.Get(index);
}
::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation* SSDRandomCropPadFixedAspectRatio::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.SSDRandomCropPadFixedAspectRatio.operations)
  return operations_.Mutable(index);
}
::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation* SSDRandomCropPadFixedAspectRatio::add_operations() {
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropPadFixedAspectRatio.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation >*
SSDRandomCropPadFixedAspectRatio::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropPadFixedAspectRatio.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::object_detection::protos::SSDRandomCropPadFixedAspectRatioOperation >&
SSDRandomCropPadFixedAspectRatio::operations() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropPadFixedAspectRatio.operations)
  return operations_;
}

// optional float aspect_ratio = 2 [default = 1];
bool SSDRandomCropPadFixedAspectRatio::has_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSDRandomCropPadFixedAspectRatio::set_has_aspect_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void SSDRandomCropPadFixedAspectRatio::clear_has_aspect_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSDRandomCropPadFixedAspectRatio::clear_aspect_ratio() {
  aspect_ratio_ = 1;
  clear_has_aspect_ratio();
}
float SSDRandomCropPadFixedAspectRatio::aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatio.aspect_ratio)
  return aspect_ratio_;
}
void SSDRandomCropPadFixedAspectRatio::set_aspect_ratio(float value) {
  set_has_aspect_ratio();
  aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatio.aspect_ratio)
}

// repeated float min_padded_size_ratio = 3;
int SSDRandomCropPadFixedAspectRatio::min_padded_size_ratio_size() const {
  return min_padded_size_ratio_.size();
}
void SSDRandomCropPadFixedAspectRatio::clear_min_padded_size_ratio() {
  min_padded_size_ratio_.Clear();
}
float SSDRandomCropPadFixedAspectRatio::min_padded_size_ratio(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatio.min_padded_size_ratio)
  return min_padded_size_ratio_.Get(index);
}
void SSDRandomCropPadFixedAspectRatio::set_min_padded_size_ratio(int index, float value) {
  min_padded_size_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatio.min_padded_size_ratio)
}
void SSDRandomCropPadFixedAspectRatio::add_min_padded_size_ratio(float value) {
  min_padded_size_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropPadFixedAspectRatio.min_padded_size_ratio)
}
const ::google::protobuf::RepeatedField< float >&
SSDRandomCropPadFixedAspectRatio::min_padded_size_ratio() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropPadFixedAspectRatio.min_padded_size_ratio)
  return min_padded_size_ratio_;
}
::google::protobuf::RepeatedField< float >*
SSDRandomCropPadFixedAspectRatio::mutable_min_padded_size_ratio() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropPadFixedAspectRatio.min_padded_size_ratio)
  return &min_padded_size_ratio_;
}

// repeated float max_padded_size_ratio = 4;
int SSDRandomCropPadFixedAspectRatio::max_padded_size_ratio_size() const {
  return max_padded_size_ratio_.size();
}
void SSDRandomCropPadFixedAspectRatio::clear_max_padded_size_ratio() {
  max_padded_size_ratio_.Clear();
}
float SSDRandomCropPadFixedAspectRatio::max_padded_size_ratio(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SSDRandomCropPadFixedAspectRatio.max_padded_size_ratio)
  return max_padded_size_ratio_.Get(index);
}
void SSDRandomCropPadFixedAspectRatio::set_max_padded_size_ratio(int index, float value) {
  max_padded_size_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SSDRandomCropPadFixedAspectRatio.max_padded_size_ratio)
}
void SSDRandomCropPadFixedAspectRatio::add_max_padded_size_ratio(float value) {
  max_padded_size_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SSDRandomCropPadFixedAspectRatio.max_padded_size_ratio)
}
const ::google::protobuf::RepeatedField< float >&
SSDRandomCropPadFixedAspectRatio::max_padded_size_ratio() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SSDRandomCropPadFixedAspectRatio.max_padded_size_ratio)
  return max_padded_size_ratio_;
}
::google::protobuf::RepeatedField< float >*
SSDRandomCropPadFixedAspectRatio::mutable_max_padded_size_ratio() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SSDRandomCropPadFixedAspectRatio.max_padded_size_ratio)
  return &max_padded_size_ratio_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConvertClassLogitsToSoftmax::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvertClassLogitsToSoftmax::ConvertClassLogitsToSoftmax()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConvertClassLogitsToSoftmax)
}
ConvertClassLogitsToSoftmax::ConvertClassLogitsToSoftmax(const ConvertClassLogitsToSoftmax& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConvertClassLogitsToSoftmax)
}

void ConvertClassLogitsToSoftmax::SharedCtor() {
  _cached_size_ = 0;
  temperature_ = 1;
}

ConvertClassLogitsToSoftmax::~ConvertClassLogitsToSoftmax() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConvertClassLogitsToSoftmax)
  SharedDtor();
}

void ConvertClassLogitsToSoftmax::SharedDtor() {
}

void ConvertClassLogitsToSoftmax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertClassLogitsToSoftmax::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConvertClassLogitsToSoftmax& ConvertClassLogitsToSoftmax::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConvertClassLogitsToSoftmax* ConvertClassLogitsToSoftmax::New(::google::protobuf::Arena* arena) const {
  ConvertClassLogitsToSoftmax* n = new ConvertClassLogitsToSoftmax;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvertClassLogitsToSoftmax::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperature_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConvertClassLogitsToSoftmax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float temperature = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConvertClassLogitsToSoftmax)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConvertClassLogitsToSoftmax)
  return false;
#undef DO_
}

void ConvertClassLogitsToSoftmax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float temperature = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->temperature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConvertClassLogitsToSoftmax)
}

::google::protobuf::uint8* ConvertClassLogitsToSoftmax::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float temperature = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->temperature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConvertClassLogitsToSoftmax)
  return target;
}

size_t ConvertClassLogitsToSoftmax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float temperature = 1 [default = 1];
  if (has_temperature()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertClassLogitsToSoftmax::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  GOOGLE_DCHECK_NE(&from, this);
  const ConvertClassLogitsToSoftmax* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvertClassLogitsToSoftmax>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConvertClassLogitsToSoftmax)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConvertClassLogitsToSoftmax)
    MergeFrom(*source);
  }
}

void ConvertClassLogitsToSoftmax::MergeFrom(const ConvertClassLogitsToSoftmax& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_temperature()) {
    set_temperature(from.temperature());
  }
}

void ConvertClassLogitsToSoftmax::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertClassLogitsToSoftmax::CopyFrom(const ConvertClassLogitsToSoftmax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConvertClassLogitsToSoftmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertClassLogitsToSoftmax::IsInitialized() const {
  return true;
}

void ConvertClassLogitsToSoftmax::Swap(ConvertClassLogitsToSoftmax* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvertClassLogitsToSoftmax::InternalSwap(ConvertClassLogitsToSoftmax* other) {
  using std::swap;
  swap(temperature_, other->temperature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvertClassLogitsToSoftmax::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvertClassLogitsToSoftmax

// optional float temperature = 1 [default = 1];
bool ConvertClassLogitsToSoftmax::has_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConvertClassLogitsToSoftmax::set_has_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
void ConvertClassLogitsToSoftmax::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConvertClassLogitsToSoftmax::clear_temperature() {
  temperature_ = 1;
  clear_has_temperature();
}
float ConvertClassLogitsToSoftmax::temperature() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvertClassLogitsToSoftmax.temperature)
  return temperature_;
}
void ConvertClassLogitsToSoftmax::set_temperature(float value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvertClassLogitsToSoftmax.temperature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomSelfConcatImage::kConcatVerticalProbabilityFieldNumber;
const int RandomSelfConcatImage::kConcatHorizontalProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomSelfConcatImage::RandomSelfConcatImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomSelfConcatImage)
}
RandomSelfConcatImage::RandomSelfConcatImage(const RandomSelfConcatImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&concat_vertical_probability_, &from.concat_vertical_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&concat_horizontal_probability_) -
    reinterpret_cast<char*>(&concat_vertical_probability_)) + sizeof(concat_horizontal_probability_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomSelfConcatImage)
}

void RandomSelfConcatImage::SharedCtor() {
  _cached_size_ = 0;
  concat_vertical_probability_ = 0.1f;
  concat_horizontal_probability_ = 0.1f;
}

RandomSelfConcatImage::~RandomSelfConcatImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomSelfConcatImage)
  SharedDtor();
}

void RandomSelfConcatImage::SharedDtor() {
}

void RandomSelfConcatImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomSelfConcatImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomSelfConcatImage& RandomSelfConcatImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomSelfConcatImage* RandomSelfConcatImage::New(::google::protobuf::Arena* arena) const {
  RandomSelfConcatImage* n = new RandomSelfConcatImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomSelfConcatImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomSelfConcatImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    concat_vertical_probability_ = 0.1f;
    concat_horizontal_probability_ = 0.1f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomSelfConcatImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomSelfConcatImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float concat_vertical_probability = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_concat_vertical_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &concat_vertical_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float concat_horizontal_probability = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_concat_horizontal_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &concat_horizontal_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomSelfConcatImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomSelfConcatImage)
  return false;
#undef DO_
}

void RandomSelfConcatImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomSelfConcatImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float concat_vertical_probability = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->concat_vertical_probability(), output);
  }

  // optional float concat_horizontal_probability = 2 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->concat_horizontal_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomSelfConcatImage)
}

::google::protobuf::uint8* RandomSelfConcatImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomSelfConcatImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float concat_vertical_probability = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->concat_vertical_probability(), target);
  }

  // optional float concat_horizontal_probability = 2 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->concat_horizontal_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomSelfConcatImage)
  return target;
}

size_t RandomSelfConcatImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomSelfConcatImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float concat_vertical_probability = 1 [default = 0.1];
    if (has_concat_vertical_probability()) {
      total_size += 1 + 4;
    }

    // optional float concat_horizontal_probability = 2 [default = 0.1];
    if (has_concat_horizontal_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomSelfConcatImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomSelfConcatImage)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomSelfConcatImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomSelfConcatImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomSelfConcatImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomSelfConcatImage)
    MergeFrom(*source);
  }
}

void RandomSelfConcatImage::MergeFrom(const RandomSelfConcatImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomSelfConcatImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      concat_vertical_probability_ = from.concat_vertical_probability_;
    }
    if (cached_has_bits & 0x00000002u) {
      concat_horizontal_probability_ = from.concat_horizontal_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RandomSelfConcatImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomSelfConcatImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomSelfConcatImage::CopyFrom(const RandomSelfConcatImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomSelfConcatImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomSelfConcatImage::IsInitialized() const {
  return true;
}

void RandomSelfConcatImage::Swap(RandomSelfConcatImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomSelfConcatImage::InternalSwap(RandomSelfConcatImage* other) {
  using std::swap;
  swap(concat_vertical_probability_, other->concat_vertical_probability_);
  swap(concat_horizontal_probability_, other->concat_horizontal_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomSelfConcatImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomSelfConcatImage

// optional float concat_vertical_probability = 1 [default = 0.1];
bool RandomSelfConcatImage::has_concat_vertical_probability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomSelfConcatImage::set_has_concat_vertical_probability() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomSelfConcatImage::clear_has_concat_vertical_probability() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomSelfConcatImage::clear_concat_vertical_probability() {
  concat_vertical_probability_ = 0.1f;
  clear_has_concat_vertical_probability();
}
float RandomSelfConcatImage::concat_vertical_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomSelfConcatImage.concat_vertical_probability)
  return concat_vertical_probability_;
}
void RandomSelfConcatImage::set_concat_vertical_probability(float value) {
  set_has_concat_vertical_probability();
  concat_vertical_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomSelfConcatImage.concat_vertical_probability)
}

// optional float concat_horizontal_probability = 2 [default = 0.1];
bool RandomSelfConcatImage::has_concat_horizontal_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RandomSelfConcatImage::set_has_concat_horizontal_probability() {
  _has_bits_[0] |= 0x00000002u;
}
void RandomSelfConcatImage::clear_has_concat_horizontal_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
void RandomSelfConcatImage::clear_concat_horizontal_probability() {
  concat_horizontal_probability_ = 0.1f;
  clear_has_concat_horizontal_probability();
}
float RandomSelfConcatImage::concat_horizontal_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomSelfConcatImage.concat_horizontal_probability)
  return concat_horizontal_probability_;
}
void RandomSelfConcatImage::set_concat_horizontal_probability(float value) {
  set_has_concat_horizontal_probability();
  concat_horizontal_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomSelfConcatImage.concat_horizontal_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> AutoAugmentImage::_default_policy_name_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoAugmentImage::kPolicyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoAugmentImage::AutoAugmentImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.AutoAugmentImage)
}
AutoAugmentImage::AutoAugmentImage(const AutoAugmentImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_name_.UnsafeSetDefault(&AutoAugmentImage::_default_policy_name_.get());
  if (from.has_policy_name()) {
    policy_name_.AssignWithDefault(&AutoAugmentImage::_default_policy_name_.get(), from.policy_name_);
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.AutoAugmentImage)
}

void AutoAugmentImage::SharedCtor() {
  _cached_size_ = 0;
  policy_name_.UnsafeSetDefault(&AutoAugmentImage::_default_policy_name_.get());
}

AutoAugmentImage::~AutoAugmentImage() {
  // @@protoc_insertion_point(destructor:object_detection.protos.AutoAugmentImage)
  SharedDtor();
}

void AutoAugmentImage::SharedDtor() {
  policy_name_.DestroyNoArena(&AutoAugmentImage::_default_policy_name_.get());
}

void AutoAugmentImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAugmentImage::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoAugmentImage& AutoAugmentImage::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoAugmentImage* AutoAugmentImage::New(::google::protobuf::Arena* arena) const {
  AutoAugmentImage* n = new AutoAugmentImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AutoAugmentImage::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.AutoAugmentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_policy_name()) {
    GOOGLE_DCHECK(!policy_name_.IsDefault(&AutoAugmentImage::_default_policy_name_.get()));
    (*policy_name_.UnsafeRawStringPointer())->assign(*&AutoAugmentImage::_default_policy_name_.get());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AutoAugmentImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.AutoAugmentImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy_name = 1 [default = "v0"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy_name().data(), static_cast<int>(this->policy_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.AutoAugmentImage.policy_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.AutoAugmentImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.AutoAugmentImage)
  return false;
#undef DO_
}

void AutoAugmentImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.AutoAugmentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_name = 1 [default = "v0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy_name().data(), static_cast<int>(this->policy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.AutoAugmentImage.policy_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.AutoAugmentImage)
}

::google::protobuf::uint8* AutoAugmentImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.AutoAugmentImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_name = 1 [default = "v0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy_name().data(), static_cast<int>(this->policy_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.AutoAugmentImage.policy_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->policy_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.AutoAugmentImage)
  return target;
}

size_t AutoAugmentImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.AutoAugmentImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string policy_name = 1 [default = "v0"];
  if (has_policy_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->policy_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAugmentImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.AutoAugmentImage)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoAugmentImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoAugmentImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.AutoAugmentImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.AutoAugmentImage)
    MergeFrom(*source);
  }
}

void AutoAugmentImage::MergeFrom(const AutoAugmentImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.AutoAugmentImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_policy_name()) {
    set_has_policy_name();
    policy_name_.AssignWithDefault(&AutoAugmentImage::_default_policy_name_.get(), from.policy_name_);
  }
}

void AutoAugmentImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.AutoAugmentImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAugmentImage::CopyFrom(const AutoAugmentImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.AutoAugmentImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAugmentImage::IsInitialized() const {
  return true;
}

void AutoAugmentImage::Swap(AutoAugmentImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AutoAugmentImage::InternalSwap(AutoAugmentImage* other) {
  using std::swap;
  policy_name_.Swap(&other->policy_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoAugmentImage::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoAugmentImage

// optional string policy_name = 1 [default = "v0"];
bool AutoAugmentImage::has_policy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AutoAugmentImage::set_has_policy_name() {
  _has_bits_[0] |= 0x00000001u;
}
void AutoAugmentImage::clear_has_policy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void AutoAugmentImage::clear_policy_name() {
  policy_name_.ClearToDefaultNoArena(&AutoAugmentImage::_default_policy_name_.get());
  clear_has_policy_name();
}
const ::std::string& AutoAugmentImage::policy_name() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.AutoAugmentImage.policy_name)
  return policy_name_.GetNoArena();
}
void AutoAugmentImage::set_policy_name(const ::std::string& value) {
  set_has_policy_name();
  policy_name_.SetNoArena(&AutoAugmentImage::_default_policy_name_.get(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.AutoAugmentImage.policy_name)
}
#if LANG_CXX11
void AutoAugmentImage::set_policy_name(::std::string&& value) {
  set_has_policy_name();
  policy_name_.SetNoArena(
    &AutoAugmentImage::_default_policy_name_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.AutoAugmentImage.policy_name)
}
#endif
void AutoAugmentImage::set_policy_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy_name();
  policy_name_.SetNoArena(&AutoAugmentImage::_default_policy_name_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.AutoAugmentImage.policy_name)
}
void AutoAugmentImage::set_policy_name(const char* value, size_t size) {
  set_has_policy_name();
  policy_name_.SetNoArena(&AutoAugmentImage::_default_policy_name_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.AutoAugmentImage.policy_name)
}
::std::string* AutoAugmentImage::mutable_policy_name() {
  set_has_policy_name();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.AutoAugmentImage.policy_name)
  return policy_name_.MutableNoArena(&AutoAugmentImage::_default_policy_name_.get());
}
::std::string* AutoAugmentImage::release_policy_name() {
  // @@protoc_insertion_point(field_release:object_detection.protos.AutoAugmentImage.policy_name)
  clear_has_policy_name();
  return policy_name_.ReleaseNoArena(&AutoAugmentImage::_default_policy_name_.get());
}
void AutoAugmentImage::set_allocated_policy_name(::std::string* policy_name) {
  if (policy_name != NULL) {
    set_has_policy_name();
  } else {
    clear_has_policy_name();
  }
  policy_name_.SetAllocatedNoArena(&AutoAugmentImage::_default_policy_name_.get(), policy_name);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.AutoAugmentImage.policy_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DropLabelProbabilistically::kLabelFieldNumber;
const int DropLabelProbabilistically::kDropProbabilityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DropLabelProbabilistically::DropLabelProbabilistically()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.DropLabelProbabilistically)
}
DropLabelProbabilistically::DropLabelProbabilistically(const DropLabelProbabilistically& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&label_, &from.label_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_probability_) -
    reinterpret_cast<char*>(&label_)) + sizeof(drop_probability_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.DropLabelProbabilistically)
}

void DropLabelProbabilistically::SharedCtor() {
  _cached_size_ = 0;
  label_ = 0;
  drop_probability_ = 1;
}

DropLabelProbabilistically::~DropLabelProbabilistically() {
  // @@protoc_insertion_point(destructor:object_detection.protos.DropLabelProbabilistically)
  SharedDtor();
}

void DropLabelProbabilistically::SharedDtor() {
}

void DropLabelProbabilistically::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropLabelProbabilistically::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DropLabelProbabilistically& DropLabelProbabilistically::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

DropLabelProbabilistically* DropLabelProbabilistically::New(::google::protobuf::Arena* arena) const {
  DropLabelProbabilistically* n = new DropLabelProbabilistically;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DropLabelProbabilistically::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.DropLabelProbabilistically)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    label_ = 0;
    drop_probability_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DropLabelProbabilistically::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.DropLabelProbabilistically)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float drop_probability = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_drop_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drop_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.DropLabelProbabilistically)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.DropLabelProbabilistically)
  return false;
#undef DO_
}

void DropLabelProbabilistically::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.DropLabelProbabilistically)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->label(), output);
  }

  // optional float drop_probability = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->drop_probability(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.DropLabelProbabilistically)
}

::google::protobuf::uint8* DropLabelProbabilistically::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.DropLabelProbabilistically)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 label = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->label(), target);
  }

  // optional float drop_probability = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->drop_probability(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.DropLabelProbabilistically)
  return target;
}

size_t DropLabelProbabilistically::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.DropLabelProbabilistically)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional float drop_probability = 2 [default = 1];
    if (has_drop_probability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropLabelProbabilistically::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.DropLabelProbabilistically)
  GOOGLE_DCHECK_NE(&from, this);
  const DropLabelProbabilistically* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DropLabelProbabilistically>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.DropLabelProbabilistically)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.DropLabelProbabilistically)
    MergeFrom(*source);
  }
}

void DropLabelProbabilistically::MergeFrom(const DropLabelProbabilistically& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.DropLabelProbabilistically)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000002u) {
      drop_probability_ = from.drop_probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DropLabelProbabilistically::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.DropLabelProbabilistically)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropLabelProbabilistically::CopyFrom(const DropLabelProbabilistically& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.DropLabelProbabilistically)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropLabelProbabilistically::IsInitialized() const {
  return true;
}

void DropLabelProbabilistically::Swap(DropLabelProbabilistically* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DropLabelProbabilistically::InternalSwap(DropLabelProbabilistically* other) {
  using std::swap;
  swap(label_, other->label_);
  swap(drop_probability_, other->drop_probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DropLabelProbabilistically::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DropLabelProbabilistically

// optional int32 label = 1;
bool DropLabelProbabilistically::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DropLabelProbabilistically::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void DropLabelProbabilistically::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void DropLabelProbabilistically::clear_label() {
  label_ = 0;
  clear_has_label();
}
::google::protobuf::int32 DropLabelProbabilistically::label() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.DropLabelProbabilistically.label)
  return label_;
}
void DropLabelProbabilistically::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.DropLabelProbabilistically.label)
}

// optional float drop_probability = 2 [default = 1];
bool DropLabelProbabilistically::has_drop_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DropLabelProbabilistically::set_has_drop_probability() {
  _has_bits_[0] |= 0x00000002u;
}
void DropLabelProbabilistically::clear_has_drop_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
void DropLabelProbabilistically::clear_drop_probability() {
  drop_probability_ = 1;
  clear_has_drop_probability();
}
float DropLabelProbabilistically::drop_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.DropLabelProbabilistically.drop_probability)
  return drop_probability_;
}
void DropLabelProbabilistically::set_drop_probability(float value) {
  set_has_drop_probability();
  drop_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.DropLabelProbabilistically.drop_probability)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemapLabels::kOriginalLabelsFieldNumber;
const int RemapLabels::kNewLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemapLabels::RemapLabels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RemapLabels)
}
RemapLabels::RemapLabels(const RemapLabels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      original_labels_(from.original_labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_label_ = from.new_label_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RemapLabels)
}

void RemapLabels::SharedCtor() {
  _cached_size_ = 0;
  new_label_ = 0;
}

RemapLabels::~RemapLabels() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RemapLabels)
  SharedDtor();
}

void RemapLabels::SharedDtor() {
}

void RemapLabels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemapLabels::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemapLabels& RemapLabels::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemapLabels* RemapLabels::New(::google::protobuf::Arena* arena) const {
  RemapLabels* n = new RemapLabels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemapLabels::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RemapLabels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_labels_.Clear();
  new_label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemapLabels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RemapLabels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 original_labels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_original_labels())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_original_labels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 new_label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_new_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RemapLabels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RemapLabels)
  return false;
#undef DO_
}

void RemapLabels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RemapLabels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 original_labels = 1;
  for (int i = 0, n = this->original_labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->original_labels(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 new_label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RemapLabels)
}

::google::protobuf::uint8* RemapLabels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RemapLabels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 original_labels = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->original_labels_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 new_label = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RemapLabels)
  return target;
}

size_t RemapLabels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RemapLabels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 original_labels = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->original_labels_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->original_labels_size());
    total_size += data_size;
  }

  // optional int32 new_label = 2;
  if (has_new_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_label());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemapLabels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RemapLabels)
  GOOGLE_DCHECK_NE(&from, this);
  const RemapLabels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemapLabels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RemapLabels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RemapLabels)
    MergeFrom(*source);
  }
}

void RemapLabels::MergeFrom(const RemapLabels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RemapLabels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  original_labels_.MergeFrom(from.original_labels_);
  if (from.has_new_label()) {
    set_new_label(from.new_label());
  }
}

void RemapLabels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RemapLabels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemapLabels::CopyFrom(const RemapLabels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RemapLabels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemapLabels::IsInitialized() const {
  return true;
}

void RemapLabels::Swap(RemapLabels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemapLabels::InternalSwap(RemapLabels* other) {
  using std::swap;
  original_labels_.InternalSwap(&other->original_labels_);
  swap(new_label_, other->new_label_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemapLabels::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemapLabels

// repeated int32 original_labels = 1;
int RemapLabels::original_labels_size() const {
  return original_labels_.size();
}
void RemapLabels::clear_original_labels() {
  original_labels_.Clear();
}
::google::protobuf::int32 RemapLabels::original_labels(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RemapLabels.original_labels)
  return original_labels_.Get(index);
}
void RemapLabels::set_original_labels(int index, ::google::protobuf::int32 value) {
  original_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.RemapLabels.original_labels)
}
void RemapLabels::add_original_labels(::google::protobuf::int32 value) {
  original_labels_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.RemapLabels.original_labels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RemapLabels::original_labels() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.RemapLabels.original_labels)
  return original_labels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RemapLabels::mutable_original_labels() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.RemapLabels.original_labels)
  return &original_labels_;
}

// optional int32 new_label = 2;
bool RemapLabels::has_new_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemapLabels::set_has_new_label() {
  _has_bits_[0] |= 0x00000001u;
}
void RemapLabels::clear_has_new_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemapLabels::clear_new_label() {
  new_label_ = 0;
  clear_has_new_label();
}
::google::protobuf::int32 RemapLabels::new_label() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RemapLabels.new_label)
  return new_label_;
}
void RemapLabels::set_new_label(::google::protobuf::int32 value) {
  set_has_new_label();
  new_label_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RemapLabels.new_label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
