// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/box_predictor.proto

#ifndef PROTOBUF_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto__INCLUDED
#define PROTOBUF_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_detection/protos/hyperparams.pb.h"
// @@protoc_insertion_point(includes)
namespace object_detection {
namespace protos {
class BoxPredictor;
class BoxPredictorDefaultTypeInternal;
extern BoxPredictorDefaultTypeInternal _BoxPredictor_default_instance_;
class ConvolutionalBoxPredictor;
class ConvolutionalBoxPredictorDefaultTypeInternal;
extern ConvolutionalBoxPredictorDefaultTypeInternal _ConvolutionalBoxPredictor_default_instance_;
class ConvolutionalBoxPredictor_BoxEncodingsClipRange;
class ConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal;
extern ConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal _ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
class MaskRCNNBoxPredictor;
class MaskRCNNBoxPredictorDefaultTypeInternal;
extern MaskRCNNBoxPredictorDefaultTypeInternal _MaskRCNNBoxPredictor_default_instance_;
class RfcnBoxPredictor;
class RfcnBoxPredictorDefaultTypeInternal;
extern RfcnBoxPredictorDefaultTypeInternal _RfcnBoxPredictor_default_instance_;
class WeightSharedConvolutionalBoxPredictor;
class WeightSharedConvolutionalBoxPredictorDefaultTypeInternal;
extern WeightSharedConvolutionalBoxPredictorDefaultTypeInternal _WeightSharedConvolutionalBoxPredictor_default_instance_;
class WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange;
class WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal;
extern WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRangeDefaultTypeInternal _WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_;
}  // namespace protos
}  // namespace object_detection

namespace object_detection {
namespace protos {

namespace protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto

enum WeightSharedConvolutionalBoxPredictor_ScoreConverter {
  WeightSharedConvolutionalBoxPredictor_ScoreConverter_IDENTITY = 0,
  WeightSharedConvolutionalBoxPredictor_ScoreConverter_SIGMOID = 1
};
bool WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(int value);
const WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_MIN = WeightSharedConvolutionalBoxPredictor_ScoreConverter_IDENTITY;
const WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_MAX = WeightSharedConvolutionalBoxPredictor_ScoreConverter_SIGMOID;
const int WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_ARRAYSIZE = WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor();
inline const ::std::string& WeightSharedConvolutionalBoxPredictor_ScoreConverter_Name(WeightSharedConvolutionalBoxPredictor_ScoreConverter value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor(), value);
}
inline bool WeightSharedConvolutionalBoxPredictor_ScoreConverter_Parse(
    const ::std::string& name, WeightSharedConvolutionalBoxPredictor_ScoreConverter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeightSharedConvolutionalBoxPredictor_ScoreConverter>(
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor(), name, value);
}
// ===================================================================

class BoxPredictor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.BoxPredictor) */ {
 public:
  BoxPredictor();
  virtual ~BoxPredictor();

  BoxPredictor(const BoxPredictor& from);

  inline BoxPredictor& operator=(const BoxPredictor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoxPredictor(BoxPredictor&& from) noexcept
    : BoxPredictor() {
    *this = ::std::move(from);
  }

  inline BoxPredictor& operator=(BoxPredictor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxPredictor& default_instance();

  enum BoxPredictorOneofCase {
    kConvolutionalBoxPredictor = 1,
    kMaskRcnnBoxPredictor = 2,
    kRfcnBoxPredictor = 3,
    kWeightSharedConvolutionalBoxPredictor = 4,
    BOX_PREDICTOR_ONEOF_NOT_SET = 0,
  };

  static inline const BoxPredictor* internal_default_instance() {
    return reinterpret_cast<const BoxPredictor*>(
               &_BoxPredictor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BoxPredictor* other);
  friend void swap(BoxPredictor& a, BoxPredictor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoxPredictor* New() const PROTOBUF_FINAL { return New(NULL); }

  BoxPredictor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoxPredictor& from);
  void MergeFrom(const BoxPredictor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoxPredictor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
  bool has_convolutional_box_predictor() const;
  void clear_convolutional_box_predictor();
  static const int kConvolutionalBoxPredictorFieldNumber = 1;
  const ::object_detection::protos::ConvolutionalBoxPredictor& convolutional_box_predictor() const;
  ::object_detection::protos::ConvolutionalBoxPredictor* mutable_convolutional_box_predictor();
  ::object_detection::protos::ConvolutionalBoxPredictor* release_convolutional_box_predictor();
  void set_allocated_convolutional_box_predictor(::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor);

  // optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
  bool has_mask_rcnn_box_predictor() const;
  void clear_mask_rcnn_box_predictor();
  static const int kMaskRcnnBoxPredictorFieldNumber = 2;
  const ::object_detection::protos::MaskRCNNBoxPredictor& mask_rcnn_box_predictor() const;
  ::object_detection::protos::MaskRCNNBoxPredictor* mutable_mask_rcnn_box_predictor();
  ::object_detection::protos::MaskRCNNBoxPredictor* release_mask_rcnn_box_predictor();
  void set_allocated_mask_rcnn_box_predictor(::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor);

  // optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
  bool has_rfcn_box_predictor() const;
  void clear_rfcn_box_predictor();
  static const int kRfcnBoxPredictorFieldNumber = 3;
  const ::object_detection::protos::RfcnBoxPredictor& rfcn_box_predictor() const;
  ::object_detection::protos::RfcnBoxPredictor* mutable_rfcn_box_predictor();
  ::object_detection::protos::RfcnBoxPredictor* release_rfcn_box_predictor();
  void set_allocated_rfcn_box_predictor(::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor);

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
  bool has_weight_shared_convolutional_box_predictor() const;
  void clear_weight_shared_convolutional_box_predictor();
  static const int kWeightSharedConvolutionalBoxPredictorFieldNumber = 4;
  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor& weight_shared_convolutional_box_predictor() const;
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* mutable_weight_shared_convolutional_box_predictor();
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* release_weight_shared_convolutional_box_predictor();
  void set_allocated_weight_shared_convolutional_box_predictor(::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor);

  BoxPredictorOneofCase box_predictor_oneof_case() const;
  // @@protoc_insertion_point(class_scope:object_detection.protos.BoxPredictor)
 private:
  void set_has_convolutional_box_predictor();
  void set_has_mask_rcnn_box_predictor();
  void set_has_rfcn_box_predictor();
  void set_has_weight_shared_convolutional_box_predictor();

  inline bool has_box_predictor_oneof() const;
  void clear_box_predictor_oneof();
  inline void clear_has_box_predictor_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  union BoxPredictorOneofUnion {
    BoxPredictorOneofUnion() {}
    ::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor_;
    ::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor_;
    ::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor_;
    ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor_;
  } box_predictor_oneof_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolutionalBoxPredictor_BoxEncodingsClipRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange) */ {
 public:
  ConvolutionalBoxPredictor_BoxEncodingsClipRange();
  virtual ~ConvolutionalBoxPredictor_BoxEncodingsClipRange();

  ConvolutionalBoxPredictor_BoxEncodingsClipRange(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from);

  inline ConvolutionalBoxPredictor_BoxEncodingsClipRange& operator=(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvolutionalBoxPredictor_BoxEncodingsClipRange(ConvolutionalBoxPredictor_BoxEncodingsClipRange&& from) noexcept
    : ConvolutionalBoxPredictor_BoxEncodingsClipRange() {
    *this = ::std::move(from);
  }

  inline ConvolutionalBoxPredictor_BoxEncodingsClipRange& operator=(ConvolutionalBoxPredictor_BoxEncodingsClipRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionalBoxPredictor_BoxEncodingsClipRange& default_instance();

  static inline const ConvolutionalBoxPredictor_BoxEncodingsClipRange* internal_default_instance() {
    return reinterpret_cast<const ConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
               &_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ConvolutionalBoxPredictor_BoxEncodingsClipRange* other);
  friend void swap(ConvolutionalBoxPredictor_BoxEncodingsClipRange& a, ConvolutionalBoxPredictor_BoxEncodingsClipRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionalBoxPredictor_BoxEncodingsClipRange* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionalBoxPredictor_BoxEncodingsClipRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from);
  void MergeFrom(const ConvolutionalBoxPredictor_BoxEncodingsClipRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionalBoxPredictor_BoxEncodingsClipRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // optional float max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float min_;
  float max_;
  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConvolutionalBoxPredictor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ConvolutionalBoxPredictor) */ {
 public:
  ConvolutionalBoxPredictor();
  virtual ~ConvolutionalBoxPredictor();

  ConvolutionalBoxPredictor(const ConvolutionalBoxPredictor& from);

  inline ConvolutionalBoxPredictor& operator=(const ConvolutionalBoxPredictor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvolutionalBoxPredictor(ConvolutionalBoxPredictor&& from) noexcept
    : ConvolutionalBoxPredictor() {
    *this = ::std::move(from);
  }

  inline ConvolutionalBoxPredictor& operator=(ConvolutionalBoxPredictor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionalBoxPredictor& default_instance();

  static inline const ConvolutionalBoxPredictor* internal_default_instance() {
    return reinterpret_cast<const ConvolutionalBoxPredictor*>(
               &_ConvolutionalBoxPredictor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ConvolutionalBoxPredictor* other);
  friend void swap(ConvolutionalBoxPredictor& a, ConvolutionalBoxPredictor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvolutionalBoxPredictor* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvolutionalBoxPredictor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvolutionalBoxPredictor& from);
  void MergeFrom(const ConvolutionalBoxPredictor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvolutionalBoxPredictor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConvolutionalBoxPredictor_BoxEncodingsClipRange BoxEncodingsClipRange;

  // accessors -------------------------------------------------------

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  bool has_conv_hyperparams() const;
  void clear_conv_hyperparams();
  static const int kConvHyperparamsFieldNumber = 1;
  const ::object_detection::protos::Hyperparams& conv_hyperparams() const;
  ::object_detection::protos::Hyperparams* mutable_conv_hyperparams();
  ::object_detection::protos::Hyperparams* release_conv_hyperparams();
  void set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams);

  // optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
  bool has_box_encodings_clip_range() const;
  void clear_box_encodings_clip_range();
  static const int kBoxEncodingsClipRangeFieldNumber = 12;
  const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange& box_encodings_clip_range() const;
  ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* mutable_box_encodings_clip_range();
  ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* release_box_encodings_clip_range();
  void set_allocated_box_encodings_clip_range(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range);

  // optional int32 min_depth = 2 [default = 0];
  bool has_min_depth() const;
  void clear_min_depth();
  static const int kMinDepthFieldNumber = 2;
  ::google::protobuf::int32 min_depth() const;
  void set_min_depth(::google::protobuf::int32 value);

  // optional int32 max_depth = 3 [default = 0];
  bool has_max_depth() const;
  void clear_max_depth();
  static const int kMaxDepthFieldNumber = 3;
  ::google::protobuf::int32 max_depth() const;
  void set_max_depth(::google::protobuf::int32 value);

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  bool has_num_layers_before_predictor() const;
  void clear_num_layers_before_predictor();
  static const int kNumLayersBeforePredictorFieldNumber = 4;
  ::google::protobuf::int32 num_layers_before_predictor() const;
  void set_num_layers_before_predictor(::google::protobuf::int32 value);

  // optional float class_prediction_bias_init = 10 [default = 0];
  bool has_class_prediction_bias_init() const;
  void clear_class_prediction_bias_init();
  static const int kClassPredictionBiasInitFieldNumber = 10;
  float class_prediction_bias_init() const;
  void set_class_prediction_bias_init(float value);

  // optional bool apply_sigmoid_to_scores = 9 [default = false];
  bool has_apply_sigmoid_to_scores() const;
  void clear_apply_sigmoid_to_scores();
  static const int kApplySigmoidToScoresFieldNumber = 9;
  bool apply_sigmoid_to_scores() const;
  void set_apply_sigmoid_to_scores(bool value);

  // optional bool use_depthwise = 11 [default = false];
  bool has_use_depthwise() const;
  void clear_use_depthwise();
  static const int kUseDepthwiseFieldNumber = 11;
  bool use_depthwise() const;
  void set_use_depthwise(bool value);

  // optional bool use_dropout = 5 [default = true];
  bool has_use_dropout() const;
  void clear_use_dropout();
  static const int kUseDropoutFieldNumber = 5;
  bool use_dropout() const;
  void set_use_dropout(bool value);

  // optional float dropout_keep_probability = 6 [default = 0.8];
  bool has_dropout_keep_probability() const;
  void clear_dropout_keep_probability();
  static const int kDropoutKeepProbabilityFieldNumber = 6;
  float dropout_keep_probability() const;
  void set_dropout_keep_probability(float value);

  // optional int32 kernel_size = 7 [default = 1];
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 7;
  ::google::protobuf::int32 kernel_size() const;
  void set_kernel_size(::google::protobuf::int32 value);

  // optional int32 box_code_size = 8 [default = 4];
  bool has_box_code_size() const;
  void clear_box_code_size();
  static const int kBoxCodeSizeFieldNumber = 8;
  ::google::protobuf::int32 box_code_size() const;
  void set_box_code_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.ConvolutionalBoxPredictor)
 private:
  void set_has_conv_hyperparams();
  void clear_has_conv_hyperparams();
  void set_has_min_depth();
  void clear_has_min_depth();
  void set_has_max_depth();
  void clear_has_max_depth();
  void set_has_num_layers_before_predictor();
  void clear_has_num_layers_before_predictor();
  void set_has_use_dropout();
  void clear_has_use_dropout();
  void set_has_dropout_keep_probability();
  void clear_has_dropout_keep_probability();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_box_code_size();
  void clear_has_box_code_size();
  void set_has_apply_sigmoid_to_scores();
  void clear_has_apply_sigmoid_to_scores();
  void set_has_class_prediction_bias_init();
  void clear_has_class_prediction_bias_init();
  void set_has_use_depthwise();
  void clear_has_use_depthwise();
  void set_has_box_encodings_clip_range();
  void clear_has_box_encodings_clip_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::object_detection::protos::Hyperparams* conv_hyperparams_;
  ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range_;
  ::google::protobuf::int32 min_depth_;
  ::google::protobuf::int32 max_depth_;
  ::google::protobuf::int32 num_layers_before_predictor_;
  float class_prediction_bias_init_;
  bool apply_sigmoid_to_scores_;
  bool use_depthwise_;
  bool use_dropout_;
  float dropout_keep_probability_;
  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 box_code_size_;
  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange) */ {
 public:
  WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange();
  virtual ~WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange();

  WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from);

  inline WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& operator=(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange&& from) noexcept
    : WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange() {
    *this = ::std::move(from);
  }

  inline WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& operator=(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& default_instance();

  static inline const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* internal_default_instance() {
    return reinterpret_cast<const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
               &_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* other);
  friend void swap(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& a, WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* New() const PROTOBUF_FINAL { return New(NULL); }

  WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from);
  void MergeFrom(const WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min = 1;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 1;
  float min() const;
  void set_min(float value);

  // optional float max = 2;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  float max() const;
  void set_max(float value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange)
 private:
  void set_has_min();
  void clear_has_min();
  void set_has_max();
  void clear_has_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float min_;
  float max_;
  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WeightSharedConvolutionalBoxPredictor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.WeightSharedConvolutionalBoxPredictor) */ {
 public:
  WeightSharedConvolutionalBoxPredictor();
  virtual ~WeightSharedConvolutionalBoxPredictor();

  WeightSharedConvolutionalBoxPredictor(const WeightSharedConvolutionalBoxPredictor& from);

  inline WeightSharedConvolutionalBoxPredictor& operator=(const WeightSharedConvolutionalBoxPredictor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WeightSharedConvolutionalBoxPredictor(WeightSharedConvolutionalBoxPredictor&& from) noexcept
    : WeightSharedConvolutionalBoxPredictor() {
    *this = ::std::move(from);
  }

  inline WeightSharedConvolutionalBoxPredictor& operator=(WeightSharedConvolutionalBoxPredictor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightSharedConvolutionalBoxPredictor& default_instance();

  static inline const WeightSharedConvolutionalBoxPredictor* internal_default_instance() {
    return reinterpret_cast<const WeightSharedConvolutionalBoxPredictor*>(
               &_WeightSharedConvolutionalBoxPredictor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(WeightSharedConvolutionalBoxPredictor* other);
  friend void swap(WeightSharedConvolutionalBoxPredictor& a, WeightSharedConvolutionalBoxPredictor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WeightSharedConvolutionalBoxPredictor* New() const PROTOBUF_FINAL { return New(NULL); }

  WeightSharedConvolutionalBoxPredictor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeightSharedConvolutionalBoxPredictor& from);
  void MergeFrom(const WeightSharedConvolutionalBoxPredictor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeightSharedConvolutionalBoxPredictor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange BoxEncodingsClipRange;

  typedef WeightSharedConvolutionalBoxPredictor_ScoreConverter ScoreConverter;
  static const ScoreConverter IDENTITY =
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_IDENTITY;
  static const ScoreConverter SIGMOID =
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_SIGMOID;
  static inline bool ScoreConverter_IsValid(int value) {
    return WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(value);
  }
  static const ScoreConverter ScoreConverter_MIN =
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_MIN;
  static const ScoreConverter ScoreConverter_MAX =
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_MAX;
  static const int ScoreConverter_ARRAYSIZE =
    WeightSharedConvolutionalBoxPredictor_ScoreConverter_ScoreConverter_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScoreConverter_descriptor() {
    return WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor();
  }
  static inline const ::std::string& ScoreConverter_Name(ScoreConverter value) {
    return WeightSharedConvolutionalBoxPredictor_ScoreConverter_Name(value);
  }
  static inline bool ScoreConverter_Parse(const ::std::string& name,
      ScoreConverter* value) {
    return WeightSharedConvolutionalBoxPredictor_ScoreConverter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  bool has_conv_hyperparams() const;
  void clear_conv_hyperparams();
  static const int kConvHyperparamsFieldNumber = 1;
  const ::object_detection::protos::Hyperparams& conv_hyperparams() const;
  ::object_detection::protos::Hyperparams* mutable_conv_hyperparams();
  ::object_detection::protos::Hyperparams* release_conv_hyperparams();
  void set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams);

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
  bool has_box_encodings_clip_range() const;
  void clear_box_encodings_clip_range();
  static const int kBoxEncodingsClipRangeFieldNumber = 17;
  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& box_encodings_clip_range() const;
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* mutable_box_encodings_clip_range();
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* release_box_encodings_clip_range();
  void set_allocated_box_encodings_clip_range(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range);

  // optional int32 depth = 2 [default = 0];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 2;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional int32 num_layers_before_predictor = 4 [default = 0];
  bool has_num_layers_before_predictor() const;
  void clear_num_layers_before_predictor();
  static const int kNumLayersBeforePredictorFieldNumber = 4;
  ::google::protobuf::int32 num_layers_before_predictor() const;
  void set_num_layers_before_predictor(::google::protobuf::int32 value);

  // optional float class_prediction_bias_init = 10 [default = 0];
  bool has_class_prediction_bias_init() const;
  void clear_class_prediction_bias_init();
  static const int kClassPredictionBiasInitFieldNumber = 10;
  float class_prediction_bias_init() const;
  void set_class_prediction_bias_init(float value);

  // optional bool use_dropout = 11 [default = false];
  bool has_use_dropout() const;
  void clear_use_dropout();
  static const int kUseDropoutFieldNumber = 11;
  bool use_dropout() const;
  void set_use_dropout(bool value);

  // optional bool share_prediction_tower = 13 [default = false];
  bool has_share_prediction_tower() const;
  void clear_share_prediction_tower();
  static const int kSharePredictionTowerFieldNumber = 13;
  bool share_prediction_tower() const;
  void set_share_prediction_tower(bool value);

  // optional bool use_depthwise = 14 [default = false];
  bool has_use_depthwise() const;
  void clear_use_depthwise();
  static const int kUseDepthwiseFieldNumber = 14;
  bool use_depthwise() const;
  void set_use_depthwise(bool value);

  // optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
  bool has_score_converter() const;
  void clear_score_converter();
  static const int kScoreConverterFieldNumber = 16;
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter score_converter() const;
  void set_score_converter(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter value);

  // optional float dropout_keep_probability = 12 [default = 0.8];
  bool has_dropout_keep_probability() const;
  void clear_dropout_keep_probability();
  static const int kDropoutKeepProbabilityFieldNumber = 12;
  float dropout_keep_probability() const;
  void set_dropout_keep_probability(float value);

  // optional int32 kernel_size = 7 [default = 3];
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 7;
  ::google::protobuf::int32 kernel_size() const;
  void set_kernel_size(::google::protobuf::int32 value);

  // optional int32 box_code_size = 8 [default = 4];
  bool has_box_code_size() const;
  void clear_box_code_size();
  static const int kBoxCodeSizeFieldNumber = 8;
  ::google::protobuf::int32 box_code_size() const;
  void set_box_code_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.WeightSharedConvolutionalBoxPredictor)
 private:
  void set_has_conv_hyperparams();
  void clear_has_conv_hyperparams();
  void set_has_num_layers_before_predictor();
  void clear_has_num_layers_before_predictor();
  void set_has_depth();
  void clear_has_depth();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_box_code_size();
  void clear_has_box_code_size();
  void set_has_class_prediction_bias_init();
  void clear_has_class_prediction_bias_init();
  void set_has_use_dropout();
  void clear_has_use_dropout();
  void set_has_dropout_keep_probability();
  void clear_has_dropout_keep_probability();
  void set_has_share_prediction_tower();
  void clear_has_share_prediction_tower();
  void set_has_use_depthwise();
  void clear_has_use_depthwise();
  void set_has_score_converter();
  void clear_has_score_converter();
  void set_has_box_encodings_clip_range();
  void clear_has_box_encodings_clip_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::object_detection::protos::Hyperparams* conv_hyperparams_;
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 num_layers_before_predictor_;
  float class_prediction_bias_init_;
  bool use_dropout_;
  bool share_prediction_tower_;
  bool use_depthwise_;
  int score_converter_;
  float dropout_keep_probability_;
  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 box_code_size_;
  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaskRCNNBoxPredictor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.MaskRCNNBoxPredictor) */ {
 public:
  MaskRCNNBoxPredictor();
  virtual ~MaskRCNNBoxPredictor();

  MaskRCNNBoxPredictor(const MaskRCNNBoxPredictor& from);

  inline MaskRCNNBoxPredictor& operator=(const MaskRCNNBoxPredictor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaskRCNNBoxPredictor(MaskRCNNBoxPredictor&& from) noexcept
    : MaskRCNNBoxPredictor() {
    *this = ::std::move(from);
  }

  inline MaskRCNNBoxPredictor& operator=(MaskRCNNBoxPredictor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaskRCNNBoxPredictor& default_instance();

  static inline const MaskRCNNBoxPredictor* internal_default_instance() {
    return reinterpret_cast<const MaskRCNNBoxPredictor*>(
               &_MaskRCNNBoxPredictor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MaskRCNNBoxPredictor* other);
  friend void swap(MaskRCNNBoxPredictor& a, MaskRCNNBoxPredictor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaskRCNNBoxPredictor* New() const PROTOBUF_FINAL { return New(NULL); }

  MaskRCNNBoxPredictor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaskRCNNBoxPredictor& from);
  void MergeFrom(const MaskRCNNBoxPredictor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaskRCNNBoxPredictor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
  bool has_fc_hyperparams() const;
  void clear_fc_hyperparams();
  static const int kFcHyperparamsFieldNumber = 1;
  const ::object_detection::protos::Hyperparams& fc_hyperparams() const;
  ::object_detection::protos::Hyperparams* mutable_fc_hyperparams();
  ::object_detection::protos::Hyperparams* release_fc_hyperparams();
  void set_allocated_fc_hyperparams(::object_detection::protos::Hyperparams* fc_hyperparams);

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
  bool has_conv_hyperparams() const;
  void clear_conv_hyperparams();
  static const int kConvHyperparamsFieldNumber = 5;
  const ::object_detection::protos::Hyperparams& conv_hyperparams() const;
  ::object_detection::protos::Hyperparams* mutable_conv_hyperparams();
  ::object_detection::protos::Hyperparams* release_conv_hyperparams();
  void set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams);

  // optional bool use_dropout = 2 [default = false];
  bool has_use_dropout() const;
  void clear_use_dropout();
  static const int kUseDropoutFieldNumber = 2;
  bool use_dropout() const;
  void set_use_dropout(bool value);

  // optional bool predict_instance_masks = 6 [default = false];
  bool has_predict_instance_masks() const;
  void clear_predict_instance_masks();
  static const int kPredictInstanceMasksFieldNumber = 6;
  bool predict_instance_masks() const;
  void set_predict_instance_masks(bool value);

  // optional bool predict_keypoints = 8 [default = false];
  bool has_predict_keypoints() const;
  void clear_predict_keypoints();
  static const int kPredictKeypointsFieldNumber = 8;
  bool predict_keypoints() const;
  void set_predict_keypoints(bool value);

  // optional bool masks_are_class_agnostic = 12 [default = false];
  bool has_masks_are_class_agnostic() const;
  void clear_masks_are_class_agnostic();
  static const int kMasksAreClassAgnosticFieldNumber = 12;
  bool masks_are_class_agnostic() const;
  void set_masks_are_class_agnostic(bool value);

  // optional bool share_box_across_classes = 13 [default = false];
  bool has_share_box_across_classes() const;
  void clear_share_box_across_classes();
  static const int kShareBoxAcrossClassesFieldNumber = 13;
  bool share_box_across_classes() const;
  void set_share_box_across_classes(bool value);

  // optional bool convolve_then_upsample_masks = 14 [default = false];
  bool has_convolve_then_upsample_masks() const;
  void clear_convolve_then_upsample_masks();
  static const int kConvolveThenUpsampleMasksFieldNumber = 14;
  bool convolve_then_upsample_masks() const;
  void set_convolve_then_upsample_masks(bool value);

  // optional float dropout_keep_probability = 3 [default = 0.5];
  bool has_dropout_keep_probability() const;
  void clear_dropout_keep_probability();
  static const int kDropoutKeepProbabilityFieldNumber = 3;
  float dropout_keep_probability() const;
  void set_dropout_keep_probability(float value);

  // optional int32 box_code_size = 4 [default = 4];
  bool has_box_code_size() const;
  void clear_box_code_size();
  static const int kBoxCodeSizeFieldNumber = 4;
  ::google::protobuf::int32 box_code_size() const;
  void set_box_code_size(::google::protobuf::int32 value);

  // optional int32 mask_prediction_conv_depth = 7 [default = 256];
  bool has_mask_prediction_conv_depth() const;
  void clear_mask_prediction_conv_depth();
  static const int kMaskPredictionConvDepthFieldNumber = 7;
  ::google::protobuf::int32 mask_prediction_conv_depth() const;
  void set_mask_prediction_conv_depth(::google::protobuf::int32 value);

  // optional int32 mask_height = 9 [default = 15];
  bool has_mask_height() const;
  void clear_mask_height();
  static const int kMaskHeightFieldNumber = 9;
  ::google::protobuf::int32 mask_height() const;
  void set_mask_height(::google::protobuf::int32 value);

  // optional int32 mask_width = 10 [default = 15];
  bool has_mask_width() const;
  void clear_mask_width();
  static const int kMaskWidthFieldNumber = 10;
  ::google::protobuf::int32 mask_width() const;
  void set_mask_width(::google::protobuf::int32 value);

  // optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
  bool has_mask_prediction_num_conv_layers() const;
  void clear_mask_prediction_num_conv_layers();
  static const int kMaskPredictionNumConvLayersFieldNumber = 11;
  ::google::protobuf::int32 mask_prediction_num_conv_layers() const;
  void set_mask_prediction_num_conv_layers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.MaskRCNNBoxPredictor)
 private:
  void set_has_fc_hyperparams();
  void clear_has_fc_hyperparams();
  void set_has_use_dropout();
  void clear_has_use_dropout();
  void set_has_dropout_keep_probability();
  void clear_has_dropout_keep_probability();
  void set_has_box_code_size();
  void clear_has_box_code_size();
  void set_has_conv_hyperparams();
  void clear_has_conv_hyperparams();
  void set_has_predict_instance_masks();
  void clear_has_predict_instance_masks();
  void set_has_mask_prediction_conv_depth();
  void clear_has_mask_prediction_conv_depth();
  void set_has_predict_keypoints();
  void clear_has_predict_keypoints();
  void set_has_mask_height();
  void clear_has_mask_height();
  void set_has_mask_width();
  void clear_has_mask_width();
  void set_has_mask_prediction_num_conv_layers();
  void clear_has_mask_prediction_num_conv_layers();
  void set_has_masks_are_class_agnostic();
  void clear_has_masks_are_class_agnostic();
  void set_has_share_box_across_classes();
  void clear_has_share_box_across_classes();
  void set_has_convolve_then_upsample_masks();
  void clear_has_convolve_then_upsample_masks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::object_detection::protos::Hyperparams* fc_hyperparams_;
  ::object_detection::protos::Hyperparams* conv_hyperparams_;
  bool use_dropout_;
  bool predict_instance_masks_;
  bool predict_keypoints_;
  bool masks_are_class_agnostic_;
  bool share_box_across_classes_;
  bool convolve_then_upsample_masks_;
  float dropout_keep_probability_;
  ::google::protobuf::int32 box_code_size_;
  ::google::protobuf::int32 mask_prediction_conv_depth_;
  ::google::protobuf::int32 mask_height_;
  ::google::protobuf::int32 mask_width_;
  ::google::protobuf::int32 mask_prediction_num_conv_layers_;
  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RfcnBoxPredictor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.RfcnBoxPredictor) */ {
 public:
  RfcnBoxPredictor();
  virtual ~RfcnBoxPredictor();

  RfcnBoxPredictor(const RfcnBoxPredictor& from);

  inline RfcnBoxPredictor& operator=(const RfcnBoxPredictor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RfcnBoxPredictor(RfcnBoxPredictor&& from) noexcept
    : RfcnBoxPredictor() {
    *this = ::std::move(from);
  }

  inline RfcnBoxPredictor& operator=(RfcnBoxPredictor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RfcnBoxPredictor& default_instance();

  static inline const RfcnBoxPredictor* internal_default_instance() {
    return reinterpret_cast<const RfcnBoxPredictor*>(
               &_RfcnBoxPredictor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RfcnBoxPredictor* other);
  friend void swap(RfcnBoxPredictor& a, RfcnBoxPredictor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RfcnBoxPredictor* New() const PROTOBUF_FINAL { return New(NULL); }

  RfcnBoxPredictor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RfcnBoxPredictor& from);
  void MergeFrom(const RfcnBoxPredictor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RfcnBoxPredictor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
  bool has_conv_hyperparams() const;
  void clear_conv_hyperparams();
  static const int kConvHyperparamsFieldNumber = 1;
  const ::object_detection::protos::Hyperparams& conv_hyperparams() const;
  ::object_detection::protos::Hyperparams* mutable_conv_hyperparams();
  ::object_detection::protos::Hyperparams* release_conv_hyperparams();
  void set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams);

  // optional int32 num_spatial_bins_height = 2 [default = 3];
  bool has_num_spatial_bins_height() const;
  void clear_num_spatial_bins_height();
  static const int kNumSpatialBinsHeightFieldNumber = 2;
  ::google::protobuf::int32 num_spatial_bins_height() const;
  void set_num_spatial_bins_height(::google::protobuf::int32 value);

  // optional int32 num_spatial_bins_width = 3 [default = 3];
  bool has_num_spatial_bins_width() const;
  void clear_num_spatial_bins_width();
  static const int kNumSpatialBinsWidthFieldNumber = 3;
  ::google::protobuf::int32 num_spatial_bins_width() const;
  void set_num_spatial_bins_width(::google::protobuf::int32 value);

  // optional int32 depth = 4 [default = 1024];
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 4;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional int32 box_code_size = 5 [default = 4];
  bool has_box_code_size() const;
  void clear_box_code_size();
  static const int kBoxCodeSizeFieldNumber = 5;
  ::google::protobuf::int32 box_code_size() const;
  void set_box_code_size(::google::protobuf::int32 value);

  // optional int32 crop_height = 6 [default = 12];
  bool has_crop_height() const;
  void clear_crop_height();
  static const int kCropHeightFieldNumber = 6;
  ::google::protobuf::int32 crop_height() const;
  void set_crop_height(::google::protobuf::int32 value);

  // optional int32 crop_width = 7 [default = 12];
  bool has_crop_width() const;
  void clear_crop_width();
  static const int kCropWidthFieldNumber = 7;
  ::google::protobuf::int32 crop_width() const;
  void set_crop_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.RfcnBoxPredictor)
 private:
  void set_has_conv_hyperparams();
  void clear_has_conv_hyperparams();
  void set_has_num_spatial_bins_height();
  void clear_has_num_spatial_bins_height();
  void set_has_num_spatial_bins_width();
  void clear_has_num_spatial_bins_width();
  void set_has_depth();
  void clear_has_depth();
  void set_has_box_code_size();
  void clear_has_box_code_size();
  void set_has_crop_height();
  void clear_has_crop_height();
  void set_has_crop_width();
  void clear_has_crop_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::object_detection::protos::Hyperparams* conv_hyperparams_;
  ::google::protobuf::int32 num_spatial_bins_height_;
  ::google::protobuf::int32 num_spatial_bins_width_;
  ::google::protobuf::int32 depth_;
  ::google::protobuf::int32 box_code_size_;
  ::google::protobuf::int32 crop_height_;
  ::google::protobuf::int32 crop_width_;
  friend struct protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoxPredictor

// optional .object_detection.protos.ConvolutionalBoxPredictor convolutional_box_predictor = 1;
inline bool BoxPredictor::has_convolutional_box_predictor() const {
  return box_predictor_oneof_case() == kConvolutionalBoxPredictor;
}
inline void BoxPredictor::set_has_convolutional_box_predictor() {
  _oneof_case_[0] = kConvolutionalBoxPredictor;
}
inline void BoxPredictor::clear_convolutional_box_predictor() {
  if (has_convolutional_box_predictor()) {
    delete box_predictor_oneof_.convolutional_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
inline  const ::object_detection::protos::ConvolutionalBoxPredictor& BoxPredictor::convolutional_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.convolutional_box_predictor)
  return has_convolutional_box_predictor()
      ? *box_predictor_oneof_.convolutional_box_predictor_
      : ::object_detection::protos::ConvolutionalBoxPredictor::default_instance();
}
inline ::object_detection::protos::ConvolutionalBoxPredictor* BoxPredictor::mutable_convolutional_box_predictor() {
  if (!has_convolutional_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_convolutional_box_predictor();
    box_predictor_oneof_.convolutional_box_predictor_ = new ::object_detection::protos::ConvolutionalBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.convolutional_box_predictor)
  return box_predictor_oneof_.convolutional_box_predictor_;
}
inline ::object_detection::protos::ConvolutionalBoxPredictor* BoxPredictor::release_convolutional_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.convolutional_box_predictor)
  if (has_convolutional_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::ConvolutionalBoxPredictor* temp = box_predictor_oneof_.convolutional_box_predictor_;
    box_predictor_oneof_.convolutional_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BoxPredictor::set_allocated_convolutional_box_predictor(::object_detection::protos::ConvolutionalBoxPredictor* convolutional_box_predictor) {
  clear_box_predictor_oneof();
  if (convolutional_box_predictor) {
    set_has_convolutional_box_predictor();
    box_predictor_oneof_.convolutional_box_predictor_ = convolutional_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.convolutional_box_predictor)
}

// optional .object_detection.protos.MaskRCNNBoxPredictor mask_rcnn_box_predictor = 2;
inline bool BoxPredictor::has_mask_rcnn_box_predictor() const {
  return box_predictor_oneof_case() == kMaskRcnnBoxPredictor;
}
inline void BoxPredictor::set_has_mask_rcnn_box_predictor() {
  _oneof_case_[0] = kMaskRcnnBoxPredictor;
}
inline void BoxPredictor::clear_mask_rcnn_box_predictor() {
  if (has_mask_rcnn_box_predictor()) {
    delete box_predictor_oneof_.mask_rcnn_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
inline  const ::object_detection::protos::MaskRCNNBoxPredictor& BoxPredictor::mask_rcnn_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
  return has_mask_rcnn_box_predictor()
      ? *box_predictor_oneof_.mask_rcnn_box_predictor_
      : ::object_detection::protos::MaskRCNNBoxPredictor::default_instance();
}
inline ::object_detection::protos::MaskRCNNBoxPredictor* BoxPredictor::mutable_mask_rcnn_box_predictor() {
  if (!has_mask_rcnn_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_mask_rcnn_box_predictor();
    box_predictor_oneof_.mask_rcnn_box_predictor_ = new ::object_detection::protos::MaskRCNNBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
  return box_predictor_oneof_.mask_rcnn_box_predictor_;
}
inline ::object_detection::protos::MaskRCNNBoxPredictor* BoxPredictor::release_mask_rcnn_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
  if (has_mask_rcnn_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::MaskRCNNBoxPredictor* temp = box_predictor_oneof_.mask_rcnn_box_predictor_;
    box_predictor_oneof_.mask_rcnn_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BoxPredictor::set_allocated_mask_rcnn_box_predictor(::object_detection::protos::MaskRCNNBoxPredictor* mask_rcnn_box_predictor) {
  clear_box_predictor_oneof();
  if (mask_rcnn_box_predictor) {
    set_has_mask_rcnn_box_predictor();
    box_predictor_oneof_.mask_rcnn_box_predictor_ = mask_rcnn_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.mask_rcnn_box_predictor)
}

// optional .object_detection.protos.RfcnBoxPredictor rfcn_box_predictor = 3;
inline bool BoxPredictor::has_rfcn_box_predictor() const {
  return box_predictor_oneof_case() == kRfcnBoxPredictor;
}
inline void BoxPredictor::set_has_rfcn_box_predictor() {
  _oneof_case_[0] = kRfcnBoxPredictor;
}
inline void BoxPredictor::clear_rfcn_box_predictor() {
  if (has_rfcn_box_predictor()) {
    delete box_predictor_oneof_.rfcn_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
inline  const ::object_detection::protos::RfcnBoxPredictor& BoxPredictor::rfcn_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.rfcn_box_predictor)
  return has_rfcn_box_predictor()
      ? *box_predictor_oneof_.rfcn_box_predictor_
      : ::object_detection::protos::RfcnBoxPredictor::default_instance();
}
inline ::object_detection::protos::RfcnBoxPredictor* BoxPredictor::mutable_rfcn_box_predictor() {
  if (!has_rfcn_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_rfcn_box_predictor();
    box_predictor_oneof_.rfcn_box_predictor_ = new ::object_detection::protos::RfcnBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.rfcn_box_predictor)
  return box_predictor_oneof_.rfcn_box_predictor_;
}
inline ::object_detection::protos::RfcnBoxPredictor* BoxPredictor::release_rfcn_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.rfcn_box_predictor)
  if (has_rfcn_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::RfcnBoxPredictor* temp = box_predictor_oneof_.rfcn_box_predictor_;
    box_predictor_oneof_.rfcn_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BoxPredictor::set_allocated_rfcn_box_predictor(::object_detection::protos::RfcnBoxPredictor* rfcn_box_predictor) {
  clear_box_predictor_oneof();
  if (rfcn_box_predictor) {
    set_has_rfcn_box_predictor();
    box_predictor_oneof_.rfcn_box_predictor_ = rfcn_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.rfcn_box_predictor)
}

// optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor weight_shared_convolutional_box_predictor = 4;
inline bool BoxPredictor::has_weight_shared_convolutional_box_predictor() const {
  return box_predictor_oneof_case() == kWeightSharedConvolutionalBoxPredictor;
}
inline void BoxPredictor::set_has_weight_shared_convolutional_box_predictor() {
  _oneof_case_[0] = kWeightSharedConvolutionalBoxPredictor;
}
inline void BoxPredictor::clear_weight_shared_convolutional_box_predictor() {
  if (has_weight_shared_convolutional_box_predictor()) {
    delete box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
    clear_has_box_predictor_oneof();
  }
}
inline  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor& BoxPredictor::weight_shared_convolutional_box_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
  return has_weight_shared_convolutional_box_predictor()
      ? *box_predictor_oneof_.weight_shared_convolutional_box_predictor_
      : ::object_detection::protos::WeightSharedConvolutionalBoxPredictor::default_instance();
}
inline ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* BoxPredictor::mutable_weight_shared_convolutional_box_predictor() {
  if (!has_weight_shared_convolutional_box_predictor()) {
    clear_box_predictor_oneof();
    set_has_weight_shared_convolutional_box_predictor();
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = new ::object_detection::protos::WeightSharedConvolutionalBoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
  return box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
}
inline ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* BoxPredictor::release_weight_shared_convolutional_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
  if (has_weight_shared_convolutional_box_predictor()) {
    clear_has_box_predictor_oneof();
    ::object_detection::protos::WeightSharedConvolutionalBoxPredictor* temp = box_predictor_oneof_.weight_shared_convolutional_box_predictor_;
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void BoxPredictor::set_allocated_weight_shared_convolutional_box_predictor(::object_detection::protos::WeightSharedConvolutionalBoxPredictor* weight_shared_convolutional_box_predictor) {
  clear_box_predictor_oneof();
  if (weight_shared_convolutional_box_predictor) {
    set_has_weight_shared_convolutional_box_predictor();
    box_predictor_oneof_.weight_shared_convolutional_box_predictor_ = weight_shared_convolutional_box_predictor;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.BoxPredictor.weight_shared_convolutional_box_predictor)
}

inline bool BoxPredictor::has_box_predictor_oneof() const {
  return box_predictor_oneof_case() != BOX_PREDICTOR_ONEOF_NOT_SET;
}
inline void BoxPredictor::clear_has_box_predictor_oneof() {
  _oneof_case_[0] = BOX_PREDICTOR_ONEOF_NOT_SET;
}
inline BoxPredictor::BoxPredictorOneofCase BoxPredictor::box_predictor_oneof_case() const {
  return BoxPredictor::BoxPredictorOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConvolutionalBoxPredictor_BoxEncodingsClipRange

// optional float min = 1;
inline bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float ConvolutionalBoxPredictor_BoxEncodingsClipRange::min() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
  return min_;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
}

// optional float max = 2;
inline bool ConvolutionalBoxPredictor_BoxEncodingsClipRange::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline float ConvolutionalBoxPredictor_BoxEncodingsClipRange::max() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
  return max_;
}
inline void ConvolutionalBoxPredictor_BoxEncodingsClipRange::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
}

// -------------------------------------------------------------------

// ConvolutionalBoxPredictor

// optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
inline bool ConvolutionalBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionalBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionalBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
inline const ::object_detection::protos::Hyperparams& ConvolutionalBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
inline ::object_detection::protos::Hyperparams* ConvolutionalBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
inline ::object_detection::protos::Hyperparams* ConvolutionalBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
inline void ConvolutionalBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ConvolutionalBoxPredictor.conv_hyperparams)
}

// optional int32 min_depth = 2 [default = 0];
inline bool ConvolutionalBoxPredictor::has_min_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_min_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConvolutionalBoxPredictor::clear_has_min_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConvolutionalBoxPredictor::clear_min_depth() {
  min_depth_ = 0;
  clear_has_min_depth();
}
inline ::google::protobuf::int32 ConvolutionalBoxPredictor::min_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.min_depth)
  return min_depth_;
}
inline void ConvolutionalBoxPredictor::set_min_depth(::google::protobuf::int32 value) {
  set_has_min_depth();
  min_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.min_depth)
}

// optional int32 max_depth = 3 [default = 0];
inline bool ConvolutionalBoxPredictor::has_max_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_max_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConvolutionalBoxPredictor::clear_has_max_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConvolutionalBoxPredictor::clear_max_depth() {
  max_depth_ = 0;
  clear_has_max_depth();
}
inline ::google::protobuf::int32 ConvolutionalBoxPredictor::max_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.max_depth)
  return max_depth_;
}
inline void ConvolutionalBoxPredictor::set_max_depth(::google::protobuf::int32 value) {
  set_has_max_depth();
  max_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.max_depth)
}

// optional int32 num_layers_before_predictor = 4 [default = 0];
inline bool ConvolutionalBoxPredictor::has_num_layers_before_predictor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_num_layers_before_predictor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConvolutionalBoxPredictor::clear_has_num_layers_before_predictor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConvolutionalBoxPredictor::clear_num_layers_before_predictor() {
  num_layers_before_predictor_ = 0;
  clear_has_num_layers_before_predictor();
}
inline ::google::protobuf::int32 ConvolutionalBoxPredictor::num_layers_before_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.num_layers_before_predictor)
  return num_layers_before_predictor_;
}
inline void ConvolutionalBoxPredictor::set_num_layers_before_predictor(::google::protobuf::int32 value) {
  set_has_num_layers_before_predictor();
  num_layers_before_predictor_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.num_layers_before_predictor)
}

// optional bool use_dropout = 5 [default = true];
inline bool ConvolutionalBoxPredictor::has_use_dropout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_use_dropout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionalBoxPredictor::clear_has_use_dropout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionalBoxPredictor::clear_use_dropout() {
  use_dropout_ = true;
  clear_has_use_dropout();
}
inline bool ConvolutionalBoxPredictor::use_dropout() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.use_dropout)
  return use_dropout_;
}
inline void ConvolutionalBoxPredictor::set_use_dropout(bool value) {
  set_has_use_dropout();
  use_dropout_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.use_dropout)
}

// optional float dropout_keep_probability = 6 [default = 0.8];
inline bool ConvolutionalBoxPredictor::has_dropout_keep_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_dropout_keep_probability() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionalBoxPredictor::clear_has_dropout_keep_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionalBoxPredictor::clear_dropout_keep_probability() {
  dropout_keep_probability_ = 0.8f;
  clear_has_dropout_keep_probability();
}
inline float ConvolutionalBoxPredictor::dropout_keep_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.dropout_keep_probability)
  return dropout_keep_probability_;
}
inline void ConvolutionalBoxPredictor::set_dropout_keep_probability(float value) {
  set_has_dropout_keep_probability();
  dropout_keep_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.dropout_keep_probability)
}

// optional int32 kernel_size = 7 [default = 1];
inline bool ConvolutionalBoxPredictor::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionalBoxPredictor::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionalBoxPredictor::clear_kernel_size() {
  kernel_size_ = 1;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 ConvolutionalBoxPredictor::kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.kernel_size)
  return kernel_size_;
}
inline void ConvolutionalBoxPredictor::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.kernel_size)
}

// optional int32 box_code_size = 8 [default = 4];
inline bool ConvolutionalBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionalBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionalBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
inline ::google::protobuf::int32 ConvolutionalBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.box_code_size)
  return box_code_size_;
}
inline void ConvolutionalBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.box_code_size)
}

// optional bool apply_sigmoid_to_scores = 9 [default = false];
inline bool ConvolutionalBoxPredictor::has_apply_sigmoid_to_scores() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_apply_sigmoid_to_scores() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionalBoxPredictor::clear_has_apply_sigmoid_to_scores() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionalBoxPredictor::clear_apply_sigmoid_to_scores() {
  apply_sigmoid_to_scores_ = false;
  clear_has_apply_sigmoid_to_scores();
}
inline bool ConvolutionalBoxPredictor::apply_sigmoid_to_scores() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.apply_sigmoid_to_scores)
  return apply_sigmoid_to_scores_;
}
inline void ConvolutionalBoxPredictor::set_apply_sigmoid_to_scores(bool value) {
  set_has_apply_sigmoid_to_scores();
  apply_sigmoid_to_scores_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.apply_sigmoid_to_scores)
}

// optional float class_prediction_bias_init = 10 [default = 0];
inline bool ConvolutionalBoxPredictor::has_class_prediction_bias_init() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_class_prediction_bias_init() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConvolutionalBoxPredictor::clear_has_class_prediction_bias_init() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConvolutionalBoxPredictor::clear_class_prediction_bias_init() {
  class_prediction_bias_init_ = 0;
  clear_has_class_prediction_bias_init();
}
inline float ConvolutionalBoxPredictor::class_prediction_bias_init() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.class_prediction_bias_init)
  return class_prediction_bias_init_;
}
inline void ConvolutionalBoxPredictor::set_class_prediction_bias_init(float value) {
  set_has_class_prediction_bias_init();
  class_prediction_bias_init_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.class_prediction_bias_init)
}

// optional bool use_depthwise = 11 [default = false];
inline bool ConvolutionalBoxPredictor::has_use_depthwise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_use_depthwise() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionalBoxPredictor::clear_has_use_depthwise() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionalBoxPredictor::clear_use_depthwise() {
  use_depthwise_ = false;
  clear_has_use_depthwise();
}
inline bool ConvolutionalBoxPredictor::use_depthwise() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.use_depthwise)
  return use_depthwise_;
}
inline void ConvolutionalBoxPredictor::set_use_depthwise(bool value) {
  set_has_use_depthwise();
  use_depthwise_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConvolutionalBoxPredictor.use_depthwise)
}

// optional .object_detection.protos.ConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 12;
inline bool ConvolutionalBoxPredictor::has_box_encodings_clip_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionalBoxPredictor::set_has_box_encodings_clip_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionalBoxPredictor::clear_has_box_encodings_clip_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionalBoxPredictor::clear_box_encodings_clip_range() {
  if (box_encodings_clip_range_ != NULL) box_encodings_clip_range_->::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear();
  clear_has_box_encodings_clip_range();
}
inline const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange& ConvolutionalBoxPredictor::box_encodings_clip_range() const {
  const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* p = box_encodings_clip_range_;
  // @@protoc_insertion_point(field_get:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      &::object_detection::protos::_ConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);
}
inline ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* ConvolutionalBoxPredictor::mutable_box_encodings_clip_range() {
  set_has_box_encodings_clip_range();
  if (box_encodings_clip_range_ == NULL) {
    box_encodings_clip_range_ = new ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
  return box_encodings_clip_range_;
}
inline ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* ConvolutionalBoxPredictor::release_box_encodings_clip_range() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
  clear_has_box_encodings_clip_range();
  ::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* temp = box_encodings_clip_range_;
  box_encodings_clip_range_ = NULL;
  return temp;
}
inline void ConvolutionalBoxPredictor::set_allocated_box_encodings_clip_range(::object_detection::protos::ConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range) {
  delete box_encodings_clip_range_;
  box_encodings_clip_range_ = box_encodings_clip_range;
  if (box_encodings_clip_range) {
    set_has_box_encodings_clip_range();
  } else {
    clear_has_box_encodings_clip_range();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ConvolutionalBoxPredictor.box_encodings_clip_range)
}

// -------------------------------------------------------------------

// WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange

// optional float min = 1;
inline bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::min() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
  return min_;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.min)
}

// optional float max = 2;
inline bool WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline float WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::max() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
  return max_;
}
inline void WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange.max)
}

// -------------------------------------------------------------------

// WeightSharedConvolutionalBoxPredictor

// optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
inline bool WeightSharedConvolutionalBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
inline const ::object_detection::protos::Hyperparams& WeightSharedConvolutionalBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
inline ::object_detection::protos::Hyperparams* WeightSharedConvolutionalBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
inline ::object_detection::protos::Hyperparams* WeightSharedConvolutionalBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
inline void WeightSharedConvolutionalBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.WeightSharedConvolutionalBoxPredictor.conv_hyperparams)
}

// optional int32 num_layers_before_predictor = 4 [default = 0];
inline bool WeightSharedConvolutionalBoxPredictor::has_num_layers_before_predictor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_num_layers_before_predictor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_num_layers_before_predictor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_num_layers_before_predictor() {
  num_layers_before_predictor_ = 0;
  clear_has_num_layers_before_predictor();
}
inline ::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::num_layers_before_predictor() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.num_layers_before_predictor)
  return num_layers_before_predictor_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_num_layers_before_predictor(::google::protobuf::int32 value) {
  set_has_num_layers_before_predictor();
  num_layers_before_predictor_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.num_layers_before_predictor)
}

// optional int32 depth = 2 [default = 0];
inline bool WeightSharedConvolutionalBoxPredictor::has_depth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_depth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_depth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.depth)
  return depth_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.depth)
}

// optional int32 kernel_size = 7 [default = 3];
inline bool WeightSharedConvolutionalBoxPredictor::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_kernel_size() {
  kernel_size_ = 3;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.kernel_size)
  return kernel_size_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.kernel_size)
}

// optional int32 box_code_size = 8 [default = 4];
inline bool WeightSharedConvolutionalBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
inline ::google::protobuf::int32 WeightSharedConvolutionalBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_code_size)
  return box_code_size_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_code_size)
}

// optional float class_prediction_bias_init = 10 [default = 0];
inline bool WeightSharedConvolutionalBoxPredictor::has_class_prediction_bias_init() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_class_prediction_bias_init() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_class_prediction_bias_init() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_class_prediction_bias_init() {
  class_prediction_bias_init_ = 0;
  clear_has_class_prediction_bias_init();
}
inline float WeightSharedConvolutionalBoxPredictor::class_prediction_bias_init() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.class_prediction_bias_init)
  return class_prediction_bias_init_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_class_prediction_bias_init(float value) {
  set_has_class_prediction_bias_init();
  class_prediction_bias_init_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.class_prediction_bias_init)
}

// optional bool use_dropout = 11 [default = false];
inline bool WeightSharedConvolutionalBoxPredictor::has_use_dropout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_use_dropout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_use_dropout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_use_dropout() {
  use_dropout_ = false;
  clear_has_use_dropout();
}
inline bool WeightSharedConvolutionalBoxPredictor::use_dropout() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_dropout)
  return use_dropout_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_use_dropout(bool value) {
  set_has_use_dropout();
  use_dropout_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_dropout)
}

// optional float dropout_keep_probability = 12 [default = 0.8];
inline bool WeightSharedConvolutionalBoxPredictor::has_dropout_keep_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_dropout_keep_probability() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_dropout_keep_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_dropout_keep_probability() {
  dropout_keep_probability_ = 0.8f;
  clear_has_dropout_keep_probability();
}
inline float WeightSharedConvolutionalBoxPredictor::dropout_keep_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.dropout_keep_probability)
  return dropout_keep_probability_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_dropout_keep_probability(float value) {
  set_has_dropout_keep_probability();
  dropout_keep_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.dropout_keep_probability)
}

// optional bool share_prediction_tower = 13 [default = false];
inline bool WeightSharedConvolutionalBoxPredictor::has_share_prediction_tower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_share_prediction_tower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_share_prediction_tower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_share_prediction_tower() {
  share_prediction_tower_ = false;
  clear_has_share_prediction_tower();
}
inline bool WeightSharedConvolutionalBoxPredictor::share_prediction_tower() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.share_prediction_tower)
  return share_prediction_tower_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_share_prediction_tower(bool value) {
  set_has_share_prediction_tower();
  share_prediction_tower_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.share_prediction_tower)
}

// optional bool use_depthwise = 14 [default = false];
inline bool WeightSharedConvolutionalBoxPredictor::has_use_depthwise() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_use_depthwise() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_use_depthwise() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_use_depthwise() {
  use_depthwise_ = false;
  clear_has_use_depthwise();
}
inline bool WeightSharedConvolutionalBoxPredictor::use_depthwise() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_depthwise)
  return use_depthwise_;
}
inline void WeightSharedConvolutionalBoxPredictor::set_use_depthwise(bool value) {
  set_has_use_depthwise();
  use_depthwise_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.use_depthwise)
}

// optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.ScoreConverter score_converter = 16 [default = IDENTITY];
inline bool WeightSharedConvolutionalBoxPredictor::has_score_converter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_score_converter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_score_converter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_score_converter() {
  score_converter_ = 0;
  clear_has_score_converter();
}
inline ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter WeightSharedConvolutionalBoxPredictor::score_converter() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.score_converter)
  return static_cast< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter >(score_converter_);
}
inline void WeightSharedConvolutionalBoxPredictor::set_score_converter(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter value) {
  assert(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter_IsValid(value));
  set_has_score_converter();
  score_converter_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightSharedConvolutionalBoxPredictor.score_converter)
}

// optional .object_detection.protos.WeightSharedConvolutionalBoxPredictor.BoxEncodingsClipRange box_encodings_clip_range = 17;
inline bool WeightSharedConvolutionalBoxPredictor::has_box_encodings_clip_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeightSharedConvolutionalBoxPredictor::set_has_box_encodings_clip_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_has_box_encodings_clip_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeightSharedConvolutionalBoxPredictor::clear_box_encodings_clip_range() {
  if (box_encodings_clip_range_ != NULL) box_encodings_clip_range_->::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange::Clear();
  clear_has_box_encodings_clip_range();
}
inline const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange& WeightSharedConvolutionalBoxPredictor::box_encodings_clip_range() const {
  const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* p = box_encodings_clip_range_;
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange*>(
      &::object_detection::protos::_WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange_default_instance_);
}
inline ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* WeightSharedConvolutionalBoxPredictor::mutable_box_encodings_clip_range() {
  set_has_box_encodings_clip_range();
  if (box_encodings_clip_range_ == NULL) {
    box_encodings_clip_range_ = new ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
  return box_encodings_clip_range_;
}
inline ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* WeightSharedConvolutionalBoxPredictor::release_box_encodings_clip_range() {
  // @@protoc_insertion_point(field_release:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
  clear_has_box_encodings_clip_range();
  ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* temp = box_encodings_clip_range_;
  box_encodings_clip_range_ = NULL;
  return temp;
}
inline void WeightSharedConvolutionalBoxPredictor::set_allocated_box_encodings_clip_range(::object_detection::protos::WeightSharedConvolutionalBoxPredictor_BoxEncodingsClipRange* box_encodings_clip_range) {
  delete box_encodings_clip_range_;
  box_encodings_clip_range_ = box_encodings_clip_range;
  if (box_encodings_clip_range) {
    set_has_box_encodings_clip_range();
  } else {
    clear_has_box_encodings_clip_range();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.WeightSharedConvolutionalBoxPredictor.box_encodings_clip_range)
}

// -------------------------------------------------------------------

// MaskRCNNBoxPredictor

// optional .object_detection.protos.Hyperparams fc_hyperparams = 1;
inline bool MaskRCNNBoxPredictor::has_fc_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_fc_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaskRCNNBoxPredictor::clear_has_fc_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaskRCNNBoxPredictor::clear_fc_hyperparams() {
  if (fc_hyperparams_ != NULL) fc_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_fc_hyperparams();
}
inline const ::object_detection::protos::Hyperparams& MaskRCNNBoxPredictor::fc_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = fc_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
inline ::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::mutable_fc_hyperparams() {
  set_has_fc_hyperparams();
  if (fc_hyperparams_ == NULL) {
    fc_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
  return fc_hyperparams_;
}
inline ::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::release_fc_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
  clear_has_fc_hyperparams();
  ::object_detection::protos::Hyperparams* temp = fc_hyperparams_;
  fc_hyperparams_ = NULL;
  return temp;
}
inline void MaskRCNNBoxPredictor::set_allocated_fc_hyperparams(::object_detection::protos::Hyperparams* fc_hyperparams) {
  delete fc_hyperparams_;
  fc_hyperparams_ = fc_hyperparams;
  if (fc_hyperparams) {
    set_has_fc_hyperparams();
  } else {
    clear_has_fc_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.MaskRCNNBoxPredictor.fc_hyperparams)
}

// optional bool use_dropout = 2 [default = false];
inline bool MaskRCNNBoxPredictor::has_use_dropout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_use_dropout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaskRCNNBoxPredictor::clear_has_use_dropout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaskRCNNBoxPredictor::clear_use_dropout() {
  use_dropout_ = false;
  clear_has_use_dropout();
}
inline bool MaskRCNNBoxPredictor::use_dropout() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.use_dropout)
  return use_dropout_;
}
inline void MaskRCNNBoxPredictor::set_use_dropout(bool value) {
  set_has_use_dropout();
  use_dropout_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.use_dropout)
}

// optional float dropout_keep_probability = 3 [default = 0.5];
inline bool MaskRCNNBoxPredictor::has_dropout_keep_probability() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_dropout_keep_probability() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MaskRCNNBoxPredictor::clear_has_dropout_keep_probability() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MaskRCNNBoxPredictor::clear_dropout_keep_probability() {
  dropout_keep_probability_ = 0.5f;
  clear_has_dropout_keep_probability();
}
inline float MaskRCNNBoxPredictor::dropout_keep_probability() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.dropout_keep_probability)
  return dropout_keep_probability_;
}
inline void MaskRCNNBoxPredictor::set_dropout_keep_probability(float value) {
  set_has_dropout_keep_probability();
  dropout_keep_probability_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.dropout_keep_probability)
}

// optional int32 box_code_size = 4 [default = 4];
inline bool MaskRCNNBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MaskRCNNBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MaskRCNNBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
inline ::google::protobuf::int32 MaskRCNNBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.box_code_size)
  return box_code_size_;
}
inline void MaskRCNNBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.box_code_size)
}

// optional .object_detection.protos.Hyperparams conv_hyperparams = 5;
inline bool MaskRCNNBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaskRCNNBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaskRCNNBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
inline const ::object_detection::protos::Hyperparams& MaskRCNNBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
inline ::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
inline ::object_detection::protos::Hyperparams* MaskRCNNBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
inline void MaskRCNNBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.MaskRCNNBoxPredictor.conv_hyperparams)
}

// optional bool predict_instance_masks = 6 [default = false];
inline bool MaskRCNNBoxPredictor::has_predict_instance_masks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_predict_instance_masks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaskRCNNBoxPredictor::clear_has_predict_instance_masks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaskRCNNBoxPredictor::clear_predict_instance_masks() {
  predict_instance_masks_ = false;
  clear_has_predict_instance_masks();
}
inline bool MaskRCNNBoxPredictor::predict_instance_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.predict_instance_masks)
  return predict_instance_masks_;
}
inline void MaskRCNNBoxPredictor::set_predict_instance_masks(bool value) {
  set_has_predict_instance_masks();
  predict_instance_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.predict_instance_masks)
}

// optional int32 mask_prediction_conv_depth = 7 [default = 256];
inline bool MaskRCNNBoxPredictor::has_mask_prediction_conv_depth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_mask_prediction_conv_depth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MaskRCNNBoxPredictor::clear_has_mask_prediction_conv_depth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MaskRCNNBoxPredictor::clear_mask_prediction_conv_depth() {
  mask_prediction_conv_depth_ = 256;
  clear_has_mask_prediction_conv_depth();
}
inline ::google::protobuf::int32 MaskRCNNBoxPredictor::mask_prediction_conv_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_conv_depth)
  return mask_prediction_conv_depth_;
}
inline void MaskRCNNBoxPredictor::set_mask_prediction_conv_depth(::google::protobuf::int32 value) {
  set_has_mask_prediction_conv_depth();
  mask_prediction_conv_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_conv_depth)
}

// optional bool predict_keypoints = 8 [default = false];
inline bool MaskRCNNBoxPredictor::has_predict_keypoints() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_predict_keypoints() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaskRCNNBoxPredictor::clear_has_predict_keypoints() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaskRCNNBoxPredictor::clear_predict_keypoints() {
  predict_keypoints_ = false;
  clear_has_predict_keypoints();
}
inline bool MaskRCNNBoxPredictor::predict_keypoints() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.predict_keypoints)
  return predict_keypoints_;
}
inline void MaskRCNNBoxPredictor::set_predict_keypoints(bool value) {
  set_has_predict_keypoints();
  predict_keypoints_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.predict_keypoints)
}

// optional int32 mask_height = 9 [default = 15];
inline bool MaskRCNNBoxPredictor::has_mask_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_mask_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MaskRCNNBoxPredictor::clear_has_mask_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MaskRCNNBoxPredictor::clear_mask_height() {
  mask_height_ = 15;
  clear_has_mask_height();
}
inline ::google::protobuf::int32 MaskRCNNBoxPredictor::mask_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_height)
  return mask_height_;
}
inline void MaskRCNNBoxPredictor::set_mask_height(::google::protobuf::int32 value) {
  set_has_mask_height();
  mask_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_height)
}

// optional int32 mask_width = 10 [default = 15];
inline bool MaskRCNNBoxPredictor::has_mask_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_mask_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MaskRCNNBoxPredictor::clear_has_mask_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MaskRCNNBoxPredictor::clear_mask_width() {
  mask_width_ = 15;
  clear_has_mask_width();
}
inline ::google::protobuf::int32 MaskRCNNBoxPredictor::mask_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_width)
  return mask_width_;
}
inline void MaskRCNNBoxPredictor::set_mask_width(::google::protobuf::int32 value) {
  set_has_mask_width();
  mask_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_width)
}

// optional int32 mask_prediction_num_conv_layers = 11 [default = 2];
inline bool MaskRCNNBoxPredictor::has_mask_prediction_num_conv_layers() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_mask_prediction_num_conv_layers() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MaskRCNNBoxPredictor::clear_has_mask_prediction_num_conv_layers() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MaskRCNNBoxPredictor::clear_mask_prediction_num_conv_layers() {
  mask_prediction_num_conv_layers_ = 2;
  clear_has_mask_prediction_num_conv_layers();
}
inline ::google::protobuf::int32 MaskRCNNBoxPredictor::mask_prediction_num_conv_layers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_num_conv_layers)
  return mask_prediction_num_conv_layers_;
}
inline void MaskRCNNBoxPredictor::set_mask_prediction_num_conv_layers(::google::protobuf::int32 value) {
  set_has_mask_prediction_num_conv_layers();
  mask_prediction_num_conv_layers_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.mask_prediction_num_conv_layers)
}

// optional bool masks_are_class_agnostic = 12 [default = false];
inline bool MaskRCNNBoxPredictor::has_masks_are_class_agnostic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_masks_are_class_agnostic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaskRCNNBoxPredictor::clear_has_masks_are_class_agnostic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaskRCNNBoxPredictor::clear_masks_are_class_agnostic() {
  masks_are_class_agnostic_ = false;
  clear_has_masks_are_class_agnostic();
}
inline bool MaskRCNNBoxPredictor::masks_are_class_agnostic() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.masks_are_class_agnostic)
  return masks_are_class_agnostic_;
}
inline void MaskRCNNBoxPredictor::set_masks_are_class_agnostic(bool value) {
  set_has_masks_are_class_agnostic();
  masks_are_class_agnostic_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.masks_are_class_agnostic)
}

// optional bool share_box_across_classes = 13 [default = false];
inline bool MaskRCNNBoxPredictor::has_share_box_across_classes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_share_box_across_classes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MaskRCNNBoxPredictor::clear_has_share_box_across_classes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MaskRCNNBoxPredictor::clear_share_box_across_classes() {
  share_box_across_classes_ = false;
  clear_has_share_box_across_classes();
}
inline bool MaskRCNNBoxPredictor::share_box_across_classes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.share_box_across_classes)
  return share_box_across_classes_;
}
inline void MaskRCNNBoxPredictor::set_share_box_across_classes(bool value) {
  set_has_share_box_across_classes();
  share_box_across_classes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.share_box_across_classes)
}

// optional bool convolve_then_upsample_masks = 14 [default = false];
inline bool MaskRCNNBoxPredictor::has_convolve_then_upsample_masks() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MaskRCNNBoxPredictor::set_has_convolve_then_upsample_masks() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MaskRCNNBoxPredictor::clear_has_convolve_then_upsample_masks() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MaskRCNNBoxPredictor::clear_convolve_then_upsample_masks() {
  convolve_then_upsample_masks_ = false;
  clear_has_convolve_then_upsample_masks();
}
inline bool MaskRCNNBoxPredictor::convolve_then_upsample_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.MaskRCNNBoxPredictor.convolve_then_upsample_masks)
  return convolve_then_upsample_masks_;
}
inline void MaskRCNNBoxPredictor::set_convolve_then_upsample_masks(bool value) {
  set_has_convolve_then_upsample_masks();
  convolve_then_upsample_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.MaskRCNNBoxPredictor.convolve_then_upsample_masks)
}

// -------------------------------------------------------------------

// RfcnBoxPredictor

// optional .object_detection.protos.Hyperparams conv_hyperparams = 1;
inline bool RfcnBoxPredictor::has_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RfcnBoxPredictor::set_has_conv_hyperparams() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RfcnBoxPredictor::clear_has_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RfcnBoxPredictor::clear_conv_hyperparams() {
  if (conv_hyperparams_ != NULL) conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_conv_hyperparams();
}
inline const ::object_detection::protos::Hyperparams& RfcnBoxPredictor::conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
inline ::object_detection::protos::Hyperparams* RfcnBoxPredictor::mutable_conv_hyperparams() {
  set_has_conv_hyperparams();
  if (conv_hyperparams_ == NULL) {
    conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
  return conv_hyperparams_;
}
inline ::object_detection::protos::Hyperparams* RfcnBoxPredictor::release_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
  clear_has_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = conv_hyperparams_;
  conv_hyperparams_ = NULL;
  return temp;
}
inline void RfcnBoxPredictor::set_allocated_conv_hyperparams(::object_detection::protos::Hyperparams* conv_hyperparams) {
  delete conv_hyperparams_;
  conv_hyperparams_ = conv_hyperparams;
  if (conv_hyperparams) {
    set_has_conv_hyperparams();
  } else {
    clear_has_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.RfcnBoxPredictor.conv_hyperparams)
}

// optional int32 num_spatial_bins_height = 2 [default = 3];
inline bool RfcnBoxPredictor::has_num_spatial_bins_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RfcnBoxPredictor::set_has_num_spatial_bins_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RfcnBoxPredictor::clear_has_num_spatial_bins_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RfcnBoxPredictor::clear_num_spatial_bins_height() {
  num_spatial_bins_height_ = 3;
  clear_has_num_spatial_bins_height();
}
inline ::google::protobuf::int32 RfcnBoxPredictor::num_spatial_bins_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_height)
  return num_spatial_bins_height_;
}
inline void RfcnBoxPredictor::set_num_spatial_bins_height(::google::protobuf::int32 value) {
  set_has_num_spatial_bins_height();
  num_spatial_bins_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_height)
}

// optional int32 num_spatial_bins_width = 3 [default = 3];
inline bool RfcnBoxPredictor::has_num_spatial_bins_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RfcnBoxPredictor::set_has_num_spatial_bins_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RfcnBoxPredictor::clear_has_num_spatial_bins_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RfcnBoxPredictor::clear_num_spatial_bins_width() {
  num_spatial_bins_width_ = 3;
  clear_has_num_spatial_bins_width();
}
inline ::google::protobuf::int32 RfcnBoxPredictor::num_spatial_bins_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_width)
  return num_spatial_bins_width_;
}
inline void RfcnBoxPredictor::set_num_spatial_bins_width(::google::protobuf::int32 value) {
  set_has_num_spatial_bins_width();
  num_spatial_bins_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.num_spatial_bins_width)
}

// optional int32 depth = 4 [default = 1024];
inline bool RfcnBoxPredictor::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RfcnBoxPredictor::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RfcnBoxPredictor::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RfcnBoxPredictor::clear_depth() {
  depth_ = 1024;
  clear_has_depth();
}
inline ::google::protobuf::int32 RfcnBoxPredictor::depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.depth)
  return depth_;
}
inline void RfcnBoxPredictor::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.depth)
}

// optional int32 box_code_size = 5 [default = 4];
inline bool RfcnBoxPredictor::has_box_code_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RfcnBoxPredictor::set_has_box_code_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RfcnBoxPredictor::clear_has_box_code_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RfcnBoxPredictor::clear_box_code_size() {
  box_code_size_ = 4;
  clear_has_box_code_size();
}
inline ::google::protobuf::int32 RfcnBoxPredictor::box_code_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.box_code_size)
  return box_code_size_;
}
inline void RfcnBoxPredictor::set_box_code_size(::google::protobuf::int32 value) {
  set_has_box_code_size();
  box_code_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.box_code_size)
}

// optional int32 crop_height = 6 [default = 12];
inline bool RfcnBoxPredictor::has_crop_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RfcnBoxPredictor::set_has_crop_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RfcnBoxPredictor::clear_has_crop_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RfcnBoxPredictor::clear_crop_height() {
  crop_height_ = 12;
  clear_has_crop_height();
}
inline ::google::protobuf::int32 RfcnBoxPredictor::crop_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.crop_height)
  return crop_height_;
}
inline void RfcnBoxPredictor::set_crop_height(::google::protobuf::int32 value) {
  set_has_crop_height();
  crop_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.crop_height)
}

// optional int32 crop_width = 7 [default = 12];
inline bool RfcnBoxPredictor::has_crop_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RfcnBoxPredictor::set_has_crop_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RfcnBoxPredictor::clear_has_crop_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RfcnBoxPredictor::clear_crop_width() {
  crop_width_ = 12;
  clear_has_crop_width();
}
inline ::google::protobuf::int32 RfcnBoxPredictor::crop_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RfcnBoxPredictor.crop_width)
  return crop_width_;
}
inline void RfcnBoxPredictor::set_crop_width(::google::protobuf::int32 value) {
  set_has_crop_width();
  crop_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RfcnBoxPredictor.crop_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace object_detection

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter>() {
  return ::object_detection::protos::WeightSharedConvolutionalBoxPredictor_ScoreConverter_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto__INCLUDED
