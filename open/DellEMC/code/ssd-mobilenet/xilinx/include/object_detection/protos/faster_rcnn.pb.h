// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/faster_rcnn.proto

#ifndef PROTOBUF_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto__INCLUDED
#define PROTOBUF_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "object_detection/protos/anchor_generator.pb.h"
#include "object_detection/protos/box_predictor.pb.h"
#include "object_detection/protos/hyperparams.pb.h"
#include "object_detection/protos/image_resizer.pb.h"
#include "object_detection/protos/losses.pb.h"
#include "object_detection/protos/post_processing.pb.h"
// @@protoc_insertion_point(includes)
namespace object_detection {
namespace protos {
class FasterRcnn;
class FasterRcnnDefaultTypeInternal;
extern FasterRcnnDefaultTypeInternal _FasterRcnn_default_instance_;
class FasterRcnnFeatureExtractor;
class FasterRcnnFeatureExtractorDefaultTypeInternal;
extern FasterRcnnFeatureExtractorDefaultTypeInternal _FasterRcnnFeatureExtractor_default_instance_;
}  // namespace protos
}  // namespace object_detection

namespace object_detection {
namespace protos {

namespace protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto

// ===================================================================

class FasterRcnn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.FasterRcnn) */ {
 public:
  FasterRcnn();
  virtual ~FasterRcnn();

  FasterRcnn(const FasterRcnn& from);

  inline FasterRcnn& operator=(const FasterRcnn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FasterRcnn(FasterRcnn&& from) noexcept
    : FasterRcnn() {
    *this = ::std::move(from);
  }

  inline FasterRcnn& operator=(FasterRcnn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FasterRcnn& default_instance();

  static inline const FasterRcnn* internal_default_instance() {
    return reinterpret_cast<const FasterRcnn*>(
               &_FasterRcnn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FasterRcnn* other);
  friend void swap(FasterRcnn& a, FasterRcnn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FasterRcnn* New() const PROTOBUF_FINAL { return New(NULL); }

  FasterRcnn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FasterRcnn& from);
  void MergeFrom(const FasterRcnn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FasterRcnn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .object_detection.protos.ImageResizer image_resizer = 4;
  bool has_image_resizer() const;
  void clear_image_resizer();
  static const int kImageResizerFieldNumber = 4;
  const ::object_detection::protos::ImageResizer& image_resizer() const;
  ::object_detection::protos::ImageResizer* mutable_image_resizer();
  ::object_detection::protos::ImageResizer* release_image_resizer();
  void set_allocated_image_resizer(::object_detection::protos::ImageResizer* image_resizer);

  // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
  bool has_feature_extractor() const;
  void clear_feature_extractor();
  static const int kFeatureExtractorFieldNumber = 5;
  const ::object_detection::protos::FasterRcnnFeatureExtractor& feature_extractor() const;
  ::object_detection::protos::FasterRcnnFeatureExtractor* mutable_feature_extractor();
  ::object_detection::protos::FasterRcnnFeatureExtractor* release_feature_extractor();
  void set_allocated_feature_extractor(::object_detection::protos::FasterRcnnFeatureExtractor* feature_extractor);

  // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
  bool has_first_stage_anchor_generator() const;
  void clear_first_stage_anchor_generator();
  static const int kFirstStageAnchorGeneratorFieldNumber = 6;
  const ::object_detection::protos::AnchorGenerator& first_stage_anchor_generator() const;
  ::object_detection::protos::AnchorGenerator* mutable_first_stage_anchor_generator();
  ::object_detection::protos::AnchorGenerator* release_first_stage_anchor_generator();
  void set_allocated_first_stage_anchor_generator(::object_detection::protos::AnchorGenerator* first_stage_anchor_generator);

  // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
  bool has_first_stage_box_predictor_conv_hyperparams() const;
  void clear_first_stage_box_predictor_conv_hyperparams();
  static const int kFirstStageBoxPredictorConvHyperparamsFieldNumber = 8;
  const ::object_detection::protos::Hyperparams& first_stage_box_predictor_conv_hyperparams() const;
  ::object_detection::protos::Hyperparams* mutable_first_stage_box_predictor_conv_hyperparams();
  ::object_detection::protos::Hyperparams* release_first_stage_box_predictor_conv_hyperparams();
  void set_allocated_first_stage_box_predictor_conv_hyperparams(::object_detection::protos::Hyperparams* first_stage_box_predictor_conv_hyperparams);

  // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
  bool has_second_stage_box_predictor() const;
  void clear_second_stage_box_predictor();
  static const int kSecondStageBoxPredictorFieldNumber = 21;
  const ::object_detection::protos::BoxPredictor& second_stage_box_predictor() const;
  ::object_detection::protos::BoxPredictor* mutable_second_stage_box_predictor();
  ::object_detection::protos::BoxPredictor* release_second_stage_box_predictor();
  void set_allocated_second_stage_box_predictor(::object_detection::protos::BoxPredictor* second_stage_box_predictor);

  // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
  bool has_second_stage_post_processing() const;
  void clear_second_stage_post_processing();
  static const int kSecondStagePostProcessingFieldNumber = 24;
  const ::object_detection::protos::PostProcessing& second_stage_post_processing() const;
  ::object_detection::protos::PostProcessing* mutable_second_stage_post_processing();
  ::object_detection::protos::PostProcessing* release_second_stage_post_processing();
  void set_allocated_second_stage_post_processing(::object_detection::protos::PostProcessing* second_stage_post_processing);

  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
  bool has_hard_example_miner() const;
  void clear_hard_example_miner();
  static const int kHardExampleMinerFieldNumber = 28;
  const ::object_detection::protos::HardExampleMiner& hard_example_miner() const;
  ::object_detection::protos::HardExampleMiner* mutable_hard_example_miner();
  ::object_detection::protos::HardExampleMiner* release_hard_example_miner();
  void set_allocated_hard_example_miner(::object_detection::protos::HardExampleMiner* hard_example_miner);

  // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
  bool has_second_stage_classification_loss() const;
  void clear_second_stage_classification_loss();
  static const int kSecondStageClassificationLossFieldNumber = 29;
  const ::object_detection::protos::ClassificationLoss& second_stage_classification_loss() const;
  ::object_detection::protos::ClassificationLoss* mutable_second_stage_classification_loss();
  ::object_detection::protos::ClassificationLoss* release_second_stage_classification_loss();
  void set_allocated_second_stage_classification_loss(::object_detection::protos::ClassificationLoss* second_stage_classification_loss);

  // optional int32 num_classes = 3;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 3;
  ::google::protobuf::int32 num_classes() const;
  void set_num_classes(::google::protobuf::int32 value);

  // optional float first_stage_nms_score_threshold = 13 [default = 0];
  bool has_first_stage_nms_score_threshold() const;
  void clear_first_stage_nms_score_threshold();
  static const int kFirstStageNmsScoreThresholdFieldNumber = 13;
  float first_stage_nms_score_threshold() const;
  void set_first_stage_nms_score_threshold(float value);

  // optional int32 initial_crop_size = 18;
  bool has_initial_crop_size() const;
  void clear_initial_crop_size();
  static const int kInitialCropSizeFieldNumber = 18;
  ::google::protobuf::int32 initial_crop_size() const;
  void set_initial_crop_size(::google::protobuf::int32 value);

  // optional int32 maxpool_kernel_size = 19;
  bool has_maxpool_kernel_size() const;
  void clear_maxpool_kernel_size();
  static const int kMaxpoolKernelSizeFieldNumber = 19;
  ::google::protobuf::int32 maxpool_kernel_size() const;
  void set_maxpool_kernel_size(::google::protobuf::int32 value);

  // optional int32 maxpool_stride = 20;
  bool has_maxpool_stride() const;
  void clear_maxpool_stride();
  static const int kMaxpoolStrideFieldNumber = 20;
  ::google::protobuf::int32 maxpool_stride() const;
  void set_maxpool_stride(::google::protobuf::int32 value);

  // optional bool inplace_batchnorm_update = 30 [default = false];
  bool has_inplace_batchnorm_update() const;
  void clear_inplace_batchnorm_update();
  static const int kInplaceBatchnormUpdateFieldNumber = 30;
  bool inplace_batchnorm_update() const;
  void set_inplace_batchnorm_update(bool value);

  // optional bool use_matmul_crop_and_resize = 31 [default = false];
  bool has_use_matmul_crop_and_resize() const;
  void clear_use_matmul_crop_and_resize();
  static const int kUseMatmulCropAndResizeFieldNumber = 31;
  bool use_matmul_crop_and_resize() const;
  void set_use_matmul_crop_and_resize(bool value);

  // optional bool clip_anchors_to_image = 32 [default = false];
  bool has_clip_anchors_to_image() const;
  void clear_clip_anchors_to_image();
  static const int kClipAnchorsToImageFieldNumber = 32;
  bool clip_anchors_to_image() const;
  void set_clip_anchors_to_image(bool value);

  // optional bool use_matmul_gather_in_matcher = 33 [default = false];
  bool has_use_matmul_gather_in_matcher() const;
  void clear_use_matmul_gather_in_matcher();
  static const int kUseMatmulGatherInMatcherFieldNumber = 33;
  bool use_matmul_gather_in_matcher() const;
  void set_use_matmul_gather_in_matcher(bool value);

  // optional bool use_static_balanced_label_sampler = 34 [default = false];
  bool has_use_static_balanced_label_sampler() const;
  void clear_use_static_balanced_label_sampler();
  static const int kUseStaticBalancedLabelSamplerFieldNumber = 34;
  bool use_static_balanced_label_sampler() const;
  void set_use_static_balanced_label_sampler(bool value);

  // optional bool use_static_shapes = 35 [default = false];
  bool has_use_static_shapes() const;
  void clear_use_static_shapes();
  static const int kUseStaticShapesFieldNumber = 35;
  bool use_static_shapes() const;
  void set_use_static_shapes(bool value);

  // optional bool use_static_shapes_for_eval = 37 [default = false];
  bool has_use_static_shapes_for_eval() const;
  void clear_use_static_shapes_for_eval();
  static const int kUseStaticShapesForEvalFieldNumber = 37;
  bool use_static_shapes_for_eval() const;
  void set_use_static_shapes_for_eval(bool value);

  // optional int32 number_of_stages = 1 [default = 2];
  bool has_number_of_stages() const;
  void clear_number_of_stages();
  static const int kNumberOfStagesFieldNumber = 1;
  ::google::protobuf::int32 number_of_stages() const;
  void set_number_of_stages(::google::protobuf::int32 value);

  // optional int32 first_stage_atrous_rate = 7 [default = 1];
  bool has_first_stage_atrous_rate() const;
  void clear_first_stage_atrous_rate();
  static const int kFirstStageAtrousRateFieldNumber = 7;
  ::google::protobuf::int32 first_stage_atrous_rate() const;
  void set_first_stage_atrous_rate(::google::protobuf::int32 value);

  // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
  bool has_first_stage_box_predictor_kernel_size() const;
  void clear_first_stage_box_predictor_kernel_size();
  static const int kFirstStageBoxPredictorKernelSizeFieldNumber = 9;
  ::google::protobuf::int32 first_stage_box_predictor_kernel_size() const;
  void set_first_stage_box_predictor_kernel_size(::google::protobuf::int32 value);

  // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
  bool has_first_stage_box_predictor_depth() const;
  void clear_first_stage_box_predictor_depth();
  static const int kFirstStageBoxPredictorDepthFieldNumber = 10;
  ::google::protobuf::int32 first_stage_box_predictor_depth() const;
  void set_first_stage_box_predictor_depth(::google::protobuf::int32 value);

  // optional int32 first_stage_minibatch_size = 11 [default = 256];
  bool has_first_stage_minibatch_size() const;
  void clear_first_stage_minibatch_size();
  static const int kFirstStageMinibatchSizeFieldNumber = 11;
  ::google::protobuf::int32 first_stage_minibatch_size() const;
  void set_first_stage_minibatch_size(::google::protobuf::int32 value);

  // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
  bool has_first_stage_positive_balance_fraction() const;
  void clear_first_stage_positive_balance_fraction();
  static const int kFirstStagePositiveBalanceFractionFieldNumber = 12;
  float first_stage_positive_balance_fraction() const;
  void set_first_stage_positive_balance_fraction(float value);

  // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
  bool has_first_stage_nms_iou_threshold() const;
  void clear_first_stage_nms_iou_threshold();
  static const int kFirstStageNmsIouThresholdFieldNumber = 14;
  float first_stage_nms_iou_threshold() const;
  void set_first_stage_nms_iou_threshold(float value);

  // optional int32 first_stage_max_proposals = 15 [default = 300];
  bool has_first_stage_max_proposals() const;
  void clear_first_stage_max_proposals();
  static const int kFirstStageMaxProposalsFieldNumber = 15;
  ::google::protobuf::int32 first_stage_max_proposals() const;
  void set_first_stage_max_proposals(::google::protobuf::int32 value);

  // optional float first_stage_localization_loss_weight = 16 [default = 1];
  bool has_first_stage_localization_loss_weight() const;
  void clear_first_stage_localization_loss_weight();
  static const int kFirstStageLocalizationLossWeightFieldNumber = 16;
  float first_stage_localization_loss_weight() const;
  void set_first_stage_localization_loss_weight(float value);

  // optional float first_stage_objectness_loss_weight = 17 [default = 1];
  bool has_first_stage_objectness_loss_weight() const;
  void clear_first_stage_objectness_loss_weight();
  static const int kFirstStageObjectnessLossWeightFieldNumber = 17;
  float first_stage_objectness_loss_weight() const;
  void set_first_stage_objectness_loss_weight(float value);

  // optional int32 second_stage_batch_size = 22 [default = 64];
  bool has_second_stage_batch_size() const;
  void clear_second_stage_batch_size();
  static const int kSecondStageBatchSizeFieldNumber = 22;
  ::google::protobuf::int32 second_stage_batch_size() const;
  void set_second_stage_batch_size(::google::protobuf::int32 value);

  // optional float second_stage_balance_fraction = 23 [default = 0.25];
  bool has_second_stage_balance_fraction() const;
  void clear_second_stage_balance_fraction();
  static const int kSecondStageBalanceFractionFieldNumber = 23;
  float second_stage_balance_fraction() const;
  void set_second_stage_balance_fraction(float value);

  // optional float second_stage_localization_loss_weight = 25 [default = 1];
  bool has_second_stage_localization_loss_weight() const;
  void clear_second_stage_localization_loss_weight();
  static const int kSecondStageLocalizationLossWeightFieldNumber = 25;
  float second_stage_localization_loss_weight() const;
  void set_second_stage_localization_loss_weight(float value);

  // optional float second_stage_classification_loss_weight = 26 [default = 1];
  bool has_second_stage_classification_loss_weight() const;
  void clear_second_stage_classification_loss_weight();
  static const int kSecondStageClassificationLossWeightFieldNumber = 26;
  float second_stage_classification_loss_weight() const;
  void set_second_stage_classification_loss_weight(float value);

  // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
  bool has_second_stage_mask_prediction_loss_weight() const;
  void clear_second_stage_mask_prediction_loss_weight();
  static const int kSecondStageMaskPredictionLossWeightFieldNumber = 27;
  float second_stage_mask_prediction_loss_weight() const;
  void set_second_stage_mask_prediction_loss_weight(float value);

  // optional bool resize_masks = 36 [default = true];
  bool has_resize_masks() const;
  void clear_resize_masks();
  static const int kResizeMasksFieldNumber = 36;
  bool resize_masks() const;
  void set_resize_masks(bool value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.FasterRcnn)
 private:
  void set_has_number_of_stages();
  void clear_has_number_of_stages();
  void set_has_num_classes();
  void clear_has_num_classes();
  void set_has_image_resizer();
  void clear_has_image_resizer();
  void set_has_feature_extractor();
  void clear_has_feature_extractor();
  void set_has_first_stage_anchor_generator();
  void clear_has_first_stage_anchor_generator();
  void set_has_first_stage_atrous_rate();
  void clear_has_first_stage_atrous_rate();
  void set_has_first_stage_box_predictor_conv_hyperparams();
  void clear_has_first_stage_box_predictor_conv_hyperparams();
  void set_has_first_stage_box_predictor_kernel_size();
  void clear_has_first_stage_box_predictor_kernel_size();
  void set_has_first_stage_box_predictor_depth();
  void clear_has_first_stage_box_predictor_depth();
  void set_has_first_stage_minibatch_size();
  void clear_has_first_stage_minibatch_size();
  void set_has_first_stage_positive_balance_fraction();
  void clear_has_first_stage_positive_balance_fraction();
  void set_has_first_stage_nms_score_threshold();
  void clear_has_first_stage_nms_score_threshold();
  void set_has_first_stage_nms_iou_threshold();
  void clear_has_first_stage_nms_iou_threshold();
  void set_has_first_stage_max_proposals();
  void clear_has_first_stage_max_proposals();
  void set_has_first_stage_localization_loss_weight();
  void clear_has_first_stage_localization_loss_weight();
  void set_has_first_stage_objectness_loss_weight();
  void clear_has_first_stage_objectness_loss_weight();
  void set_has_initial_crop_size();
  void clear_has_initial_crop_size();
  void set_has_maxpool_kernel_size();
  void clear_has_maxpool_kernel_size();
  void set_has_maxpool_stride();
  void clear_has_maxpool_stride();
  void set_has_second_stage_box_predictor();
  void clear_has_second_stage_box_predictor();
  void set_has_second_stage_batch_size();
  void clear_has_second_stage_batch_size();
  void set_has_second_stage_balance_fraction();
  void clear_has_second_stage_balance_fraction();
  void set_has_second_stage_post_processing();
  void clear_has_second_stage_post_processing();
  void set_has_second_stage_localization_loss_weight();
  void clear_has_second_stage_localization_loss_weight();
  void set_has_second_stage_classification_loss_weight();
  void clear_has_second_stage_classification_loss_weight();
  void set_has_second_stage_mask_prediction_loss_weight();
  void clear_has_second_stage_mask_prediction_loss_weight();
  void set_has_hard_example_miner();
  void clear_has_hard_example_miner();
  void set_has_second_stage_classification_loss();
  void clear_has_second_stage_classification_loss();
  void set_has_inplace_batchnorm_update();
  void clear_has_inplace_batchnorm_update();
  void set_has_use_matmul_crop_and_resize();
  void clear_has_use_matmul_crop_and_resize();
  void set_has_clip_anchors_to_image();
  void clear_has_clip_anchors_to_image();
  void set_has_use_matmul_gather_in_matcher();
  void clear_has_use_matmul_gather_in_matcher();
  void set_has_use_static_balanced_label_sampler();
  void clear_has_use_static_balanced_label_sampler();
  void set_has_use_static_shapes();
  void clear_has_use_static_shapes();
  void set_has_resize_masks();
  void clear_has_resize_masks();
  void set_has_use_static_shapes_for_eval();
  void clear_has_use_static_shapes_for_eval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::object_detection::protos::ImageResizer* image_resizer_;
  ::object_detection::protos::FasterRcnnFeatureExtractor* feature_extractor_;
  ::object_detection::protos::AnchorGenerator* first_stage_anchor_generator_;
  ::object_detection::protos::Hyperparams* first_stage_box_predictor_conv_hyperparams_;
  ::object_detection::protos::BoxPredictor* second_stage_box_predictor_;
  ::object_detection::protos::PostProcessing* second_stage_post_processing_;
  ::object_detection::protos::HardExampleMiner* hard_example_miner_;
  ::object_detection::protos::ClassificationLoss* second_stage_classification_loss_;
  ::google::protobuf::int32 num_classes_;
  float first_stage_nms_score_threshold_;
  ::google::protobuf::int32 initial_crop_size_;
  ::google::protobuf::int32 maxpool_kernel_size_;
  ::google::protobuf::int32 maxpool_stride_;
  bool inplace_batchnorm_update_;
  bool use_matmul_crop_and_resize_;
  bool clip_anchors_to_image_;
  bool use_matmul_gather_in_matcher_;
  bool use_static_balanced_label_sampler_;
  bool use_static_shapes_;
  bool use_static_shapes_for_eval_;
  ::google::protobuf::int32 number_of_stages_;
  ::google::protobuf::int32 first_stage_atrous_rate_;
  ::google::protobuf::int32 first_stage_box_predictor_kernel_size_;
  ::google::protobuf::int32 first_stage_box_predictor_depth_;
  ::google::protobuf::int32 first_stage_minibatch_size_;
  float first_stage_positive_balance_fraction_;
  float first_stage_nms_iou_threshold_;
  ::google::protobuf::int32 first_stage_max_proposals_;
  float first_stage_localization_loss_weight_;
  float first_stage_objectness_loss_weight_;
  ::google::protobuf::int32 second_stage_batch_size_;
  float second_stage_balance_fraction_;
  float second_stage_localization_loss_weight_;
  float second_stage_classification_loss_weight_;
  float second_stage_mask_prediction_loss_weight_;
  bool resize_masks_;
  mutable int _cached_size_;
  friend struct protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FasterRcnnFeatureExtractor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.FasterRcnnFeatureExtractor) */ {
 public:
  FasterRcnnFeatureExtractor();
  virtual ~FasterRcnnFeatureExtractor();

  FasterRcnnFeatureExtractor(const FasterRcnnFeatureExtractor& from);

  inline FasterRcnnFeatureExtractor& operator=(const FasterRcnnFeatureExtractor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FasterRcnnFeatureExtractor(FasterRcnnFeatureExtractor&& from) noexcept
    : FasterRcnnFeatureExtractor() {
    *this = ::std::move(from);
  }

  inline FasterRcnnFeatureExtractor& operator=(FasterRcnnFeatureExtractor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FasterRcnnFeatureExtractor& default_instance();

  static inline const FasterRcnnFeatureExtractor* internal_default_instance() {
    return reinterpret_cast<const FasterRcnnFeatureExtractor*>(
               &_FasterRcnnFeatureExtractor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FasterRcnnFeatureExtractor* other);
  friend void swap(FasterRcnnFeatureExtractor& a, FasterRcnnFeatureExtractor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FasterRcnnFeatureExtractor* New() const PROTOBUF_FINAL { return New(NULL); }

  FasterRcnnFeatureExtractor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FasterRcnnFeatureExtractor& from);
  void MergeFrom(const FasterRcnnFeatureExtractor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FasterRcnnFeatureExtractor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional bool batch_norm_trainable = 3 [default = false];
  bool has_batch_norm_trainable() const;
  void clear_batch_norm_trainable();
  static const int kBatchNormTrainableFieldNumber = 3;
  bool batch_norm_trainable() const;
  void set_batch_norm_trainable(bool value);

  // optional int32 first_stage_features_stride = 2 [default = 16];
  bool has_first_stage_features_stride() const;
  void clear_first_stage_features_stride();
  static const int kFirstStageFeaturesStrideFieldNumber = 2;
  ::google::protobuf::int32 first_stage_features_stride() const;
  void set_first_stage_features_stride(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.FasterRcnnFeatureExtractor)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_first_stage_features_stride();
  void clear_has_first_stage_features_stride();
  void set_has_batch_norm_trainable();
  void clear_has_batch_norm_trainable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  bool batch_norm_trainable_;
  ::google::protobuf::int32 first_stage_features_stride_;
  friend struct protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FasterRcnn

// optional int32 number_of_stages = 1 [default = 2];
inline bool FasterRcnn::has_number_of_stages() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FasterRcnn::set_has_number_of_stages() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FasterRcnn::clear_has_number_of_stages() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FasterRcnn::clear_number_of_stages() {
  number_of_stages_ = 2;
  clear_has_number_of_stages();
}
inline ::google::protobuf::int32 FasterRcnn::number_of_stages() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.number_of_stages)
  return number_of_stages_;
}
inline void FasterRcnn::set_number_of_stages(::google::protobuf::int32 value) {
  set_has_number_of_stages();
  number_of_stages_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.number_of_stages)
}

// optional int32 num_classes = 3;
inline bool FasterRcnn::has_num_classes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FasterRcnn::set_has_num_classes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FasterRcnn::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FasterRcnn::clear_num_classes() {
  num_classes_ = 0;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 FasterRcnn::num_classes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.num_classes)
  return num_classes_;
}
inline void FasterRcnn::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.num_classes)
}

// optional .object_detection.protos.ImageResizer image_resizer = 4;
inline bool FasterRcnn::has_image_resizer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FasterRcnn::set_has_image_resizer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FasterRcnn::clear_has_image_resizer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FasterRcnn::clear_image_resizer() {
  if (image_resizer_ != NULL) image_resizer_->::object_detection::protos::ImageResizer::Clear();
  clear_has_image_resizer();
}
inline const ::object_detection::protos::ImageResizer& FasterRcnn::image_resizer() const {
  const ::object_detection::protos::ImageResizer* p = image_resizer_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.image_resizer)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ImageResizer*>(
      &::object_detection::protos::_ImageResizer_default_instance_);
}
inline ::object_detection::protos::ImageResizer* FasterRcnn::mutable_image_resizer() {
  set_has_image_resizer();
  if (image_resizer_ == NULL) {
    image_resizer_ = new ::object_detection::protos::ImageResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.image_resizer)
  return image_resizer_;
}
inline ::object_detection::protos::ImageResizer* FasterRcnn::release_image_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.image_resizer)
  clear_has_image_resizer();
  ::object_detection::protos::ImageResizer* temp = image_resizer_;
  image_resizer_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_image_resizer(::object_detection::protos::ImageResizer* image_resizer) {
  delete image_resizer_;
  image_resizer_ = image_resizer;
  if (image_resizer) {
    set_has_image_resizer();
  } else {
    clear_has_image_resizer();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.image_resizer)
}

// optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
inline bool FasterRcnn::has_feature_extractor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FasterRcnn::set_has_feature_extractor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FasterRcnn::clear_has_feature_extractor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FasterRcnn::clear_feature_extractor() {
  if (feature_extractor_ != NULL) feature_extractor_->::object_detection::protos::FasterRcnnFeatureExtractor::Clear();
  clear_has_feature_extractor();
}
inline const ::object_detection::protos::FasterRcnnFeatureExtractor& FasterRcnn::feature_extractor() const {
  const ::object_detection::protos::FasterRcnnFeatureExtractor* p = feature_extractor_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.feature_extractor)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::FasterRcnnFeatureExtractor*>(
      &::object_detection::protos::_FasterRcnnFeatureExtractor_default_instance_);
}
inline ::object_detection::protos::FasterRcnnFeatureExtractor* FasterRcnn::mutable_feature_extractor() {
  set_has_feature_extractor();
  if (feature_extractor_ == NULL) {
    feature_extractor_ = new ::object_detection::protos::FasterRcnnFeatureExtractor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.feature_extractor)
  return feature_extractor_;
}
inline ::object_detection::protos::FasterRcnnFeatureExtractor* FasterRcnn::release_feature_extractor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.feature_extractor)
  clear_has_feature_extractor();
  ::object_detection::protos::FasterRcnnFeatureExtractor* temp = feature_extractor_;
  feature_extractor_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_feature_extractor(::object_detection::protos::FasterRcnnFeatureExtractor* feature_extractor) {
  delete feature_extractor_;
  feature_extractor_ = feature_extractor;
  if (feature_extractor) {
    set_has_feature_extractor();
  } else {
    clear_has_feature_extractor();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.feature_extractor)
}

// optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
inline bool FasterRcnn::has_first_stage_anchor_generator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FasterRcnn::set_has_first_stage_anchor_generator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FasterRcnn::clear_has_first_stage_anchor_generator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FasterRcnn::clear_first_stage_anchor_generator() {
  if (first_stage_anchor_generator_ != NULL) first_stage_anchor_generator_->::object_detection::protos::AnchorGenerator::Clear();
  clear_has_first_stage_anchor_generator();
}
inline const ::object_detection::protos::AnchorGenerator& FasterRcnn::first_stage_anchor_generator() const {
  const ::object_detection::protos::AnchorGenerator* p = first_stage_anchor_generator_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::AnchorGenerator*>(
      &::object_detection::protos::_AnchorGenerator_default_instance_);
}
inline ::object_detection::protos::AnchorGenerator* FasterRcnn::mutable_first_stage_anchor_generator() {
  set_has_first_stage_anchor_generator();
  if (first_stage_anchor_generator_ == NULL) {
    first_stage_anchor_generator_ = new ::object_detection::protos::AnchorGenerator;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
  return first_stage_anchor_generator_;
}
inline ::object_detection::protos::AnchorGenerator* FasterRcnn::release_first_stage_anchor_generator() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
  clear_has_first_stage_anchor_generator();
  ::object_detection::protos::AnchorGenerator* temp = first_stage_anchor_generator_;
  first_stage_anchor_generator_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_first_stage_anchor_generator(::object_detection::protos::AnchorGenerator* first_stage_anchor_generator) {
  delete first_stage_anchor_generator_;
  first_stage_anchor_generator_ = first_stage_anchor_generator;
  if (first_stage_anchor_generator) {
    set_has_first_stage_anchor_generator();
  } else {
    clear_has_first_stage_anchor_generator();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
}

// optional int32 first_stage_atrous_rate = 7 [default = 1];
inline bool FasterRcnn::has_first_stage_atrous_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_atrous_rate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FasterRcnn::clear_has_first_stage_atrous_rate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FasterRcnn::clear_first_stage_atrous_rate() {
  first_stage_atrous_rate_ = 1;
  clear_has_first_stage_atrous_rate();
}
inline ::google::protobuf::int32 FasterRcnn::first_stage_atrous_rate() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_atrous_rate)
  return first_stage_atrous_rate_;
}
inline void FasterRcnn::set_first_stage_atrous_rate(::google::protobuf::int32 value) {
  set_has_first_stage_atrous_rate();
  first_stage_atrous_rate_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_atrous_rate)
}

// optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
inline bool FasterRcnn::has_first_stage_box_predictor_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FasterRcnn::set_has_first_stage_box_predictor_conv_hyperparams() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FasterRcnn::clear_has_first_stage_box_predictor_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FasterRcnn::clear_first_stage_box_predictor_conv_hyperparams() {
  if (first_stage_box_predictor_conv_hyperparams_ != NULL) first_stage_box_predictor_conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_first_stage_box_predictor_conv_hyperparams();
}
inline const ::object_detection::protos::Hyperparams& FasterRcnn::first_stage_box_predictor_conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = first_stage_box_predictor_conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
inline ::object_detection::protos::Hyperparams* FasterRcnn::mutable_first_stage_box_predictor_conv_hyperparams() {
  set_has_first_stage_box_predictor_conv_hyperparams();
  if (first_stage_box_predictor_conv_hyperparams_ == NULL) {
    first_stage_box_predictor_conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
  return first_stage_box_predictor_conv_hyperparams_;
}
inline ::object_detection::protos::Hyperparams* FasterRcnn::release_first_stage_box_predictor_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
  clear_has_first_stage_box_predictor_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = first_stage_box_predictor_conv_hyperparams_;
  first_stage_box_predictor_conv_hyperparams_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_first_stage_box_predictor_conv_hyperparams(::object_detection::protos::Hyperparams* first_stage_box_predictor_conv_hyperparams) {
  delete first_stage_box_predictor_conv_hyperparams_;
  first_stage_box_predictor_conv_hyperparams_ = first_stage_box_predictor_conv_hyperparams;
  if (first_stage_box_predictor_conv_hyperparams) {
    set_has_first_stage_box_predictor_conv_hyperparams();
  } else {
    clear_has_first_stage_box_predictor_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
}

// optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
inline bool FasterRcnn::has_first_stage_box_predictor_kernel_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_box_predictor_kernel_size() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FasterRcnn::clear_has_first_stage_box_predictor_kernel_size() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FasterRcnn::clear_first_stage_box_predictor_kernel_size() {
  first_stage_box_predictor_kernel_size_ = 3;
  clear_has_first_stage_box_predictor_kernel_size();
}
inline ::google::protobuf::int32 FasterRcnn::first_stage_box_predictor_kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_box_predictor_kernel_size)
  return first_stage_box_predictor_kernel_size_;
}
inline void FasterRcnn::set_first_stage_box_predictor_kernel_size(::google::protobuf::int32 value) {
  set_has_first_stage_box_predictor_kernel_size();
  first_stage_box_predictor_kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_box_predictor_kernel_size)
}

// optional int32 first_stage_box_predictor_depth = 10 [default = 512];
inline bool FasterRcnn::has_first_stage_box_predictor_depth() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_box_predictor_depth() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FasterRcnn::clear_has_first_stage_box_predictor_depth() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FasterRcnn::clear_first_stage_box_predictor_depth() {
  first_stage_box_predictor_depth_ = 512;
  clear_has_first_stage_box_predictor_depth();
}
inline ::google::protobuf::int32 FasterRcnn::first_stage_box_predictor_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_box_predictor_depth)
  return first_stage_box_predictor_depth_;
}
inline void FasterRcnn::set_first_stage_box_predictor_depth(::google::protobuf::int32 value) {
  set_has_first_stage_box_predictor_depth();
  first_stage_box_predictor_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_box_predictor_depth)
}

// optional int32 first_stage_minibatch_size = 11 [default = 256];
inline bool FasterRcnn::has_first_stage_minibatch_size() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_minibatch_size() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FasterRcnn::clear_has_first_stage_minibatch_size() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FasterRcnn::clear_first_stage_minibatch_size() {
  first_stage_minibatch_size_ = 256;
  clear_has_first_stage_minibatch_size();
}
inline ::google::protobuf::int32 FasterRcnn::first_stage_minibatch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_minibatch_size)
  return first_stage_minibatch_size_;
}
inline void FasterRcnn::set_first_stage_minibatch_size(::google::protobuf::int32 value) {
  set_has_first_stage_minibatch_size();
  first_stage_minibatch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_minibatch_size)
}

// optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
inline bool FasterRcnn::has_first_stage_positive_balance_fraction() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_positive_balance_fraction() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FasterRcnn::clear_has_first_stage_positive_balance_fraction() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FasterRcnn::clear_first_stage_positive_balance_fraction() {
  first_stage_positive_balance_fraction_ = 0.5f;
  clear_has_first_stage_positive_balance_fraction();
}
inline float FasterRcnn::first_stage_positive_balance_fraction() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_positive_balance_fraction)
  return first_stage_positive_balance_fraction_;
}
inline void FasterRcnn::set_first_stage_positive_balance_fraction(float value) {
  set_has_first_stage_positive_balance_fraction();
  first_stage_positive_balance_fraction_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_positive_balance_fraction)
}

// optional float first_stage_nms_score_threshold = 13 [default = 0];
inline bool FasterRcnn::has_first_stage_nms_score_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FasterRcnn::set_has_first_stage_nms_score_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FasterRcnn::clear_has_first_stage_nms_score_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FasterRcnn::clear_first_stage_nms_score_threshold() {
  first_stage_nms_score_threshold_ = 0;
  clear_has_first_stage_nms_score_threshold();
}
inline float FasterRcnn::first_stage_nms_score_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_nms_score_threshold)
  return first_stage_nms_score_threshold_;
}
inline void FasterRcnn::set_first_stage_nms_score_threshold(float value) {
  set_has_first_stage_nms_score_threshold();
  first_stage_nms_score_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_nms_score_threshold)
}

// optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
inline bool FasterRcnn::has_first_stage_nms_iou_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_nms_iou_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FasterRcnn::clear_has_first_stage_nms_iou_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FasterRcnn::clear_first_stage_nms_iou_threshold() {
  first_stage_nms_iou_threshold_ = 0.7f;
  clear_has_first_stage_nms_iou_threshold();
}
inline float FasterRcnn::first_stage_nms_iou_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_nms_iou_threshold)
  return first_stage_nms_iou_threshold_;
}
inline void FasterRcnn::set_first_stage_nms_iou_threshold(float value) {
  set_has_first_stage_nms_iou_threshold();
  first_stage_nms_iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_nms_iou_threshold)
}

// optional int32 first_stage_max_proposals = 15 [default = 300];
inline bool FasterRcnn::has_first_stage_max_proposals() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_max_proposals() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FasterRcnn::clear_has_first_stage_max_proposals() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FasterRcnn::clear_first_stage_max_proposals() {
  first_stage_max_proposals_ = 300;
  clear_has_first_stage_max_proposals();
}
inline ::google::protobuf::int32 FasterRcnn::first_stage_max_proposals() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_max_proposals)
  return first_stage_max_proposals_;
}
inline void FasterRcnn::set_first_stage_max_proposals(::google::protobuf::int32 value) {
  set_has_first_stage_max_proposals();
  first_stage_max_proposals_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_max_proposals)
}

// optional float first_stage_localization_loss_weight = 16 [default = 1];
inline bool FasterRcnn::has_first_stage_localization_loss_weight() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_localization_loss_weight() {
  _has_bits_[0] |= 0x10000000u;
}
inline void FasterRcnn::clear_has_first_stage_localization_loss_weight() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void FasterRcnn::clear_first_stage_localization_loss_weight() {
  first_stage_localization_loss_weight_ = 1;
  clear_has_first_stage_localization_loss_weight();
}
inline float FasterRcnn::first_stage_localization_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_localization_loss_weight)
  return first_stage_localization_loss_weight_;
}
inline void FasterRcnn::set_first_stage_localization_loss_weight(float value) {
  set_has_first_stage_localization_loss_weight();
  first_stage_localization_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_localization_loss_weight)
}

// optional float first_stage_objectness_loss_weight = 17 [default = 1];
inline bool FasterRcnn::has_first_stage_objectness_loss_weight() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void FasterRcnn::set_has_first_stage_objectness_loss_weight() {
  _has_bits_[0] |= 0x20000000u;
}
inline void FasterRcnn::clear_has_first_stage_objectness_loss_weight() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void FasterRcnn::clear_first_stage_objectness_loss_weight() {
  first_stage_objectness_loss_weight_ = 1;
  clear_has_first_stage_objectness_loss_weight();
}
inline float FasterRcnn::first_stage_objectness_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_objectness_loss_weight)
  return first_stage_objectness_loss_weight_;
}
inline void FasterRcnn::set_first_stage_objectness_loss_weight(float value) {
  set_has_first_stage_objectness_loss_weight();
  first_stage_objectness_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_objectness_loss_weight)
}

// optional int32 initial_crop_size = 18;
inline bool FasterRcnn::has_initial_crop_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FasterRcnn::set_has_initial_crop_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FasterRcnn::clear_has_initial_crop_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FasterRcnn::clear_initial_crop_size() {
  initial_crop_size_ = 0;
  clear_has_initial_crop_size();
}
inline ::google::protobuf::int32 FasterRcnn::initial_crop_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.initial_crop_size)
  return initial_crop_size_;
}
inline void FasterRcnn::set_initial_crop_size(::google::protobuf::int32 value) {
  set_has_initial_crop_size();
  initial_crop_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.initial_crop_size)
}

// optional int32 maxpool_kernel_size = 19;
inline bool FasterRcnn::has_maxpool_kernel_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FasterRcnn::set_has_maxpool_kernel_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FasterRcnn::clear_has_maxpool_kernel_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FasterRcnn::clear_maxpool_kernel_size() {
  maxpool_kernel_size_ = 0;
  clear_has_maxpool_kernel_size();
}
inline ::google::protobuf::int32 FasterRcnn::maxpool_kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.maxpool_kernel_size)
  return maxpool_kernel_size_;
}
inline void FasterRcnn::set_maxpool_kernel_size(::google::protobuf::int32 value) {
  set_has_maxpool_kernel_size();
  maxpool_kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.maxpool_kernel_size)
}

// optional int32 maxpool_stride = 20;
inline bool FasterRcnn::has_maxpool_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FasterRcnn::set_has_maxpool_stride() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FasterRcnn::clear_has_maxpool_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FasterRcnn::clear_maxpool_stride() {
  maxpool_stride_ = 0;
  clear_has_maxpool_stride();
}
inline ::google::protobuf::int32 FasterRcnn::maxpool_stride() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.maxpool_stride)
  return maxpool_stride_;
}
inline void FasterRcnn::set_maxpool_stride(::google::protobuf::int32 value) {
  set_has_maxpool_stride();
  maxpool_stride_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.maxpool_stride)
}

// optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
inline bool FasterRcnn::has_second_stage_box_predictor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FasterRcnn::set_has_second_stage_box_predictor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FasterRcnn::clear_has_second_stage_box_predictor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FasterRcnn::clear_second_stage_box_predictor() {
  if (second_stage_box_predictor_ != NULL) second_stage_box_predictor_->::object_detection::protos::BoxPredictor::Clear();
  clear_has_second_stage_box_predictor();
}
inline const ::object_detection::protos::BoxPredictor& FasterRcnn::second_stage_box_predictor() const {
  const ::object_detection::protos::BoxPredictor* p = second_stage_box_predictor_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_box_predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::BoxPredictor*>(
      &::object_detection::protos::_BoxPredictor_default_instance_);
}
inline ::object_detection::protos::BoxPredictor* FasterRcnn::mutable_second_stage_box_predictor() {
  set_has_second_stage_box_predictor();
  if (second_stage_box_predictor_ == NULL) {
    second_stage_box_predictor_ = new ::object_detection::protos::BoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.second_stage_box_predictor)
  return second_stage_box_predictor_;
}
inline ::object_detection::protos::BoxPredictor* FasterRcnn::release_second_stage_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.second_stage_box_predictor)
  clear_has_second_stage_box_predictor();
  ::object_detection::protos::BoxPredictor* temp = second_stage_box_predictor_;
  second_stage_box_predictor_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_second_stage_box_predictor(::object_detection::protos::BoxPredictor* second_stage_box_predictor) {
  delete second_stage_box_predictor_;
  second_stage_box_predictor_ = second_stage_box_predictor;
  if (second_stage_box_predictor) {
    set_has_second_stage_box_predictor();
  } else {
    clear_has_second_stage_box_predictor();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.second_stage_box_predictor)
}

// optional int32 second_stage_batch_size = 22 [default = 64];
inline bool FasterRcnn::has_second_stage_batch_size() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void FasterRcnn::set_has_second_stage_batch_size() {
  _has_bits_[0] |= 0x40000000u;
}
inline void FasterRcnn::clear_has_second_stage_batch_size() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void FasterRcnn::clear_second_stage_batch_size() {
  second_stage_batch_size_ = 64;
  clear_has_second_stage_batch_size();
}
inline ::google::protobuf::int32 FasterRcnn::second_stage_batch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_batch_size)
  return second_stage_batch_size_;
}
inline void FasterRcnn::set_second_stage_batch_size(::google::protobuf::int32 value) {
  set_has_second_stage_batch_size();
  second_stage_batch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_batch_size)
}

// optional float second_stage_balance_fraction = 23 [default = 0.25];
inline bool FasterRcnn::has_second_stage_balance_fraction() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void FasterRcnn::set_has_second_stage_balance_fraction() {
  _has_bits_[0] |= 0x80000000u;
}
inline void FasterRcnn::clear_has_second_stage_balance_fraction() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void FasterRcnn::clear_second_stage_balance_fraction() {
  second_stage_balance_fraction_ = 0.25f;
  clear_has_second_stage_balance_fraction();
}
inline float FasterRcnn::second_stage_balance_fraction() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_balance_fraction)
  return second_stage_balance_fraction_;
}
inline void FasterRcnn::set_second_stage_balance_fraction(float value) {
  set_has_second_stage_balance_fraction();
  second_stage_balance_fraction_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_balance_fraction)
}

// optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
inline bool FasterRcnn::has_second_stage_post_processing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FasterRcnn::set_has_second_stage_post_processing() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FasterRcnn::clear_has_second_stage_post_processing() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FasterRcnn::clear_second_stage_post_processing() {
  if (second_stage_post_processing_ != NULL) second_stage_post_processing_->::object_detection::protos::PostProcessing::Clear();
  clear_has_second_stage_post_processing();
}
inline const ::object_detection::protos::PostProcessing& FasterRcnn::second_stage_post_processing() const {
  const ::object_detection::protos::PostProcessing* p = second_stage_post_processing_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_post_processing)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::PostProcessing*>(
      &::object_detection::protos::_PostProcessing_default_instance_);
}
inline ::object_detection::protos::PostProcessing* FasterRcnn::mutable_second_stage_post_processing() {
  set_has_second_stage_post_processing();
  if (second_stage_post_processing_ == NULL) {
    second_stage_post_processing_ = new ::object_detection::protos::PostProcessing;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.second_stage_post_processing)
  return second_stage_post_processing_;
}
inline ::object_detection::protos::PostProcessing* FasterRcnn::release_second_stage_post_processing() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.second_stage_post_processing)
  clear_has_second_stage_post_processing();
  ::object_detection::protos::PostProcessing* temp = second_stage_post_processing_;
  second_stage_post_processing_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_second_stage_post_processing(::object_detection::protos::PostProcessing* second_stage_post_processing) {
  delete second_stage_post_processing_;
  second_stage_post_processing_ = second_stage_post_processing;
  if (second_stage_post_processing) {
    set_has_second_stage_post_processing();
  } else {
    clear_has_second_stage_post_processing();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.second_stage_post_processing)
}

// optional float second_stage_localization_loss_weight = 25 [default = 1];
inline bool FasterRcnn::has_second_stage_localization_loss_weight() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void FasterRcnn::set_has_second_stage_localization_loss_weight() {
  _has_bits_[1] |= 0x00000001u;
}
inline void FasterRcnn::clear_has_second_stage_localization_loss_weight() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void FasterRcnn::clear_second_stage_localization_loss_weight() {
  second_stage_localization_loss_weight_ = 1;
  clear_has_second_stage_localization_loss_weight();
}
inline float FasterRcnn::second_stage_localization_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_localization_loss_weight)
  return second_stage_localization_loss_weight_;
}
inline void FasterRcnn::set_second_stage_localization_loss_weight(float value) {
  set_has_second_stage_localization_loss_weight();
  second_stage_localization_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_localization_loss_weight)
}

// optional float second_stage_classification_loss_weight = 26 [default = 1];
inline bool FasterRcnn::has_second_stage_classification_loss_weight() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void FasterRcnn::set_has_second_stage_classification_loss_weight() {
  _has_bits_[1] |= 0x00000002u;
}
inline void FasterRcnn::clear_has_second_stage_classification_loss_weight() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void FasterRcnn::clear_second_stage_classification_loss_weight() {
  second_stage_classification_loss_weight_ = 1;
  clear_has_second_stage_classification_loss_weight();
}
inline float FasterRcnn::second_stage_classification_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_classification_loss_weight)
  return second_stage_classification_loss_weight_;
}
inline void FasterRcnn::set_second_stage_classification_loss_weight(float value) {
  set_has_second_stage_classification_loss_weight();
  second_stage_classification_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_classification_loss_weight)
}

// optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
inline bool FasterRcnn::has_second_stage_mask_prediction_loss_weight() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void FasterRcnn::set_has_second_stage_mask_prediction_loss_weight() {
  _has_bits_[1] |= 0x00000004u;
}
inline void FasterRcnn::clear_has_second_stage_mask_prediction_loss_weight() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void FasterRcnn::clear_second_stage_mask_prediction_loss_weight() {
  second_stage_mask_prediction_loss_weight_ = 1;
  clear_has_second_stage_mask_prediction_loss_weight();
}
inline float FasterRcnn::second_stage_mask_prediction_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_mask_prediction_loss_weight)
  return second_stage_mask_prediction_loss_weight_;
}
inline void FasterRcnn::set_second_stage_mask_prediction_loss_weight(float value) {
  set_has_second_stage_mask_prediction_loss_weight();
  second_stage_mask_prediction_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_mask_prediction_loss_weight)
}

// optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
inline bool FasterRcnn::has_hard_example_miner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FasterRcnn::set_has_hard_example_miner() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FasterRcnn::clear_has_hard_example_miner() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FasterRcnn::clear_hard_example_miner() {
  if (hard_example_miner_ != NULL) hard_example_miner_->::object_detection::protos::HardExampleMiner::Clear();
  clear_has_hard_example_miner();
}
inline const ::object_detection::protos::HardExampleMiner& FasterRcnn::hard_example_miner() const {
  const ::object_detection::protos::HardExampleMiner* p = hard_example_miner_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.hard_example_miner)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::HardExampleMiner*>(
      &::object_detection::protos::_HardExampleMiner_default_instance_);
}
inline ::object_detection::protos::HardExampleMiner* FasterRcnn::mutable_hard_example_miner() {
  set_has_hard_example_miner();
  if (hard_example_miner_ == NULL) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.hard_example_miner)
  return hard_example_miner_;
}
inline ::object_detection::protos::HardExampleMiner* FasterRcnn::release_hard_example_miner() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.hard_example_miner)
  clear_has_hard_example_miner();
  ::object_detection::protos::HardExampleMiner* temp = hard_example_miner_;
  hard_example_miner_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_hard_example_miner(::object_detection::protos::HardExampleMiner* hard_example_miner) {
  delete hard_example_miner_;
  hard_example_miner_ = hard_example_miner;
  if (hard_example_miner) {
    set_has_hard_example_miner();
  } else {
    clear_has_hard_example_miner();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.hard_example_miner)
}

// optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
inline bool FasterRcnn::has_second_stage_classification_loss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FasterRcnn::set_has_second_stage_classification_loss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FasterRcnn::clear_has_second_stage_classification_loss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FasterRcnn::clear_second_stage_classification_loss() {
  if (second_stage_classification_loss_ != NULL) second_stage_classification_loss_->::object_detection::protos::ClassificationLoss::Clear();
  clear_has_second_stage_classification_loss();
}
inline const ::object_detection::protos::ClassificationLoss& FasterRcnn::second_stage_classification_loss() const {
  const ::object_detection::protos::ClassificationLoss* p = second_stage_classification_loss_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_classification_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ClassificationLoss*>(
      &::object_detection::protos::_ClassificationLoss_default_instance_);
}
inline ::object_detection::protos::ClassificationLoss* FasterRcnn::mutable_second_stage_classification_loss() {
  set_has_second_stage_classification_loss();
  if (second_stage_classification_loss_ == NULL) {
    second_stage_classification_loss_ = new ::object_detection::protos::ClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.second_stage_classification_loss)
  return second_stage_classification_loss_;
}
inline ::object_detection::protos::ClassificationLoss* FasterRcnn::release_second_stage_classification_loss() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.second_stage_classification_loss)
  clear_has_second_stage_classification_loss();
  ::object_detection::protos::ClassificationLoss* temp = second_stage_classification_loss_;
  second_stage_classification_loss_ = NULL;
  return temp;
}
inline void FasterRcnn::set_allocated_second_stage_classification_loss(::object_detection::protos::ClassificationLoss* second_stage_classification_loss) {
  delete second_stage_classification_loss_;
  second_stage_classification_loss_ = second_stage_classification_loss;
  if (second_stage_classification_loss) {
    set_has_second_stage_classification_loss();
  } else {
    clear_has_second_stage_classification_loss();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.second_stage_classification_loss)
}

// optional bool inplace_batchnorm_update = 30 [default = false];
inline bool FasterRcnn::has_inplace_batchnorm_update() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FasterRcnn::set_has_inplace_batchnorm_update() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FasterRcnn::clear_has_inplace_batchnorm_update() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FasterRcnn::clear_inplace_batchnorm_update() {
  inplace_batchnorm_update_ = false;
  clear_has_inplace_batchnorm_update();
}
inline bool FasterRcnn::inplace_batchnorm_update() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.inplace_batchnorm_update)
  return inplace_batchnorm_update_;
}
inline void FasterRcnn::set_inplace_batchnorm_update(bool value) {
  set_has_inplace_batchnorm_update();
  inplace_batchnorm_update_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.inplace_batchnorm_update)
}

// optional bool use_matmul_crop_and_resize = 31 [default = false];
inline bool FasterRcnn::has_use_matmul_crop_and_resize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FasterRcnn::set_has_use_matmul_crop_and_resize() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FasterRcnn::clear_has_use_matmul_crop_and_resize() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FasterRcnn::clear_use_matmul_crop_and_resize() {
  use_matmul_crop_and_resize_ = false;
  clear_has_use_matmul_crop_and_resize();
}
inline bool FasterRcnn::use_matmul_crop_and_resize() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_matmul_crop_and_resize)
  return use_matmul_crop_and_resize_;
}
inline void FasterRcnn::set_use_matmul_crop_and_resize(bool value) {
  set_has_use_matmul_crop_and_resize();
  use_matmul_crop_and_resize_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_matmul_crop_and_resize)
}

// optional bool clip_anchors_to_image = 32 [default = false];
inline bool FasterRcnn::has_clip_anchors_to_image() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FasterRcnn::set_has_clip_anchors_to_image() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FasterRcnn::clear_has_clip_anchors_to_image() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FasterRcnn::clear_clip_anchors_to_image() {
  clip_anchors_to_image_ = false;
  clear_has_clip_anchors_to_image();
}
inline bool FasterRcnn::clip_anchors_to_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.clip_anchors_to_image)
  return clip_anchors_to_image_;
}
inline void FasterRcnn::set_clip_anchors_to_image(bool value) {
  set_has_clip_anchors_to_image();
  clip_anchors_to_image_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.clip_anchors_to_image)
}

// optional bool use_matmul_gather_in_matcher = 33 [default = false];
inline bool FasterRcnn::has_use_matmul_gather_in_matcher() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FasterRcnn::set_has_use_matmul_gather_in_matcher() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FasterRcnn::clear_has_use_matmul_gather_in_matcher() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FasterRcnn::clear_use_matmul_gather_in_matcher() {
  use_matmul_gather_in_matcher_ = false;
  clear_has_use_matmul_gather_in_matcher();
}
inline bool FasterRcnn::use_matmul_gather_in_matcher() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_matmul_gather_in_matcher)
  return use_matmul_gather_in_matcher_;
}
inline void FasterRcnn::set_use_matmul_gather_in_matcher(bool value) {
  set_has_use_matmul_gather_in_matcher();
  use_matmul_gather_in_matcher_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_matmul_gather_in_matcher)
}

// optional bool use_static_balanced_label_sampler = 34 [default = false];
inline bool FasterRcnn::has_use_static_balanced_label_sampler() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FasterRcnn::set_has_use_static_balanced_label_sampler() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FasterRcnn::clear_has_use_static_balanced_label_sampler() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FasterRcnn::clear_use_static_balanced_label_sampler() {
  use_static_balanced_label_sampler_ = false;
  clear_has_use_static_balanced_label_sampler();
}
inline bool FasterRcnn::use_static_balanced_label_sampler() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_static_balanced_label_sampler)
  return use_static_balanced_label_sampler_;
}
inline void FasterRcnn::set_use_static_balanced_label_sampler(bool value) {
  set_has_use_static_balanced_label_sampler();
  use_static_balanced_label_sampler_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_static_balanced_label_sampler)
}

// optional bool use_static_shapes = 35 [default = false];
inline bool FasterRcnn::has_use_static_shapes() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FasterRcnn::set_has_use_static_shapes() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FasterRcnn::clear_has_use_static_shapes() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FasterRcnn::clear_use_static_shapes() {
  use_static_shapes_ = false;
  clear_has_use_static_shapes();
}
inline bool FasterRcnn::use_static_shapes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_static_shapes)
  return use_static_shapes_;
}
inline void FasterRcnn::set_use_static_shapes(bool value) {
  set_has_use_static_shapes();
  use_static_shapes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_static_shapes)
}

// optional bool resize_masks = 36 [default = true];
inline bool FasterRcnn::has_resize_masks() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void FasterRcnn::set_has_resize_masks() {
  _has_bits_[1] |= 0x00000008u;
}
inline void FasterRcnn::clear_has_resize_masks() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void FasterRcnn::clear_resize_masks() {
  resize_masks_ = true;
  clear_has_resize_masks();
}
inline bool FasterRcnn::resize_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.resize_masks)
  return resize_masks_;
}
inline void FasterRcnn::set_resize_masks(bool value) {
  set_has_resize_masks();
  resize_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.resize_masks)
}

// optional bool use_static_shapes_for_eval = 37 [default = false];
inline bool FasterRcnn::has_use_static_shapes_for_eval() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FasterRcnn::set_has_use_static_shapes_for_eval() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FasterRcnn::clear_has_use_static_shapes_for_eval() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FasterRcnn::clear_use_static_shapes_for_eval() {
  use_static_shapes_for_eval_ = false;
  clear_has_use_static_shapes_for_eval();
}
inline bool FasterRcnn::use_static_shapes_for_eval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_static_shapes_for_eval)
  return use_static_shapes_for_eval_;
}
inline void FasterRcnn::set_use_static_shapes_for_eval(bool value) {
  set_has_use_static_shapes_for_eval();
  use_static_shapes_for_eval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_static_shapes_for_eval)
}

// -------------------------------------------------------------------

// FasterRcnnFeatureExtractor

// optional string type = 1;
inline bool FasterRcnnFeatureExtractor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FasterRcnnFeatureExtractor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FasterRcnnFeatureExtractor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FasterRcnnFeatureExtractor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& FasterRcnnFeatureExtractor::type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnnFeatureExtractor.type)
  return type_.GetNoArena();
}
inline void FasterRcnnFeatureExtractor::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
#if LANG_CXX11
inline void FasterRcnnFeatureExtractor::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
#endif
inline void FasterRcnnFeatureExtractor::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
inline void FasterRcnnFeatureExtractor::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
inline ::std::string* FasterRcnnFeatureExtractor::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnnFeatureExtractor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FasterRcnnFeatureExtractor::release_type() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnnFeatureExtractor.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FasterRcnnFeatureExtractor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnnFeatureExtractor.type)
}

// optional int32 first_stage_features_stride = 2 [default = 16];
inline bool FasterRcnnFeatureExtractor::has_first_stage_features_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FasterRcnnFeatureExtractor::set_has_first_stage_features_stride() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FasterRcnnFeatureExtractor::clear_has_first_stage_features_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FasterRcnnFeatureExtractor::clear_first_stage_features_stride() {
  first_stage_features_stride_ = 16;
  clear_has_first_stage_features_stride();
}
inline ::google::protobuf::int32 FasterRcnnFeatureExtractor::first_stage_features_stride() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnnFeatureExtractor.first_stage_features_stride)
  return first_stage_features_stride_;
}
inline void FasterRcnnFeatureExtractor::set_first_stage_features_stride(::google::protobuf::int32 value) {
  set_has_first_stage_features_stride();
  first_stage_features_stride_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnnFeatureExtractor.first_stage_features_stride)
}

// optional bool batch_norm_trainable = 3 [default = false];
inline bool FasterRcnnFeatureExtractor::has_batch_norm_trainable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FasterRcnnFeatureExtractor::set_has_batch_norm_trainable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FasterRcnnFeatureExtractor::clear_has_batch_norm_trainable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FasterRcnnFeatureExtractor::clear_batch_norm_trainable() {
  batch_norm_trainable_ = false;
  clear_has_batch_norm_trainable();
}
inline bool FasterRcnnFeatureExtractor::batch_norm_trainable() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnnFeatureExtractor.batch_norm_trainable)
  return batch_norm_trainable_;
}
inline void FasterRcnnFeatureExtractor::set_batch_norm_trainable(bool value) {
  set_has_batch_norm_trainable();
  batch_norm_trainable_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnnFeatureExtractor.batch_norm_trainable)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto__INCLUDED
