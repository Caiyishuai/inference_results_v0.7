// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/ssd_anchor_generator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/ssd_anchor_generator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class SsdAnchorGeneratorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SsdAnchorGenerator>
     _instance;
} _SsdAnchorGenerator_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, num_layers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, min_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, max_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, scales_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, aspect_ratios_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, interpolated_scale_aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, reduce_boxes_in_lowest_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, base_anchor_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, base_anchor_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, height_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, width_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, height_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsdAnchorGenerator, width_offset_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  0,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(SsdAnchorGenerator)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SsdAnchorGenerator_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/ssd_anchor_generator.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SsdAnchorGenerator_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SsdAnchorGenerator_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n2object_detection/protos/ssd_anchor_gen"
      "erator.proto\022\027object_detection.protos\"\362\002"
      "\n\022SsdAnchorGenerator\022\025\n\nnum_layers\030\001 \001(\005"
      ":\0016\022\026\n\tmin_scale\030\002 \001(\002:\0030.2\022\027\n\tmax_scale"
      "\030\003 \001(\002:\0040.95\022\016\n\006scales\030\014 \003(\002\022\025\n\raspect_r"
      "atios\030\004 \003(\002\022*\n\037interpolated_scale_aspect"
      "_ratio\030\r \001(\002:\0011\022*\n\034reduce_boxes_in_lowes"
      "t_layer\030\005 \001(\010:\004true\022\035\n\022base_anchor_heigh"
      "t\030\006 \001(\002:\0011\022\034\n\021base_anchor_width\030\007 \001(\002:\0011"
      "\022\025\n\rheight_stride\030\010 \003(\005\022\024\n\014width_stride\030"
      "\t \003(\005\022\025\n\rheight_offset\030\n \003(\005\022\024\n\014width_of"
      "fset\030\013 \003(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/ssd_anchor_generator.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SsdAnchorGenerator::kNumLayersFieldNumber;
const int SsdAnchorGenerator::kMinScaleFieldNumber;
const int SsdAnchorGenerator::kMaxScaleFieldNumber;
const int SsdAnchorGenerator::kScalesFieldNumber;
const int SsdAnchorGenerator::kAspectRatiosFieldNumber;
const int SsdAnchorGenerator::kInterpolatedScaleAspectRatioFieldNumber;
const int SsdAnchorGenerator::kReduceBoxesInLowestLayerFieldNumber;
const int SsdAnchorGenerator::kBaseAnchorHeightFieldNumber;
const int SsdAnchorGenerator::kBaseAnchorWidthFieldNumber;
const int SsdAnchorGenerator::kHeightStrideFieldNumber;
const int SsdAnchorGenerator::kWidthStrideFieldNumber;
const int SsdAnchorGenerator::kHeightOffsetFieldNumber;
const int SsdAnchorGenerator::kWidthOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SsdAnchorGenerator::SsdAnchorGenerator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SsdAnchorGenerator)
}
SsdAnchorGenerator::SsdAnchorGenerator(const SsdAnchorGenerator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      aspect_ratios_(from.aspect_ratios_),
      height_stride_(from.height_stride_),
      width_stride_(from.width_stride_),
      height_offset_(from.height_offset_),
      width_offset_(from.width_offset_),
      scales_(from.scales_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interpolated_scale_aspect_ratio_, &from.interpolated_scale_aspect_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_anchor_width_) -
    reinterpret_cast<char*>(&interpolated_scale_aspect_ratio_)) + sizeof(base_anchor_width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SsdAnchorGenerator)
}

void SsdAnchorGenerator::SharedCtor() {
  _cached_size_ = 0;
  interpolated_scale_aspect_ratio_ = 1;
  num_layers_ = 6;
  min_scale_ = 0.2f;
  max_scale_ = 0.95f;
  reduce_boxes_in_lowest_layer_ = true;
  base_anchor_height_ = 1;
  base_anchor_width_ = 1;
}

SsdAnchorGenerator::~SsdAnchorGenerator() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SsdAnchorGenerator)
  SharedDtor();
}

void SsdAnchorGenerator::SharedDtor() {
}

void SsdAnchorGenerator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SsdAnchorGenerator::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SsdAnchorGenerator& SsdAnchorGenerator::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto::InitDefaults();
  return *internal_default_instance();
}

SsdAnchorGenerator* SsdAnchorGenerator::New(::google::protobuf::Arena* arena) const {
  SsdAnchorGenerator* n = new SsdAnchorGenerator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SsdAnchorGenerator::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SsdAnchorGenerator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aspect_ratios_.Clear();
  height_stride_.Clear();
  width_stride_.Clear();
  height_offset_.Clear();
  width_offset_.Clear();
  scales_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    interpolated_scale_aspect_ratio_ = 1;
    num_layers_ = 6;
    min_scale_ = 0.2f;
    max_scale_ = 0.95f;
    reduce_boxes_in_lowest_layer_ = true;
    base_anchor_height_ = 1;
    base_anchor_width_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SsdAnchorGenerator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SsdAnchorGenerator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_layers = 1 [default = 6];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_layers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_layers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_scale = 2 [default = 0.2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_min_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_scale = 3 [default = 0.95];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float aspect_ratios = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_aspect_ratios())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_aspect_ratios())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reduce_boxes_in_lowest_layer = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_reduce_boxes_in_lowest_layer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reduce_boxes_in_lowest_layer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float base_anchor_height = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_base_anchor_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_anchor_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float base_anchor_width = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_base_anchor_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_anchor_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 height_stride = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64u, input, this->mutable_height_stride())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_height_stride())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 width_stride = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_width_stride())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_width_stride())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 height_offset = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80u, input, this->mutable_height_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_height_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 width_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_width_offset())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_width_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scales = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101u, input, this->mutable_scales())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scales())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float interpolated_scale_aspect_ratio = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_interpolated_scale_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interpolated_scale_aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SsdAnchorGenerator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SsdAnchorGenerator)
  return false;
#undef DO_
}

void SsdAnchorGenerator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SsdAnchorGenerator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_layers = 1 [default = 6];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_layers(), output);
  }

  // optional float min_scale = 2 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_scale(), output);
  }

  // optional float max_scale = 3 [default = 0.95];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_scale(), output);
  }

  // repeated float aspect_ratios = 4;
  for (int i = 0, n = this->aspect_ratios_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->aspect_ratios(i), output);
  }

  // optional bool reduce_boxes_in_lowest_layer = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reduce_boxes_in_lowest_layer(), output);
  }

  // optional float base_anchor_height = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->base_anchor_height(), output);
  }

  // optional float base_anchor_width = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->base_anchor_width(), output);
  }

  // repeated int32 height_stride = 8;
  for (int i = 0, n = this->height_stride_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->height_stride(i), output);
  }

  // repeated int32 width_stride = 9;
  for (int i = 0, n = this->width_stride_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->width_stride(i), output);
  }

  // repeated int32 height_offset = 10;
  for (int i = 0, n = this->height_offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->height_offset(i), output);
  }

  // repeated int32 width_offset = 11;
  for (int i = 0, n = this->width_offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->width_offset(i), output);
  }

  // repeated float scales = 12;
  for (int i = 0, n = this->scales_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->scales(i), output);
  }

  // optional float interpolated_scale_aspect_ratio = 13 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->interpolated_scale_aspect_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SsdAnchorGenerator)
}

::google::protobuf::uint8* SsdAnchorGenerator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SsdAnchorGenerator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_layers = 1 [default = 6];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_layers(), target);
  }

  // optional float min_scale = 2 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_scale(), target);
  }

  // optional float max_scale = 3 [default = 0.95];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_scale(), target);
  }

  // repeated float aspect_ratios = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->aspect_ratios_, target);

  // optional bool reduce_boxes_in_lowest_layer = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reduce_boxes_in_lowest_layer(), target);
  }

  // optional float base_anchor_height = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->base_anchor_height(), target);
  }

  // optional float base_anchor_width = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->base_anchor_width(), target);
  }

  // repeated int32 height_stride = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(8, this->height_stride_, target);

  // repeated int32 width_stride = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(9, this->width_stride_, target);

  // repeated int32 height_offset = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(10, this->height_offset_, target);

  // repeated int32 width_offset = 11;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(11, this->width_offset_, target);

  // repeated float scales = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(12, this->scales_, target);

  // optional float interpolated_scale_aspect_ratio = 13 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->interpolated_scale_aspect_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SsdAnchorGenerator)
  return target;
}

size_t SsdAnchorGenerator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SsdAnchorGenerator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float aspect_ratios = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->aspect_ratios_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->aspect_ratios_size());
    total_size += data_size;
  }

  // repeated int32 height_stride = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->height_stride_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->height_stride_size());
    total_size += data_size;
  }

  // repeated int32 width_stride = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->width_stride_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->width_stride_size());
    total_size += data_size;
  }

  // repeated int32 height_offset = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->height_offset_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->height_offset_size());
    total_size += data_size;
  }

  // repeated int32 width_offset = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->width_offset_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->width_offset_size());
    total_size += data_size;
  }

  // repeated float scales = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->scales_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scales_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional float interpolated_scale_aspect_ratio = 13 [default = 1];
    if (has_interpolated_scale_aspect_ratio()) {
      total_size += 1 + 4;
    }

    // optional int32 num_layers = 1 [default = 6];
    if (has_num_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_layers());
    }

    // optional float min_scale = 2 [default = 0.2];
    if (has_min_scale()) {
      total_size += 1 + 4;
    }

    // optional float max_scale = 3 [default = 0.95];
    if (has_max_scale()) {
      total_size += 1 + 4;
    }

    // optional bool reduce_boxes_in_lowest_layer = 5 [default = true];
    if (has_reduce_boxes_in_lowest_layer()) {
      total_size += 1 + 1;
    }

    // optional float base_anchor_height = 6 [default = 1];
    if (has_base_anchor_height()) {
      total_size += 1 + 4;
    }

    // optional float base_anchor_width = 7 [default = 1];
    if (has_base_anchor_width()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SsdAnchorGenerator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SsdAnchorGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  const SsdAnchorGenerator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SsdAnchorGenerator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SsdAnchorGenerator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SsdAnchorGenerator)
    MergeFrom(*source);
  }
}

void SsdAnchorGenerator::MergeFrom(const SsdAnchorGenerator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SsdAnchorGenerator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aspect_ratios_.MergeFrom(from.aspect_ratios_);
  height_stride_.MergeFrom(from.height_stride_);
  width_stride_.MergeFrom(from.width_stride_);
  height_offset_.MergeFrom(from.height_offset_);
  width_offset_.MergeFrom(from.width_offset_);
  scales_.MergeFrom(from.scales_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      interpolated_scale_aspect_ratio_ = from.interpolated_scale_aspect_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_layers_ = from.num_layers_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_scale_ = from.min_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_scale_ = from.max_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      reduce_boxes_in_lowest_layer_ = from.reduce_boxes_in_lowest_layer_;
    }
    if (cached_has_bits & 0x00000020u) {
      base_anchor_height_ = from.base_anchor_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_anchor_width_ = from.base_anchor_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SsdAnchorGenerator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SsdAnchorGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsdAnchorGenerator::CopyFrom(const SsdAnchorGenerator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SsdAnchorGenerator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsdAnchorGenerator::IsInitialized() const {
  return true;
}

void SsdAnchorGenerator::Swap(SsdAnchorGenerator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SsdAnchorGenerator::InternalSwap(SsdAnchorGenerator* other) {
  using std::swap;
  aspect_ratios_.InternalSwap(&other->aspect_ratios_);
  height_stride_.InternalSwap(&other->height_stride_);
  width_stride_.InternalSwap(&other->width_stride_);
  height_offset_.InternalSwap(&other->height_offset_);
  width_offset_.InternalSwap(&other->width_offset_);
  scales_.InternalSwap(&other->scales_);
  swap(interpolated_scale_aspect_ratio_, other->interpolated_scale_aspect_ratio_);
  swap(num_layers_, other->num_layers_);
  swap(min_scale_, other->min_scale_);
  swap(max_scale_, other->max_scale_);
  swap(reduce_boxes_in_lowest_layer_, other->reduce_boxes_in_lowest_layer_);
  swap(base_anchor_height_, other->base_anchor_height_);
  swap(base_anchor_width_, other->base_anchor_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SsdAnchorGenerator::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fssd_5fanchor_5fgenerator_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SsdAnchorGenerator

// optional int32 num_layers = 1 [default = 6];
bool SsdAnchorGenerator::has_num_layers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SsdAnchorGenerator::set_has_num_layers() {
  _has_bits_[0] |= 0x00000002u;
}
void SsdAnchorGenerator::clear_has_num_layers() {
  _has_bits_[0] &= ~0x00000002u;
}
void SsdAnchorGenerator::clear_num_layers() {
  num_layers_ = 6;
  clear_has_num_layers();
}
::google::protobuf::int32 SsdAnchorGenerator::num_layers() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.num_layers)
  return num_layers_;
}
void SsdAnchorGenerator::set_num_layers(::google::protobuf::int32 value) {
  set_has_num_layers();
  num_layers_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.num_layers)
}

// optional float min_scale = 2 [default = 0.2];
bool SsdAnchorGenerator::has_min_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SsdAnchorGenerator::set_has_min_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void SsdAnchorGenerator::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void SsdAnchorGenerator::clear_min_scale() {
  min_scale_ = 0.2f;
  clear_has_min_scale();
}
float SsdAnchorGenerator::min_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.min_scale)
  return min_scale_;
}
void SsdAnchorGenerator::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.min_scale)
}

// optional float max_scale = 3 [default = 0.95];
bool SsdAnchorGenerator::has_max_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SsdAnchorGenerator::set_has_max_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void SsdAnchorGenerator::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void SsdAnchorGenerator::clear_max_scale() {
  max_scale_ = 0.95f;
  clear_has_max_scale();
}
float SsdAnchorGenerator::max_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.max_scale)
  return max_scale_;
}
void SsdAnchorGenerator::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.max_scale)
}

// repeated float scales = 12;
int SsdAnchorGenerator::scales_size() const {
  return scales_.size();
}
void SsdAnchorGenerator::clear_scales() {
  scales_.Clear();
}
float SsdAnchorGenerator::scales(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.scales)
  return scales_.Get(index);
}
void SsdAnchorGenerator::set_scales(int index, float value) {
  scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.scales)
}
void SsdAnchorGenerator::add_scales(float value) {
  scales_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SsdAnchorGenerator.scales)
}
const ::google::protobuf::RepeatedField< float >&
SsdAnchorGenerator::scales() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SsdAnchorGenerator.scales)
  return scales_;
}
::google::protobuf::RepeatedField< float >*
SsdAnchorGenerator::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SsdAnchorGenerator.scales)
  return &scales_;
}

// repeated float aspect_ratios = 4;
int SsdAnchorGenerator::aspect_ratios_size() const {
  return aspect_ratios_.size();
}
void SsdAnchorGenerator::clear_aspect_ratios() {
  aspect_ratios_.Clear();
}
float SsdAnchorGenerator::aspect_ratios(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.aspect_ratios)
  return aspect_ratios_.Get(index);
}
void SsdAnchorGenerator::set_aspect_ratios(int index, float value) {
  aspect_ratios_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.aspect_ratios)
}
void SsdAnchorGenerator::add_aspect_ratios(float value) {
  aspect_ratios_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SsdAnchorGenerator.aspect_ratios)
}
const ::google::protobuf::RepeatedField< float >&
SsdAnchorGenerator::aspect_ratios() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SsdAnchorGenerator.aspect_ratios)
  return aspect_ratios_;
}
::google::protobuf::RepeatedField< float >*
SsdAnchorGenerator::mutable_aspect_ratios() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SsdAnchorGenerator.aspect_ratios)
  return &aspect_ratios_;
}

// optional float interpolated_scale_aspect_ratio = 13 [default = 1];
bool SsdAnchorGenerator::has_interpolated_scale_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SsdAnchorGenerator::set_has_interpolated_scale_aspect_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
void SsdAnchorGenerator::clear_has_interpolated_scale_aspect_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void SsdAnchorGenerator::clear_interpolated_scale_aspect_ratio() {
  interpolated_scale_aspect_ratio_ = 1;
  clear_has_interpolated_scale_aspect_ratio();
}
float SsdAnchorGenerator::interpolated_scale_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.interpolated_scale_aspect_ratio)
  return interpolated_scale_aspect_ratio_;
}
void SsdAnchorGenerator::set_interpolated_scale_aspect_ratio(float value) {
  set_has_interpolated_scale_aspect_ratio();
  interpolated_scale_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.interpolated_scale_aspect_ratio)
}

// optional bool reduce_boxes_in_lowest_layer = 5 [default = true];
bool SsdAnchorGenerator::has_reduce_boxes_in_lowest_layer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SsdAnchorGenerator::set_has_reduce_boxes_in_lowest_layer() {
  _has_bits_[0] |= 0x00000010u;
}
void SsdAnchorGenerator::clear_has_reduce_boxes_in_lowest_layer() {
  _has_bits_[0] &= ~0x00000010u;
}
void SsdAnchorGenerator::clear_reduce_boxes_in_lowest_layer() {
  reduce_boxes_in_lowest_layer_ = true;
  clear_has_reduce_boxes_in_lowest_layer();
}
bool SsdAnchorGenerator::reduce_boxes_in_lowest_layer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.reduce_boxes_in_lowest_layer)
  return reduce_boxes_in_lowest_layer_;
}
void SsdAnchorGenerator::set_reduce_boxes_in_lowest_layer(bool value) {
  set_has_reduce_boxes_in_lowest_layer();
  reduce_boxes_in_lowest_layer_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.reduce_boxes_in_lowest_layer)
}

// optional float base_anchor_height = 6 [default = 1];
bool SsdAnchorGenerator::has_base_anchor_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SsdAnchorGenerator::set_has_base_anchor_height() {
  _has_bits_[0] |= 0x00000020u;
}
void SsdAnchorGenerator::clear_has_base_anchor_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void SsdAnchorGenerator::clear_base_anchor_height() {
  base_anchor_height_ = 1;
  clear_has_base_anchor_height();
}
float SsdAnchorGenerator::base_anchor_height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.base_anchor_height)
  return base_anchor_height_;
}
void SsdAnchorGenerator::set_base_anchor_height(float value) {
  set_has_base_anchor_height();
  base_anchor_height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.base_anchor_height)
}

// optional float base_anchor_width = 7 [default = 1];
bool SsdAnchorGenerator::has_base_anchor_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SsdAnchorGenerator::set_has_base_anchor_width() {
  _has_bits_[0] |= 0x00000040u;
}
void SsdAnchorGenerator::clear_has_base_anchor_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void SsdAnchorGenerator::clear_base_anchor_width() {
  base_anchor_width_ = 1;
  clear_has_base_anchor_width();
}
float SsdAnchorGenerator::base_anchor_width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.base_anchor_width)
  return base_anchor_width_;
}
void SsdAnchorGenerator::set_base_anchor_width(float value) {
  set_has_base_anchor_width();
  base_anchor_width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.base_anchor_width)
}

// repeated int32 height_stride = 8;
int SsdAnchorGenerator::height_stride_size() const {
  return height_stride_.size();
}
void SsdAnchorGenerator::clear_height_stride() {
  height_stride_.Clear();
}
::google::protobuf::int32 SsdAnchorGenerator::height_stride(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.height_stride)
  return height_stride_.Get(index);
}
void SsdAnchorGenerator::set_height_stride(int index, ::google::protobuf::int32 value) {
  height_stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.height_stride)
}
void SsdAnchorGenerator::add_height_stride(::google::protobuf::int32 value) {
  height_stride_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SsdAnchorGenerator.height_stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SsdAnchorGenerator::height_stride() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SsdAnchorGenerator.height_stride)
  return height_stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SsdAnchorGenerator::mutable_height_stride() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SsdAnchorGenerator.height_stride)
  return &height_stride_;
}

// repeated int32 width_stride = 9;
int SsdAnchorGenerator::width_stride_size() const {
  return width_stride_.size();
}
void SsdAnchorGenerator::clear_width_stride() {
  width_stride_.Clear();
}
::google::protobuf::int32 SsdAnchorGenerator::width_stride(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.width_stride)
  return width_stride_.Get(index);
}
void SsdAnchorGenerator::set_width_stride(int index, ::google::protobuf::int32 value) {
  width_stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.width_stride)
}
void SsdAnchorGenerator::add_width_stride(::google::protobuf::int32 value) {
  width_stride_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SsdAnchorGenerator.width_stride)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SsdAnchorGenerator::width_stride() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SsdAnchorGenerator.width_stride)
  return width_stride_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SsdAnchorGenerator::mutable_width_stride() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SsdAnchorGenerator.width_stride)
  return &width_stride_;
}

// repeated int32 height_offset = 10;
int SsdAnchorGenerator::height_offset_size() const {
  return height_offset_.size();
}
void SsdAnchorGenerator::clear_height_offset() {
  height_offset_.Clear();
}
::google::protobuf::int32 SsdAnchorGenerator::height_offset(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.height_offset)
  return height_offset_.Get(index);
}
void SsdAnchorGenerator::set_height_offset(int index, ::google::protobuf::int32 value) {
  height_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.height_offset)
}
void SsdAnchorGenerator::add_height_offset(::google::protobuf::int32 value) {
  height_offset_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SsdAnchorGenerator.height_offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SsdAnchorGenerator::height_offset() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SsdAnchorGenerator.height_offset)
  return height_offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SsdAnchorGenerator::mutable_height_offset() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SsdAnchorGenerator.height_offset)
  return &height_offset_;
}

// repeated int32 width_offset = 11;
int SsdAnchorGenerator::width_offset_size() const {
  return width_offset_.size();
}
void SsdAnchorGenerator::clear_width_offset() {
  width_offset_.Clear();
}
::google::protobuf::int32 SsdAnchorGenerator::width_offset(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SsdAnchorGenerator.width_offset)
  return width_offset_.Get(index);
}
void SsdAnchorGenerator::set_width_offset(int index, ::google::protobuf::int32 value) {
  width_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.SsdAnchorGenerator.width_offset)
}
void SsdAnchorGenerator::add_width_offset(::google::protobuf::int32 value) {
  width_offset_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.SsdAnchorGenerator.width_offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SsdAnchorGenerator::width_offset() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.SsdAnchorGenerator.width_offset)
  return width_offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SsdAnchorGenerator::mutable_width_offset() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.SsdAnchorGenerator.width_offset)
  return &width_offset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
