// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/losses.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/losses.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class Loss_EqualizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Loss_EqualizationLoss>
     _instance;
} _Loss_EqualizationLoss_default_instance_;
class LossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Loss>
     _instance;
} _Loss_default_instance_;
class LocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LocalizationLoss>
     _instance;
  const ::object_detection::protos::WeightedL2LocalizationLoss* weighted_l2_;
  const ::object_detection::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1_;
  const ::object_detection::protos::WeightedIOULocalizationLoss* weighted_iou_;
} _LocalizationLoss_default_instance_;
class WeightedL2LocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedL2LocalizationLoss>
     _instance;
} _WeightedL2LocalizationLoss_default_instance_;
class WeightedSmoothL1LocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSmoothL1LocalizationLoss>
     _instance;
} _WeightedSmoothL1LocalizationLoss_default_instance_;
class WeightedIOULocalizationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedIOULocalizationLoss>
     _instance;
} _WeightedIOULocalizationLoss_default_instance_;
class ClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ClassificationLoss>
     _instance;
  const ::object_detection::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid_;
  const ::object_detection::protos::WeightedSoftmaxClassificationLoss* weighted_softmax_;
  const ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* weighted_logits_softmax_;
  const ::object_detection::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid_;
  const ::object_detection::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal_;
} _ClassificationLoss_default_instance_;
class WeightedSigmoidClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSigmoidClassificationLoss>
     _instance;
} _WeightedSigmoidClassificationLoss_default_instance_;
class SigmoidFocalClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SigmoidFocalClassificationLoss>
     _instance;
} _SigmoidFocalClassificationLoss_default_instance_;
class WeightedSoftmaxClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSoftmaxClassificationLoss>
     _instance;
} _WeightedSoftmaxClassificationLoss_default_instance_;
class WeightedSoftmaxClassificationAgainstLogitsLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WeightedSoftmaxClassificationAgainstLogitsLoss>
     _instance;
} _WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_;
class BootstrappedSigmoidClassificationLossDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BootstrappedSigmoidClassificationLoss>
     _instance;
} _BootstrappedSigmoidClassificationLoss_default_instance_;
class HardExampleMinerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HardExampleMiner>
     _instance;
} _HardExampleMiner_default_instance_;
class RandomExampleSamplerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RandomExampleSampler>
     _instance;
} _RandomExampleSampler_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2flosses_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss_EqualizationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss_EqualizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss_EqualizationLoss, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss_EqualizationLoss, exclude_prefixes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, localization_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, classification_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, hard_example_miner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, classification_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, localization_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, random_example_sampler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, equalization_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, expected_loss_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, min_num_negative_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Loss, desired_negative_sampling_ratio_),
  0,
  1,
  2,
  8,
  9,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(LocalizationLossDefaultTypeInternal, weighted_l2_),
  offsetof(LocalizationLossDefaultTypeInternal, weighted_smooth_l1_),
  offsetof(LocalizationLossDefaultTypeInternal, weighted_iou_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalizationLoss, localization_loss_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedL2LocalizationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedL2LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedL2LocalizationLoss, anchorwise_output_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSmoothL1LocalizationLoss, delta_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedIOULocalizationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedIOULocalizationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ClassificationLossDefaultTypeInternal, weighted_sigmoid_),
  offsetof(ClassificationLossDefaultTypeInternal, weighted_softmax_),
  offsetof(ClassificationLossDefaultTypeInternal, weighted_logits_softmax_),
  offsetof(ClassificationLossDefaultTypeInternal, bootstrapped_sigmoid_),
  offsetof(ClassificationLossDefaultTypeInternal, weighted_sigmoid_focal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassificationLoss, classification_loss_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSigmoidClassificationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSigmoidClassificationLoss, anchorwise_output_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SigmoidFocalClassificationLoss, alpha_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationLoss, logit_scale_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationAgainstLogitsLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationAgainstLogitsLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationAgainstLogitsLoss, anchorwise_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightedSoftmaxClassificationAgainstLogitsLoss, logit_scale_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, alpha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, hard_bootstrap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrappedSigmoidClassificationLoss, anchorwise_output_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, num_hard_examples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, iou_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, loss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, max_negatives_per_positive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardExampleMiner, min_negatives_per_image_),
  3,
  4,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomExampleSampler, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomExampleSampler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomExampleSampler, positive_sample_fraction_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Loss_EqualizationLoss)},
  { 9, 24, sizeof(Loss)},
  { 34, 43, sizeof(LocalizationLoss)},
  { 46, 52, sizeof(WeightedL2LocalizationLoss)},
  { 53, 60, sizeof(WeightedSmoothL1LocalizationLoss)},
  { 62, 67, sizeof(WeightedIOULocalizationLoss)},
  { 67, 78, sizeof(ClassificationLoss)},
  { 83, 89, sizeof(WeightedSigmoidClassificationLoss)},
  { 90, 98, sizeof(SigmoidFocalClassificationLoss)},
  { 101, 108, sizeof(WeightedSoftmaxClassificationLoss)},
  { 110, 117, sizeof(WeightedSoftmaxClassificationAgainstLogitsLoss)},
  { 119, 127, sizeof(BootstrappedSigmoidClassificationLoss)},
  { 130, 140, sizeof(HardExampleMiner)},
  { 145, 151, sizeof(RandomExampleSampler)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Loss_EqualizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Loss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedL2LocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSmoothL1LocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedIOULocalizationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SigmoidFocalClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSoftmaxClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BootstrappedSigmoidClassificationLoss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HardExampleMiner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RandomExampleSampler_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/losses.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Loss_EqualizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Loss_EqualizationLoss_default_instance_);_Loss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Loss_default_instance_);_LocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LocalizationLoss_default_instance_);_WeightedL2LocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedL2LocalizationLoss_default_instance_);_WeightedSmoothL1LocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSmoothL1LocalizationLoss_default_instance_);_WeightedIOULocalizationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedIOULocalizationLoss_default_instance_);_ClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ClassificationLoss_default_instance_);_WeightedSigmoidClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSigmoidClassificationLoss_default_instance_);_SigmoidFocalClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SigmoidFocalClassificationLoss_default_instance_);_WeightedSoftmaxClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSoftmaxClassificationLoss_default_instance_);_WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WeightedSoftmaxClassificationAgainstLogitsLoss_default_instance_);_BootstrappedSigmoidClassificationLoss_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BootstrappedSigmoidClassificationLoss_default_instance_);_HardExampleMiner_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HardExampleMiner_default_instance_);_RandomExampleSampler_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RandomExampleSampler_default_instance_);_Loss_default_instance_._instance.get_mutable()->localization_loss_ = const_cast< ::object_detection::protos::LocalizationLoss*>(
      ::object_detection::protos::LocalizationLoss::internal_default_instance());
  _Loss_default_instance_._instance.get_mutable()->classification_loss_ = const_cast< ::object_detection::protos::ClassificationLoss*>(
      ::object_detection::protos::ClassificationLoss::internal_default_instance());
  _Loss_default_instance_._instance.get_mutable()->hard_example_miner_ = const_cast< ::object_detection::protos::HardExampleMiner*>(
      ::object_detection::protos::HardExampleMiner::internal_default_instance());
  _Loss_default_instance_._instance.get_mutable()->random_example_sampler_ = const_cast< ::object_detection::protos::RandomExampleSampler*>(
      ::object_detection::protos::RandomExampleSampler::internal_default_instance());
  _Loss_default_instance_._instance.get_mutable()->equalization_loss_ = const_cast< ::object_detection::protos::Loss_EqualizationLoss*>(
      ::object_detection::protos::Loss_EqualizationLoss::internal_default_instance());
  _LocalizationLoss_default_instance_.weighted_l2_ = const_cast< ::object_detection::protos::WeightedL2LocalizationLoss*>(
      ::object_detection::protos::WeightedL2LocalizationLoss::internal_default_instance());
  _LocalizationLoss_default_instance_.weighted_smooth_l1_ = const_cast< ::object_detection::protos::WeightedSmoothL1LocalizationLoss*>(
      ::object_detection::protos::WeightedSmoothL1LocalizationLoss::internal_default_instance());
  _LocalizationLoss_default_instance_.weighted_iou_ = const_cast< ::object_detection::protos::WeightedIOULocalizationLoss*>(
      ::object_detection::protos::WeightedIOULocalizationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_sigmoid_ = const_cast< ::object_detection::protos::WeightedSigmoidClassificationLoss*>(
      ::object_detection::protos::WeightedSigmoidClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_softmax_ = const_cast< ::object_detection::protos::WeightedSoftmaxClassificationLoss*>(
      ::object_detection::protos::WeightedSoftmaxClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_logits_softmax_ = const_cast< ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss*>(
      ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.bootstrapped_sigmoid_ = const_cast< ::object_detection::protos::BootstrappedSigmoidClassificationLoss*>(
      ::object_detection::protos::BootstrappedSigmoidClassificationLoss::internal_default_instance());
  _ClassificationLoss_default_instance_.weighted_sigmoid_focal_ = const_cast< ::object_detection::protos::SigmoidFocalClassificationLoss*>(
      ::object_detection::protos::SigmoidFocalClassificationLoss::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$object_detection/protos/losses.proto\022\027"
      "object_detection.protos\"\376\005\n\004Loss\022D\n\021loca"
      "lization_loss\030\001 \001(\0132).object_detection.p"
      "rotos.LocalizationLoss\022H\n\023classification"
      "_loss\030\002 \001(\0132+.object_detection.protos.Cl"
      "assificationLoss\022E\n\022hard_example_miner\030\003"
      " \001(\0132).object_detection.protos.HardExamp"
      "leMiner\022 \n\025classification_weight\030\004 \001(\002:\001"
      "1\022\036\n\023localization_weight\030\005 \001(\002:\0011\022M\n\026ran"
      "dom_example_sampler\030\006 \001(\0132-.object_detec"
      "tion.protos.RandomExampleSampler\022I\n\021equa"
      "lization_loss\030\007 \001(\0132..object_detection.p"
      "rotos.Loss.EqualizationLoss\022V\n\025expected_"
      "loss_weights\030\022 \001(\01621.object_detection.pr"
      "otos.Loss.ExpectedLossWeights:\004NONE\022#\n\030m"
      "in_num_negative_samples\030\023 \001(\002:\0010\022*\n\037desi"
      "red_negative_sampling_ratio\030\024 \001(\002:\0013\032\?\n\020"
      "EqualizationLoss\022\021\n\006weight\030\001 \001(\002:\0010\022\030\n\020e"
      "xclude_prefixes\030\002 \003(\t\"Y\n\023ExpectedLossWei"
      "ghts\022\010\n\004NONE\020\000\022\025\n\021EXPECTED_SAMPLING\020\001\022!\n"
      "\035REWEIGHTING_UNMATCHED_ANCHORS\020\002\"\232\002\n\020Loc"
      "alizationLoss\022J\n\013weighted_l2\030\001 \001(\01323.obj"
      "ect_detection.protos.WeightedL2Localizat"
      "ionLossH\000\022W\n\022weighted_smooth_l1\030\002 \001(\01329."
      "object_detection.protos.WeightedSmoothL1"
      "LocalizationLossH\000\022L\n\014weighted_iou\030\003 \001(\013"
      "24.object_detection.protos.WeightedIOULo"
      "calizationLossH\000B\023\n\021localization_loss\">\n"
      "\032WeightedL2LocalizationLoss\022 \n\021anchorwis"
      "e_output\030\001 \001(\010:\005false\"V\n WeightedSmoothL"
      "1LocalizationLoss\022 \n\021anchorwise_output\030\001"
      " \001(\010:\005false\022\020\n\005delta\030\002 \001(\002:\0011\"\035\n\033Weighte"
      "dIOULocalizationLoss\"\202\004\n\022ClassificationL"
      "oss\022V\n\020weighted_sigmoid\030\001 \001(\0132:.object_d"
      "etection.protos.WeightedSigmoidClassific"
      "ationLossH\000\022V\n\020weighted_softmax\030\002 \001(\0132:."
      "object_detection.protos.WeightedSoftmaxC"
      "lassificationLossH\000\022j\n\027weighted_logits_s"
      "oftmax\030\005 \001(\0132G.object_detection.protos.W"
      "eightedSoftmaxClassificationAgainstLogit"
      "sLossH\000\022^\n\024bootstrapped_sigmoid\030\003 \001(\0132>."
      "object_detection.protos.BootstrappedSigm"
      "oidClassificationLossH\000\022Y\n\026weighted_sigm"
      "oid_focal\030\004 \001(\01327.object_detection.proto"
      "s.SigmoidFocalClassificationLossH\000B\025\n\023cl"
      "assification_loss\"E\n!WeightedSigmoidClas"
      "sificationLoss\022 \n\021anchorwise_output\030\001 \001("
      "\010:\005false\"c\n\036SigmoidFocalClassificationLo"
      "ss\022 \n\021anchorwise_output\030\001 \001(\010:\005false\022\020\n\005"
      "gamma\030\002 \001(\002:\0012\022\r\n\005alpha\030\003 \001(\002\"]\n!Weighte"
      "dSoftmaxClassificationLoss\022 \n\021anchorwise"
      "_output\030\001 \001(\010:\005false\022\026\n\013logit_scale\030\002 \001("
      "\002:\0011\"j\n.WeightedSoftmaxClassificationAga"
      "instLogitsLoss\022 \n\021anchorwise_output\030\001 \001("
      "\010:\005false\022\026\n\013logit_scale\030\002 \001(\002:\0011\"w\n%Boot"
      "strappedSigmoidClassificationLoss\022\r\n\005alp"
      "ha\030\001 \001(\002\022\035\n\016hard_bootstrap\030\002 \001(\010:\005false\022"
      " \n\021anchorwise_output\030\003 \001(\010:\005false\"\241\002\n\020Ha"
      "rdExampleMiner\022\035\n\021num_hard_examples\030\001 \001("
      "\005:\00264\022\032\n\riou_threshold\030\002 \001(\002:\0030.7\022K\n\tlos"
      "s_type\030\003 \001(\01622.object_detection.protos.H"
      "ardExampleMiner.LossType:\004BOTH\022%\n\032max_ne"
      "gatives_per_positive\030\004 \001(\005:\0010\022\"\n\027min_neg"
      "atives_per_image\030\005 \001(\005:\0010\":\n\010LossType\022\010\n"
      "\004BOTH\020\000\022\022\n\016CLASSIFICATION\020\001\022\020\n\014LOCALIZAT"
      "ION\020\002\">\n\024RandomExampleSampler\022&\n\030positiv"
      "e_sample_fraction\030\001 \001(\002:\0040.01"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/losses.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2flosses_2eproto

const ::google::protobuf::EnumDescriptor* Loss_ExpectedLossWeights_descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_enum_descriptors[0];
}
bool Loss_ExpectedLossWeights_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Loss_ExpectedLossWeights Loss::NONE;
const Loss_ExpectedLossWeights Loss::EXPECTED_SAMPLING;
const Loss_ExpectedLossWeights Loss::REWEIGHTING_UNMATCHED_ANCHORS;
const Loss_ExpectedLossWeights Loss::ExpectedLossWeights_MIN;
const Loss_ExpectedLossWeights Loss::ExpectedLossWeights_MAX;
const int Loss::ExpectedLossWeights_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HardExampleMiner_LossType_descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_enum_descriptors[1];
}
bool HardExampleMiner_LossType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HardExampleMiner_LossType HardExampleMiner::BOTH;
const HardExampleMiner_LossType HardExampleMiner::CLASSIFICATION;
const HardExampleMiner_LossType HardExampleMiner::LOCALIZATION;
const HardExampleMiner_LossType HardExampleMiner::LossType_MIN;
const HardExampleMiner_LossType HardExampleMiner::LossType_MAX;
const int HardExampleMiner::LossType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Loss_EqualizationLoss::kWeightFieldNumber;
const int Loss_EqualizationLoss::kExcludePrefixesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Loss_EqualizationLoss::Loss_EqualizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Loss.EqualizationLoss)
}
Loss_EqualizationLoss::Loss_EqualizationLoss(const Loss_EqualizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      exclude_prefixes_(from.exclude_prefixes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Loss.EqualizationLoss)
}

void Loss_EqualizationLoss::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
}

Loss_EqualizationLoss::~Loss_EqualizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Loss.EqualizationLoss)
  SharedDtor();
}

void Loss_EqualizationLoss::SharedDtor() {
}

void Loss_EqualizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Loss_EqualizationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Loss_EqualizationLoss& Loss_EqualizationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

Loss_EqualizationLoss* Loss_EqualizationLoss::New(::google::protobuf::Arena* arena) const {
  Loss_EqualizationLoss* n = new Loss_EqualizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Loss_EqualizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Loss.EqualizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exclude_prefixes_.Clear();
  weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Loss_EqualizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Loss.EqualizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float weight = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_prefixes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exclude_prefixes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exclude_prefixes(this->exclude_prefixes_size() - 1).data(),
            static_cast<int>(this->exclude_prefixes(this->exclude_prefixes_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Loss.EqualizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Loss.EqualizationLoss)
  return false;
#undef DO_
}

void Loss_EqualizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Loss.EqualizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->weight(), output);
  }

  // repeated string exclude_prefixes = 2;
  for (int i = 0, n = this->exclude_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exclude_prefixes(i).data(), static_cast<int>(this->exclude_prefixes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exclude_prefixes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Loss.EqualizationLoss)
}

::google::protobuf::uint8* Loss_EqualizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Loss.EqualizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float weight = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->weight(), target);
  }

  // repeated string exclude_prefixes = 2;
  for (int i = 0, n = this->exclude_prefixes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exclude_prefixes(i).data(), static_cast<int>(this->exclude_prefixes(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.Loss.EqualizationLoss.exclude_prefixes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->exclude_prefixes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Loss.EqualizationLoss)
  return target;
}

size_t Loss_EqualizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Loss.EqualizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string exclude_prefixes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->exclude_prefixes_size());
  for (int i = 0, n = this->exclude_prefixes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exclude_prefixes(i));
  }

  // optional float weight = 1 [default = 0];
  if (has_weight()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Loss_EqualizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Loss.EqualizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const Loss_EqualizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Loss_EqualizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Loss.EqualizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Loss.EqualizationLoss)
    MergeFrom(*source);
  }
}

void Loss_EqualizationLoss::MergeFrom(const Loss_EqualizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Loss.EqualizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exclude_prefixes_.MergeFrom(from.exclude_prefixes_);
  if (from.has_weight()) {
    set_weight(from.weight());
  }
}

void Loss_EqualizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Loss.EqualizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loss_EqualizationLoss::CopyFrom(const Loss_EqualizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Loss.EqualizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loss_EqualizationLoss::IsInitialized() const {
  return true;
}

void Loss_EqualizationLoss::Swap(Loss_EqualizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Loss_EqualizationLoss::InternalSwap(Loss_EqualizationLoss* other) {
  using std::swap;
  exclude_prefixes_.InternalSwap(&other->exclude_prefixes_);
  swap(weight_, other->weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Loss_EqualizationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Loss_EqualizationLoss

// optional float weight = 1 [default = 0];
bool Loss_EqualizationLoss::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Loss_EqualizationLoss::set_has_weight() {
  _has_bits_[0] |= 0x00000001u;
}
void Loss_EqualizationLoss::clear_has_weight() {
  _has_bits_[0] &= ~0x00000001u;
}
void Loss_EqualizationLoss::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float Loss_EqualizationLoss::weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.EqualizationLoss.weight)
  return weight_;
}
void Loss_EqualizationLoss::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.EqualizationLoss.weight)
}

// repeated string exclude_prefixes = 2;
int Loss_EqualizationLoss::exclude_prefixes_size() const {
  return exclude_prefixes_.size();
}
void Loss_EqualizationLoss::clear_exclude_prefixes() {
  exclude_prefixes_.Clear();
}
const ::std::string& Loss_EqualizationLoss::exclude_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  return exclude_prefixes_.Get(index);
}
::std::string* Loss_EqualizationLoss::mutable_exclude_prefixes(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  return exclude_prefixes_.Mutable(index);
}
void Loss_EqualizationLoss::set_exclude_prefixes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  exclude_prefixes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Loss_EqualizationLoss::set_exclude_prefixes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  exclude_prefixes_.Mutable(index)->assign(std::move(value));
}
#endif
void Loss_EqualizationLoss::set_exclude_prefixes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  exclude_prefixes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
}
void Loss_EqualizationLoss::set_exclude_prefixes(int index, const char* value, size_t size) {
  exclude_prefixes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
}
::std::string* Loss_EqualizationLoss::add_exclude_prefixes() {
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  return exclude_prefixes_.Add();
}
void Loss_EqualizationLoss::add_exclude_prefixes(const ::std::string& value) {
  exclude_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
}
#if LANG_CXX11
void Loss_EqualizationLoss::add_exclude_prefixes(::std::string&& value) {
  exclude_prefixes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
}
#endif
void Loss_EqualizationLoss::add_exclude_prefixes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  exclude_prefixes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
}
void Loss_EqualizationLoss::add_exclude_prefixes(const char* value, size_t size) {
  exclude_prefixes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Loss_EqualizationLoss::exclude_prefixes() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  return exclude_prefixes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Loss_EqualizationLoss::mutable_exclude_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.Loss.EqualizationLoss.exclude_prefixes)
  return &exclude_prefixes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Loss::kLocalizationLossFieldNumber;
const int Loss::kClassificationLossFieldNumber;
const int Loss::kHardExampleMinerFieldNumber;
const int Loss::kClassificationWeightFieldNumber;
const int Loss::kLocalizationWeightFieldNumber;
const int Loss::kRandomExampleSamplerFieldNumber;
const int Loss::kEqualizationLossFieldNumber;
const int Loss::kExpectedLossWeightsFieldNumber;
const int Loss::kMinNumNegativeSamplesFieldNumber;
const int Loss::kDesiredNegativeSamplingRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Loss::Loss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Loss)
}
Loss::Loss(const Loss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_localization_loss()) {
    localization_loss_ = new ::object_detection::protos::LocalizationLoss(*from.localization_loss_);
  } else {
    localization_loss_ = NULL;
  }
  if (from.has_classification_loss()) {
    classification_loss_ = new ::object_detection::protos::ClassificationLoss(*from.classification_loss_);
  } else {
    classification_loss_ = NULL;
  }
  if (from.has_hard_example_miner()) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner(*from.hard_example_miner_);
  } else {
    hard_example_miner_ = NULL;
  }
  if (from.has_random_example_sampler()) {
    random_example_sampler_ = new ::object_detection::protos::RandomExampleSampler(*from.random_example_sampler_);
  } else {
    random_example_sampler_ = NULL;
  }
  if (from.has_equalization_loss()) {
    equalization_loss_ = new ::object_detection::protos::Loss_EqualizationLoss(*from.equalization_loss_);
  } else {
    equalization_loss_ = NULL;
  }
  ::memcpy(&expected_loss_weights_, &from.expected_loss_weights_,
    static_cast<size_t>(reinterpret_cast<char*>(&localization_weight_) -
    reinterpret_cast<char*>(&expected_loss_weights_)) + sizeof(localization_weight_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Loss)
}

void Loss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&localization_loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_num_negative_samples_) -
      reinterpret_cast<char*>(&localization_loss_)) + sizeof(min_num_negative_samples_));
  desired_negative_sampling_ratio_ = 3;
  classification_weight_ = 1;
  localization_weight_ = 1;
}

Loss::~Loss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Loss)
  SharedDtor();
}

void Loss::SharedDtor() {
  if (this != internal_default_instance()) delete localization_loss_;
  if (this != internal_default_instance()) delete classification_loss_;
  if (this != internal_default_instance()) delete hard_example_miner_;
  if (this != internal_default_instance()) delete random_example_sampler_;
  if (this != internal_default_instance()) delete equalization_loss_;
}

void Loss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Loss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Loss& Loss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

Loss* Loss::New(::google::protobuf::Arena* arena) const {
  Loss* n = new Loss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Loss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Loss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(localization_loss_ != NULL);
      localization_loss_->::object_detection::protos::LocalizationLoss::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(classification_loss_ != NULL);
      classification_loss_->::object_detection::protos::ClassificationLoss::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hard_example_miner_ != NULL);
      hard_example_miner_->::object_detection::protos::HardExampleMiner::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(random_example_sampler_ != NULL);
      random_example_sampler_->::object_detection::protos::RandomExampleSampler::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(equalization_loss_ != NULL);
      equalization_loss_->::object_detection::protos::Loss_EqualizationLoss::Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&expected_loss_weights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_num_negative_samples_) -
        reinterpret_cast<char*>(&expected_loss_weights_)) + sizeof(min_num_negative_samples_));
    desired_negative_sampling_ratio_ = 3;
  }
  if (cached_has_bits & 768u) {
    classification_weight_ = 1;
    localization_weight_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Loss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Loss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_classification_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_example_miner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float classification_weight = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_classification_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &classification_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float localization_weight = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_localization_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &localization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_example_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equalization_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::Loss_ExpectedLossWeights_IsValid(value)) {
            set_expected_loss_weights(static_cast< ::object_detection::protos::Loss_ExpectedLossWeights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_num_negative_samples = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_min_num_negative_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_num_negative_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desired_negative_sampling_ratio = 20 [default = 3];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_desired_negative_sampling_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_negative_sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Loss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Loss)
  return false;
#undef DO_
}

void Loss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Loss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->localization_loss_, output);
  }

  // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->classification_loss_, output);
  }

  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hard_example_miner_, output);
  }

  // optional float classification_weight = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->classification_weight(), output);
  }

  // optional float localization_weight = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->localization_weight(), output);
  }

  // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->random_example_sampler_, output);
  }

  // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->equalization_loss_, output);
  }

  // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->expected_loss_weights(), output);
  }

  // optional float min_num_negative_samples = 19 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->min_num_negative_samples(), output);
  }

  // optional float desired_negative_sampling_ratio = 20 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->desired_negative_sampling_ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Loss)
}

::google::protobuf::uint8* Loss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Loss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->localization_loss_, deterministic, target);
  }

  // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->classification_loss_, deterministic, target);
  }

  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->hard_example_miner_, deterministic, target);
  }

  // optional float classification_weight = 4 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->classification_weight(), target);
  }

  // optional float localization_weight = 5 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->localization_weight(), target);
  }

  // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->random_example_sampler_, deterministic, target);
  }

  // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->equalization_loss_, deterministic, target);
  }

  // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->expected_loss_weights(), target);
  }

  // optional float min_num_negative_samples = 19 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->min_num_negative_samples(), target);
  }

  // optional float desired_negative_sampling_ratio = 20 [default = 3];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->desired_negative_sampling_ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Loss)
  return target;
}

size_t Loss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Loss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.LocalizationLoss localization_loss = 1;
    if (has_localization_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_loss_);
    }

    // optional .object_detection.protos.ClassificationLoss classification_loss = 2;
    if (has_classification_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->classification_loss_);
    }

    // optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
    if (has_hard_example_miner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hard_example_miner_);
    }

    // optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
    if (has_random_example_sampler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->random_example_sampler_);
    }

    // optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
    if (has_equalization_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->equalization_loss_);
    }

    // optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
    if (has_expected_loss_weights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expected_loss_weights());
    }

    // optional float min_num_negative_samples = 19 [default = 0];
    if (has_min_num_negative_samples()) {
      total_size += 2 + 4;
    }

    // optional float desired_negative_sampling_ratio = 20 [default = 3];
    if (has_desired_negative_sampling_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float classification_weight = 4 [default = 1];
    if (has_classification_weight()) {
      total_size += 1 + 4;
    }

    // optional float localization_weight = 5 [default = 1];
    if (has_localization_weight()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Loss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  const Loss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Loss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Loss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Loss)
    MergeFrom(*source);
  }
}

void Loss::MergeFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Loss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_localization_loss()->::object_detection::protos::LocalizationLoss::MergeFrom(from.localization_loss());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_classification_loss()->::object_detection::protos::ClassificationLoss::MergeFrom(from.classification_loss());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_hard_example_miner()->::object_detection::protos::HardExampleMiner::MergeFrom(from.hard_example_miner());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_random_example_sampler()->::object_detection::protos::RandomExampleSampler::MergeFrom(from.random_example_sampler());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_equalization_loss()->::object_detection::protos::Loss_EqualizationLoss::MergeFrom(from.equalization_loss());
    }
    if (cached_has_bits & 0x00000020u) {
      expected_loss_weights_ = from.expected_loss_weights_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_num_negative_samples_ = from.min_num_negative_samples_;
    }
    if (cached_has_bits & 0x00000080u) {
      desired_negative_sampling_ratio_ = from.desired_negative_sampling_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      classification_weight_ = from.classification_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      localization_weight_ = from.localization_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Loss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Loss::CopyFrom(const Loss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Loss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loss::IsInitialized() const {
  return true;
}

void Loss::Swap(Loss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Loss::InternalSwap(Loss* other) {
  using std::swap;
  swap(localization_loss_, other->localization_loss_);
  swap(classification_loss_, other->classification_loss_);
  swap(hard_example_miner_, other->hard_example_miner_);
  swap(random_example_sampler_, other->random_example_sampler_);
  swap(equalization_loss_, other->equalization_loss_);
  swap(expected_loss_weights_, other->expected_loss_weights_);
  swap(min_num_negative_samples_, other->min_num_negative_samples_);
  swap(desired_negative_sampling_ratio_, other->desired_negative_sampling_ratio_);
  swap(classification_weight_, other->classification_weight_);
  swap(localization_weight_, other->localization_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Loss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Loss

// optional .object_detection.protos.LocalizationLoss localization_loss = 1;
bool Loss::has_localization_loss() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Loss::set_has_localization_loss() {
  _has_bits_[0] |= 0x00000001u;
}
void Loss::clear_has_localization_loss() {
  _has_bits_[0] &= ~0x00000001u;
}
void Loss::clear_localization_loss() {
  if (localization_loss_ != NULL) localization_loss_->::object_detection::protos::LocalizationLoss::Clear();
  clear_has_localization_loss();
}
const ::object_detection::protos::LocalizationLoss& Loss::localization_loss() const {
  const ::object_detection::protos::LocalizationLoss* p = localization_loss_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.localization_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::LocalizationLoss*>(
      &::object_detection::protos::_LocalizationLoss_default_instance_);
}
::object_detection::protos::LocalizationLoss* Loss::mutable_localization_loss() {
  set_has_localization_loss();
  if (localization_loss_ == NULL) {
    localization_loss_ = new ::object_detection::protos::LocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Loss.localization_loss)
  return localization_loss_;
}
::object_detection::protos::LocalizationLoss* Loss::release_localization_loss() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Loss.localization_loss)
  clear_has_localization_loss();
  ::object_detection::protos::LocalizationLoss* temp = localization_loss_;
  localization_loss_ = NULL;
  return temp;
}
void Loss::set_allocated_localization_loss(::object_detection::protos::LocalizationLoss* localization_loss) {
  delete localization_loss_;
  localization_loss_ = localization_loss;
  if (localization_loss) {
    set_has_localization_loss();
  } else {
    clear_has_localization_loss();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Loss.localization_loss)
}

// optional .object_detection.protos.ClassificationLoss classification_loss = 2;
bool Loss::has_classification_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Loss::set_has_classification_loss() {
  _has_bits_[0] |= 0x00000002u;
}
void Loss::clear_has_classification_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
void Loss::clear_classification_loss() {
  if (classification_loss_ != NULL) classification_loss_->::object_detection::protos::ClassificationLoss::Clear();
  clear_has_classification_loss();
}
const ::object_detection::protos::ClassificationLoss& Loss::classification_loss() const {
  const ::object_detection::protos::ClassificationLoss* p = classification_loss_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.classification_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ClassificationLoss*>(
      &::object_detection::protos::_ClassificationLoss_default_instance_);
}
::object_detection::protos::ClassificationLoss* Loss::mutable_classification_loss() {
  set_has_classification_loss();
  if (classification_loss_ == NULL) {
    classification_loss_ = new ::object_detection::protos::ClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Loss.classification_loss)
  return classification_loss_;
}
::object_detection::protos::ClassificationLoss* Loss::release_classification_loss() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Loss.classification_loss)
  clear_has_classification_loss();
  ::object_detection::protos::ClassificationLoss* temp = classification_loss_;
  classification_loss_ = NULL;
  return temp;
}
void Loss::set_allocated_classification_loss(::object_detection::protos::ClassificationLoss* classification_loss) {
  delete classification_loss_;
  classification_loss_ = classification_loss;
  if (classification_loss) {
    set_has_classification_loss();
  } else {
    clear_has_classification_loss();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Loss.classification_loss)
}

// optional .object_detection.protos.HardExampleMiner hard_example_miner = 3;
bool Loss::has_hard_example_miner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Loss::set_has_hard_example_miner() {
  _has_bits_[0] |= 0x00000004u;
}
void Loss::clear_has_hard_example_miner() {
  _has_bits_[0] &= ~0x00000004u;
}
void Loss::clear_hard_example_miner() {
  if (hard_example_miner_ != NULL) hard_example_miner_->::object_detection::protos::HardExampleMiner::Clear();
  clear_has_hard_example_miner();
}
const ::object_detection::protos::HardExampleMiner& Loss::hard_example_miner() const {
  const ::object_detection::protos::HardExampleMiner* p = hard_example_miner_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.hard_example_miner)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::HardExampleMiner*>(
      &::object_detection::protos::_HardExampleMiner_default_instance_);
}
::object_detection::protos::HardExampleMiner* Loss::mutable_hard_example_miner() {
  set_has_hard_example_miner();
  if (hard_example_miner_ == NULL) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Loss.hard_example_miner)
  return hard_example_miner_;
}
::object_detection::protos::HardExampleMiner* Loss::release_hard_example_miner() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Loss.hard_example_miner)
  clear_has_hard_example_miner();
  ::object_detection::protos::HardExampleMiner* temp = hard_example_miner_;
  hard_example_miner_ = NULL;
  return temp;
}
void Loss::set_allocated_hard_example_miner(::object_detection::protos::HardExampleMiner* hard_example_miner) {
  delete hard_example_miner_;
  hard_example_miner_ = hard_example_miner;
  if (hard_example_miner) {
    set_has_hard_example_miner();
  } else {
    clear_has_hard_example_miner();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Loss.hard_example_miner)
}

// optional float classification_weight = 4 [default = 1];
bool Loss::has_classification_weight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Loss::set_has_classification_weight() {
  _has_bits_[0] |= 0x00000100u;
}
void Loss::clear_has_classification_weight() {
  _has_bits_[0] &= ~0x00000100u;
}
void Loss::clear_classification_weight() {
  classification_weight_ = 1;
  clear_has_classification_weight();
}
float Loss::classification_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.classification_weight)
  return classification_weight_;
}
void Loss::set_classification_weight(float value) {
  set_has_classification_weight();
  classification_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.classification_weight)
}

// optional float localization_weight = 5 [default = 1];
bool Loss::has_localization_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Loss::set_has_localization_weight() {
  _has_bits_[0] |= 0x00000200u;
}
void Loss::clear_has_localization_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
void Loss::clear_localization_weight() {
  localization_weight_ = 1;
  clear_has_localization_weight();
}
float Loss::localization_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.localization_weight)
  return localization_weight_;
}
void Loss::set_localization_weight(float value) {
  set_has_localization_weight();
  localization_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.localization_weight)
}

// optional .object_detection.protos.RandomExampleSampler random_example_sampler = 6;
bool Loss::has_random_example_sampler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Loss::set_has_random_example_sampler() {
  _has_bits_[0] |= 0x00000008u;
}
void Loss::clear_has_random_example_sampler() {
  _has_bits_[0] &= ~0x00000008u;
}
void Loss::clear_random_example_sampler() {
  if (random_example_sampler_ != NULL) random_example_sampler_->::object_detection::protos::RandomExampleSampler::Clear();
  clear_has_random_example_sampler();
}
const ::object_detection::protos::RandomExampleSampler& Loss::random_example_sampler() const {
  const ::object_detection::protos::RandomExampleSampler* p = random_example_sampler_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.random_example_sampler)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::RandomExampleSampler*>(
      &::object_detection::protos::_RandomExampleSampler_default_instance_);
}
::object_detection::protos::RandomExampleSampler* Loss::mutable_random_example_sampler() {
  set_has_random_example_sampler();
  if (random_example_sampler_ == NULL) {
    random_example_sampler_ = new ::object_detection::protos::RandomExampleSampler;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Loss.random_example_sampler)
  return random_example_sampler_;
}
::object_detection::protos::RandomExampleSampler* Loss::release_random_example_sampler() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Loss.random_example_sampler)
  clear_has_random_example_sampler();
  ::object_detection::protos::RandomExampleSampler* temp = random_example_sampler_;
  random_example_sampler_ = NULL;
  return temp;
}
void Loss::set_allocated_random_example_sampler(::object_detection::protos::RandomExampleSampler* random_example_sampler) {
  delete random_example_sampler_;
  random_example_sampler_ = random_example_sampler;
  if (random_example_sampler) {
    set_has_random_example_sampler();
  } else {
    clear_has_random_example_sampler();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Loss.random_example_sampler)
}

// optional .object_detection.protos.Loss.EqualizationLoss equalization_loss = 7;
bool Loss::has_equalization_loss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Loss::set_has_equalization_loss() {
  _has_bits_[0] |= 0x00000010u;
}
void Loss::clear_has_equalization_loss() {
  _has_bits_[0] &= ~0x00000010u;
}
void Loss::clear_equalization_loss() {
  if (equalization_loss_ != NULL) equalization_loss_->::object_detection::protos::Loss_EqualizationLoss::Clear();
  clear_has_equalization_loss();
}
const ::object_detection::protos::Loss_EqualizationLoss& Loss::equalization_loss() const {
  const ::object_detection::protos::Loss_EqualizationLoss* p = equalization_loss_;
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.equalization_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Loss_EqualizationLoss*>(
      &::object_detection::protos::_Loss_EqualizationLoss_default_instance_);
}
::object_detection::protos::Loss_EqualizationLoss* Loss::mutable_equalization_loss() {
  set_has_equalization_loss();
  if (equalization_loss_ == NULL) {
    equalization_loss_ = new ::object_detection::protos::Loss_EqualizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Loss.equalization_loss)
  return equalization_loss_;
}
::object_detection::protos::Loss_EqualizationLoss* Loss::release_equalization_loss() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Loss.equalization_loss)
  clear_has_equalization_loss();
  ::object_detection::protos::Loss_EqualizationLoss* temp = equalization_loss_;
  equalization_loss_ = NULL;
  return temp;
}
void Loss::set_allocated_equalization_loss(::object_detection::protos::Loss_EqualizationLoss* equalization_loss) {
  delete equalization_loss_;
  equalization_loss_ = equalization_loss;
  if (equalization_loss) {
    set_has_equalization_loss();
  } else {
    clear_has_equalization_loss();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Loss.equalization_loss)
}

// optional .object_detection.protos.Loss.ExpectedLossWeights expected_loss_weights = 18 [default = NONE];
bool Loss::has_expected_loss_weights() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Loss::set_has_expected_loss_weights() {
  _has_bits_[0] |= 0x00000020u;
}
void Loss::clear_has_expected_loss_weights() {
  _has_bits_[0] &= ~0x00000020u;
}
void Loss::clear_expected_loss_weights() {
  expected_loss_weights_ = 0;
  clear_has_expected_loss_weights();
}
::object_detection::protos::Loss_ExpectedLossWeights Loss::expected_loss_weights() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.expected_loss_weights)
  return static_cast< ::object_detection::protos::Loss_ExpectedLossWeights >(expected_loss_weights_);
}
void Loss::set_expected_loss_weights(::object_detection::protos::Loss_ExpectedLossWeights value) {
  assert(::object_detection::protos::Loss_ExpectedLossWeights_IsValid(value));
  set_has_expected_loss_weights();
  expected_loss_weights_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.expected_loss_weights)
}

// optional float min_num_negative_samples = 19 [default = 0];
bool Loss::has_min_num_negative_samples() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Loss::set_has_min_num_negative_samples() {
  _has_bits_[0] |= 0x00000040u;
}
void Loss::clear_has_min_num_negative_samples() {
  _has_bits_[0] &= ~0x00000040u;
}
void Loss::clear_min_num_negative_samples() {
  min_num_negative_samples_ = 0;
  clear_has_min_num_negative_samples();
}
float Loss::min_num_negative_samples() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.min_num_negative_samples)
  return min_num_negative_samples_;
}
void Loss::set_min_num_negative_samples(float value) {
  set_has_min_num_negative_samples();
  min_num_negative_samples_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.min_num_negative_samples)
}

// optional float desired_negative_sampling_ratio = 20 [default = 3];
bool Loss::has_desired_negative_sampling_ratio() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Loss::set_has_desired_negative_sampling_ratio() {
  _has_bits_[0] |= 0x00000080u;
}
void Loss::clear_has_desired_negative_sampling_ratio() {
  _has_bits_[0] &= ~0x00000080u;
}
void Loss::clear_desired_negative_sampling_ratio() {
  desired_negative_sampling_ratio_ = 3;
  clear_has_desired_negative_sampling_ratio();
}
float Loss::desired_negative_sampling_ratio() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Loss.desired_negative_sampling_ratio)
  return desired_negative_sampling_ratio_;
}
void Loss::set_desired_negative_sampling_ratio(float value) {
  set_has_desired_negative_sampling_ratio();
  desired_negative_sampling_ratio_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.Loss.desired_negative_sampling_ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationLoss::kWeightedL2FieldNumber;
const int LocalizationLoss::kWeightedSmoothL1FieldNumber;
const int LocalizationLoss::kWeightedIouFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationLoss::LocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.LocalizationLoss)
}
LocalizationLoss::LocalizationLoss(const LocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_localization_loss();
  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::object_detection::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::object_detection::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case kWeightedIou: {
      mutable_weighted_iou()->::object_detection::protos::WeightedIOULocalizationLoss::MergeFrom(from.weighted_iou());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.LocalizationLoss)
}

void LocalizationLoss::SharedCtor() {
  _cached_size_ = 0;
  clear_has_localization_loss();
}

LocalizationLoss::~LocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.LocalizationLoss)
  SharedDtor();
}

void LocalizationLoss::SharedDtor() {
  if (has_localization_loss()) {
    clear_localization_loss();
  }
}

void LocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationLoss& LocalizationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationLoss* LocalizationLoss::New(::google::protobuf::Arena* arena) const {
  LocalizationLoss* n = new LocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationLoss::clear_localization_loss() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.LocalizationLoss)
  switch (localization_loss_case()) {
    case kWeightedL2: {
      delete localization_loss_.weighted_l2_;
      break;
    }
    case kWeightedSmoothL1: {
      delete localization_loss_.weighted_smooth_l1_;
      break;
    }
    case kWeightedIou: {
      delete localization_loss_.weighted_iou_;
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOCALIZATION_LOSS_NOT_SET;
}


void LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_localization_loss();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.LocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_l2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_smooth_l1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedIOULocalizationLoss weighted_iou = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_iou()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.LocalizationLoss)
  return false;
#undef DO_
}

void LocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (localization_loss_case()) {
    case kWeightedL2:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *localization_loss_.weighted_l2_, output);
      break;
    case kWeightedSmoothL1:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *localization_loss_.weighted_smooth_l1_, output);
      break;
    case kWeightedIou:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *localization_loss_.weighted_iou_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.LocalizationLoss)
}

::google::protobuf::uint8* LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (localization_loss_case()) {
    case kWeightedL2:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *localization_loss_.weighted_l2_, deterministic, target);
      break;
    case kWeightedSmoothL1:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *localization_loss_.weighted_smooth_l1_, deterministic, target);
      break;
    case kWeightedIou:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *localization_loss_.weighted_iou_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.LocalizationLoss)
  return target;
}

size_t LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (localization_loss_case()) {
    // optional .object_detection.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
    case kWeightedL2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *localization_loss_.weighted_l2_);
      break;
    }
    // optional .object_detection.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
    case kWeightedSmoothL1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *localization_loss_.weighted_smooth_l1_);
      break;
    }
    // optional .object_detection.protos.WeightedIOULocalizationLoss weighted_iou = 3;
    case kWeightedIou: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *localization_loss_.weighted_iou_);
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.LocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.LocalizationLoss)
    MergeFrom(*source);
  }
}

void LocalizationLoss::MergeFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.localization_loss_case()) {
    case kWeightedL2: {
      mutable_weighted_l2()->::object_detection::protos::WeightedL2LocalizationLoss::MergeFrom(from.weighted_l2());
      break;
    }
    case kWeightedSmoothL1: {
      mutable_weighted_smooth_l1()->::object_detection::protos::WeightedSmoothL1LocalizationLoss::MergeFrom(from.weighted_smooth_l1());
      break;
    }
    case kWeightedIou: {
      mutable_weighted_iou()->::object_detection::protos::WeightedIOULocalizationLoss::MergeFrom(from.weighted_iou());
      break;
    }
    case LOCALIZATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void LocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationLoss::CopyFrom(const LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationLoss::IsInitialized() const {
  return true;
}

void LocalizationLoss::Swap(LocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationLoss::InternalSwap(LocalizationLoss* other) {
  using std::swap;
  swap(localization_loss_, other->localization_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationLoss

// optional .object_detection.protos.WeightedL2LocalizationLoss weighted_l2 = 1;
bool LocalizationLoss::has_weighted_l2() const {
  return localization_loss_case() == kWeightedL2;
}
void LocalizationLoss::set_has_weighted_l2() {
  _oneof_case_[0] = kWeightedL2;
}
void LocalizationLoss::clear_weighted_l2() {
  if (has_weighted_l2()) {
    delete localization_loss_.weighted_l2_;
    clear_has_localization_loss();
  }
}
 const ::object_detection::protos::WeightedL2LocalizationLoss& LocalizationLoss::weighted_l2() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.LocalizationLoss.weighted_l2)
  return has_weighted_l2()
      ? *localization_loss_.weighted_l2_
      : ::object_detection::protos::WeightedL2LocalizationLoss::default_instance();
}
::object_detection::protos::WeightedL2LocalizationLoss* LocalizationLoss::mutable_weighted_l2() {
  if (!has_weighted_l2()) {
    clear_localization_loss();
    set_has_weighted_l2();
    localization_loss_.weighted_l2_ = new ::object_detection::protos::WeightedL2LocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.LocalizationLoss.weighted_l2)
  return localization_loss_.weighted_l2_;
}
::object_detection::protos::WeightedL2LocalizationLoss* LocalizationLoss::release_weighted_l2() {
  // @@protoc_insertion_point(field_release:object_detection.protos.LocalizationLoss.weighted_l2)
  if (has_weighted_l2()) {
    clear_has_localization_loss();
    ::object_detection::protos::WeightedL2LocalizationLoss* temp = localization_loss_.weighted_l2_;
    localization_loss_.weighted_l2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalizationLoss::set_allocated_weighted_l2(::object_detection::protos::WeightedL2LocalizationLoss* weighted_l2) {
  clear_localization_loss();
  if (weighted_l2) {
    set_has_weighted_l2();
    localization_loss_.weighted_l2_ = weighted_l2;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LocalizationLoss.weighted_l2)
}

// optional .object_detection.protos.WeightedSmoothL1LocalizationLoss weighted_smooth_l1 = 2;
bool LocalizationLoss::has_weighted_smooth_l1() const {
  return localization_loss_case() == kWeightedSmoothL1;
}
void LocalizationLoss::set_has_weighted_smooth_l1() {
  _oneof_case_[0] = kWeightedSmoothL1;
}
void LocalizationLoss::clear_weighted_smooth_l1() {
  if (has_weighted_smooth_l1()) {
    delete localization_loss_.weighted_smooth_l1_;
    clear_has_localization_loss();
  }
}
 const ::object_detection::protos::WeightedSmoothL1LocalizationLoss& LocalizationLoss::weighted_smooth_l1() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.LocalizationLoss.weighted_smooth_l1)
  return has_weighted_smooth_l1()
      ? *localization_loss_.weighted_smooth_l1_
      : ::object_detection::protos::WeightedSmoothL1LocalizationLoss::default_instance();
}
::object_detection::protos::WeightedSmoothL1LocalizationLoss* LocalizationLoss::mutable_weighted_smooth_l1() {
  if (!has_weighted_smooth_l1()) {
    clear_localization_loss();
    set_has_weighted_smooth_l1();
    localization_loss_.weighted_smooth_l1_ = new ::object_detection::protos::WeightedSmoothL1LocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.LocalizationLoss.weighted_smooth_l1)
  return localization_loss_.weighted_smooth_l1_;
}
::object_detection::protos::WeightedSmoothL1LocalizationLoss* LocalizationLoss::release_weighted_smooth_l1() {
  // @@protoc_insertion_point(field_release:object_detection.protos.LocalizationLoss.weighted_smooth_l1)
  if (has_weighted_smooth_l1()) {
    clear_has_localization_loss();
    ::object_detection::protos::WeightedSmoothL1LocalizationLoss* temp = localization_loss_.weighted_smooth_l1_;
    localization_loss_.weighted_smooth_l1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalizationLoss::set_allocated_weighted_smooth_l1(::object_detection::protos::WeightedSmoothL1LocalizationLoss* weighted_smooth_l1) {
  clear_localization_loss();
  if (weighted_smooth_l1) {
    set_has_weighted_smooth_l1();
    localization_loss_.weighted_smooth_l1_ = weighted_smooth_l1;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LocalizationLoss.weighted_smooth_l1)
}

// optional .object_detection.protos.WeightedIOULocalizationLoss weighted_iou = 3;
bool LocalizationLoss::has_weighted_iou() const {
  return localization_loss_case() == kWeightedIou;
}
void LocalizationLoss::set_has_weighted_iou() {
  _oneof_case_[0] = kWeightedIou;
}
void LocalizationLoss::clear_weighted_iou() {
  if (has_weighted_iou()) {
    delete localization_loss_.weighted_iou_;
    clear_has_localization_loss();
  }
}
 const ::object_detection::protos::WeightedIOULocalizationLoss& LocalizationLoss::weighted_iou() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.LocalizationLoss.weighted_iou)
  return has_weighted_iou()
      ? *localization_loss_.weighted_iou_
      : ::object_detection::protos::WeightedIOULocalizationLoss::default_instance();
}
::object_detection::protos::WeightedIOULocalizationLoss* LocalizationLoss::mutable_weighted_iou() {
  if (!has_weighted_iou()) {
    clear_localization_loss();
    set_has_weighted_iou();
    localization_loss_.weighted_iou_ = new ::object_detection::protos::WeightedIOULocalizationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.LocalizationLoss.weighted_iou)
  return localization_loss_.weighted_iou_;
}
::object_detection::protos::WeightedIOULocalizationLoss* LocalizationLoss::release_weighted_iou() {
  // @@protoc_insertion_point(field_release:object_detection.protos.LocalizationLoss.weighted_iou)
  if (has_weighted_iou()) {
    clear_has_localization_loss();
    ::object_detection::protos::WeightedIOULocalizationLoss* temp = localization_loss_.weighted_iou_;
    localization_loss_.weighted_iou_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void LocalizationLoss::set_allocated_weighted_iou(::object_detection::protos::WeightedIOULocalizationLoss* weighted_iou) {
  clear_localization_loss();
  if (weighted_iou) {
    set_has_weighted_iou();
    localization_loss_.weighted_iou_ = weighted_iou;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.LocalizationLoss.weighted_iou)
}

bool LocalizationLoss::has_localization_loss() const {
  return localization_loss_case() != LOCALIZATION_LOSS_NOT_SET;
}
void LocalizationLoss::clear_has_localization_loss() {
  _oneof_case_[0] = LOCALIZATION_LOSS_NOT_SET;
}
LocalizationLoss::LocalizationLossCase LocalizationLoss::localization_loss_case() const {
  return LocalizationLoss::LocalizationLossCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedL2LocalizationLoss::kAnchorwiseOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedL2LocalizationLoss::WeightedL2LocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedL2LocalizationLoss)
}
WeightedL2LocalizationLoss::WeightedL2LocalizationLoss(const WeightedL2LocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedL2LocalizationLoss)
}

void WeightedL2LocalizationLoss::SharedCtor() {
  _cached_size_ = 0;
  anchorwise_output_ = false;
}

WeightedL2LocalizationLoss::~WeightedL2LocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedL2LocalizationLoss)
  SharedDtor();
}

void WeightedL2LocalizationLoss::SharedDtor() {
}

void WeightedL2LocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedL2LocalizationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedL2LocalizationLoss& WeightedL2LocalizationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedL2LocalizationLoss* WeightedL2LocalizationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedL2LocalizationLoss* n = new WeightedL2LocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedL2LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedL2LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorwise_output_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightedL2LocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedL2LocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedL2LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedL2LocalizationLoss)
  return false;
#undef DO_
}

void WeightedL2LocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedL2LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedL2LocalizationLoss)
}

::google::protobuf::uint8* WeightedL2LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedL2LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedL2LocalizationLoss)
  return target;
}

size_t WeightedL2LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedL2LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool anchorwise_output = 1 [default = false];
  if (has_anchorwise_output()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedL2LocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedL2LocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedL2LocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedL2LocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedL2LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedL2LocalizationLoss::MergeFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anchorwise_output()) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedL2LocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedL2LocalizationLoss::CopyFrom(const WeightedL2LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedL2LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedL2LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedL2LocalizationLoss::Swap(WeightedL2LocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedL2LocalizationLoss::InternalSwap(WeightedL2LocalizationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedL2LocalizationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedL2LocalizationLoss

// optional bool anchorwise_output = 1 [default = false];
bool WeightedL2LocalizationLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightedL2LocalizationLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightedL2LocalizationLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightedL2LocalizationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool WeightedL2LocalizationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedL2LocalizationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedL2LocalizationLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedL2LocalizationLoss.anchorwise_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSmoothL1LocalizationLoss::kAnchorwiseOutputFieldNumber;
const int WeightedSmoothL1LocalizationLoss::kDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSmoothL1LocalizationLoss)
}
WeightedSmoothL1LocalizationLoss::WeightedSmoothL1LocalizationLoss(const WeightedSmoothL1LocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(delta_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSmoothL1LocalizationLoss)
}

void WeightedSmoothL1LocalizationLoss::SharedCtor() {
  _cached_size_ = 0;
  anchorwise_output_ = false;
  delta_ = 1;
}

WeightedSmoothL1LocalizationLoss::~WeightedSmoothL1LocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  SharedDtor();
}

void WeightedSmoothL1LocalizationLoss::SharedDtor() {
}

void WeightedSmoothL1LocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSmoothL1LocalizationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSmoothL1LocalizationLoss& WeightedSmoothL1LocalizationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSmoothL1LocalizationLoss* WeightedSmoothL1LocalizationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSmoothL1LocalizationLoss* n = new WeightedSmoothL1LocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSmoothL1LocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    anchorwise_output_ = false;
    delta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightedSmoothL1LocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  return false;
#undef DO_
}

void WeightedSmoothL1LocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float delta = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSmoothL1LocalizationLoss)
}

::google::protobuf::uint8* WeightedSmoothL1LocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float delta = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  return target;
}

size_t WeightedSmoothL1LocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (has_anchorwise_output()) {
      total_size += 1 + 1;
    }

    // optional float delta = 2 [default = 1];
    if (has_delta()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSmoothL1LocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSmoothL1LocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSmoothL1LocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSmoothL1LocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedSmoothL1LocalizationLoss::MergeFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_ = from.delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSmoothL1LocalizationLoss::CopyFrom(const WeightedSmoothL1LocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSmoothL1LocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSmoothL1LocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedSmoothL1LocalizationLoss::Swap(WeightedSmoothL1LocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSmoothL1LocalizationLoss::InternalSwap(WeightedSmoothL1LocalizationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(delta_, other->delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSmoothL1LocalizationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSmoothL1LocalizationLoss

// optional bool anchorwise_output = 1 [default = false];
bool WeightedSmoothL1LocalizationLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightedSmoothL1LocalizationLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightedSmoothL1LocalizationLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightedSmoothL1LocalizationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool WeightedSmoothL1LocalizationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSmoothL1LocalizationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSmoothL1LocalizationLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSmoothL1LocalizationLoss.anchorwise_output)
}

// optional float delta = 2 [default = 1];
bool WeightedSmoothL1LocalizationLoss::has_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeightedSmoothL1LocalizationLoss::set_has_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void WeightedSmoothL1LocalizationLoss::clear_has_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeightedSmoothL1LocalizationLoss::clear_delta() {
  delta_ = 1;
  clear_has_delta();
}
float WeightedSmoothL1LocalizationLoss::delta() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSmoothL1LocalizationLoss.delta)
  return delta_;
}
void WeightedSmoothL1LocalizationLoss::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSmoothL1LocalizationLoss.delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedIOULocalizationLoss::WeightedIOULocalizationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedIOULocalizationLoss)
}
WeightedIOULocalizationLoss::WeightedIOULocalizationLoss(const WeightedIOULocalizationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedIOULocalizationLoss)
}

void WeightedIOULocalizationLoss::SharedCtor() {
  _cached_size_ = 0;
}

WeightedIOULocalizationLoss::~WeightedIOULocalizationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedIOULocalizationLoss)
  SharedDtor();
}

void WeightedIOULocalizationLoss::SharedDtor() {
}

void WeightedIOULocalizationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedIOULocalizationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedIOULocalizationLoss& WeightedIOULocalizationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedIOULocalizationLoss* WeightedIOULocalizationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedIOULocalizationLoss* n = new WeightedIOULocalizationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedIOULocalizationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedIOULocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightedIOULocalizationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedIOULocalizationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedIOULocalizationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedIOULocalizationLoss)
  return false;
#undef DO_
}

void WeightedIOULocalizationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedIOULocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedIOULocalizationLoss)
}

::google::protobuf::uint8* WeightedIOULocalizationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedIOULocalizationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedIOULocalizationLoss)
  return target;
}

size_t WeightedIOULocalizationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedIOULocalizationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedIOULocalizationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedIOULocalizationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedIOULocalizationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedIOULocalizationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedIOULocalizationLoss)
    MergeFrom(*source);
  }
}

void WeightedIOULocalizationLoss::MergeFrom(const WeightedIOULocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WeightedIOULocalizationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedIOULocalizationLoss::CopyFrom(const WeightedIOULocalizationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedIOULocalizationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedIOULocalizationLoss::IsInitialized() const {
  return true;
}

void WeightedIOULocalizationLoss::Swap(WeightedIOULocalizationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedIOULocalizationLoss::InternalSwap(WeightedIOULocalizationLoss* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedIOULocalizationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedIOULocalizationLoss

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClassificationLoss::kWeightedSigmoidFieldNumber;
const int ClassificationLoss::kWeightedSoftmaxFieldNumber;
const int ClassificationLoss::kWeightedLogitsSoftmaxFieldNumber;
const int ClassificationLoss::kBootstrappedSigmoidFieldNumber;
const int ClassificationLoss::kWeightedSigmoidFocalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClassificationLoss::ClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ClassificationLoss)
}
ClassificationLoss::ClassificationLoss(const ClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_classification_loss();
  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::object_detection::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::object_detection::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kWeightedLogitsSoftmax: {
      mutable_weighted_logits_softmax()->::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(from.weighted_logits_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::object_detection::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::object_detection::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ClassificationLoss)
}

void ClassificationLoss::SharedCtor() {
  _cached_size_ = 0;
  clear_has_classification_loss();
}

ClassificationLoss::~ClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ClassificationLoss)
  SharedDtor();
}

void ClassificationLoss::SharedDtor() {
  if (has_classification_loss()) {
    clear_classification_loss();
  }
}

void ClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassificationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClassificationLoss& ClassificationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClassificationLoss* ClassificationLoss::New(::google::protobuf::Arena* arena) const {
  ClassificationLoss* n = new ClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClassificationLoss::clear_classification_loss() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.ClassificationLoss)
  switch (classification_loss_case()) {
    case kWeightedSigmoid: {
      delete classification_loss_.weighted_sigmoid_;
      break;
    }
    case kWeightedSoftmax: {
      delete classification_loss_.weighted_softmax_;
      break;
    }
    case kWeightedLogitsSoftmax: {
      delete classification_loss_.weighted_logits_softmax_;
      break;
    }
    case kBootstrappedSigmoid: {
      delete classification_loss_.bootstrapped_sigmoid_;
      break;
    }
    case kWeightedSigmoidFocal: {
      delete classification_loss_.weighted_sigmoid_focal_;
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLASSIFICATION_LOSS_NOT_SET;
}


void ClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_classification_loss();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bootstrapped_sigmoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_sigmoid_focal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss weighted_logits_softmax = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weighted_logits_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ClassificationLoss)
  return false;
#undef DO_
}

void ClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (classification_loss_case()) {
    case kWeightedSigmoid:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *classification_loss_.weighted_sigmoid_, output);
      break;
    case kWeightedSoftmax:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *classification_loss_.weighted_softmax_, output);
      break;
    case kBootstrappedSigmoid:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *classification_loss_.bootstrapped_sigmoid_, output);
      break;
    case kWeightedSigmoidFocal:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *classification_loss_.weighted_sigmoid_focal_, output);
      break;
    case kWeightedLogitsSoftmax:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *classification_loss_.weighted_logits_softmax_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ClassificationLoss)
}

::google::protobuf::uint8* ClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (classification_loss_case()) {
    case kWeightedSigmoid:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *classification_loss_.weighted_sigmoid_, deterministic, target);
      break;
    case kWeightedSoftmax:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *classification_loss_.weighted_softmax_, deterministic, target);
      break;
    case kBootstrappedSigmoid:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *classification_loss_.bootstrapped_sigmoid_, deterministic, target);
      break;
    case kWeightedSigmoidFocal:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *classification_loss_.weighted_sigmoid_focal_, deterministic, target);
      break;
    case kWeightedLogitsSoftmax:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *classification_loss_.weighted_logits_softmax_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ClassificationLoss)
  return target;
}

size_t ClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (classification_loss_case()) {
    // optional .object_detection.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
    case kWeightedSigmoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_sigmoid_);
      break;
    }
    // optional .object_detection.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
    case kWeightedSoftmax: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_softmax_);
      break;
    }
    // optional .object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss weighted_logits_softmax = 5;
    case kWeightedLogitsSoftmax: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_logits_softmax_);
      break;
    }
    // optional .object_detection.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
    case kBootstrappedSigmoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.bootstrapped_sigmoid_);
      break;
    }
    // optional .object_detection.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
    case kWeightedSigmoidFocal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *classification_loss_.weighted_sigmoid_focal_);
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ClassificationLoss)
    MergeFrom(*source);
  }
}

void ClassificationLoss::MergeFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.classification_loss_case()) {
    case kWeightedSigmoid: {
      mutable_weighted_sigmoid()->::object_detection::protos::WeightedSigmoidClassificationLoss::MergeFrom(from.weighted_sigmoid());
      break;
    }
    case kWeightedSoftmax: {
      mutable_weighted_softmax()->::object_detection::protos::WeightedSoftmaxClassificationLoss::MergeFrom(from.weighted_softmax());
      break;
    }
    case kWeightedLogitsSoftmax: {
      mutable_weighted_logits_softmax()->::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(from.weighted_logits_softmax());
      break;
    }
    case kBootstrappedSigmoid: {
      mutable_bootstrapped_sigmoid()->::object_detection::protos::BootstrappedSigmoidClassificationLoss::MergeFrom(from.bootstrapped_sigmoid());
      break;
    }
    case kWeightedSigmoidFocal: {
      mutable_weighted_sigmoid_focal()->::object_detection::protos::SigmoidFocalClassificationLoss::MergeFrom(from.weighted_sigmoid_focal());
      break;
    }
    case CLASSIFICATION_LOSS_NOT_SET: {
      break;
    }
  }
}

void ClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassificationLoss::CopyFrom(const ClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationLoss::IsInitialized() const {
  return true;
}

void ClassificationLoss::Swap(ClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClassificationLoss::InternalSwap(ClassificationLoss* other) {
  using std::swap;
  swap(classification_loss_, other->classification_loss_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClassificationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClassificationLoss

// optional .object_detection.protos.WeightedSigmoidClassificationLoss weighted_sigmoid = 1;
bool ClassificationLoss::has_weighted_sigmoid() const {
  return classification_loss_case() == kWeightedSigmoid;
}
void ClassificationLoss::set_has_weighted_sigmoid() {
  _oneof_case_[0] = kWeightedSigmoid;
}
void ClassificationLoss::clear_weighted_sigmoid() {
  if (has_weighted_sigmoid()) {
    delete classification_loss_.weighted_sigmoid_;
    clear_has_classification_loss();
  }
}
 const ::object_detection::protos::WeightedSigmoidClassificationLoss& ClassificationLoss::weighted_sigmoid() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ClassificationLoss.weighted_sigmoid)
  return has_weighted_sigmoid()
      ? *classification_loss_.weighted_sigmoid_
      : ::object_detection::protos::WeightedSigmoidClassificationLoss::default_instance();
}
::object_detection::protos::WeightedSigmoidClassificationLoss* ClassificationLoss::mutable_weighted_sigmoid() {
  if (!has_weighted_sigmoid()) {
    clear_classification_loss();
    set_has_weighted_sigmoid();
    classification_loss_.weighted_sigmoid_ = new ::object_detection::protos::WeightedSigmoidClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ClassificationLoss.weighted_sigmoid)
  return classification_loss_.weighted_sigmoid_;
}
::object_detection::protos::WeightedSigmoidClassificationLoss* ClassificationLoss::release_weighted_sigmoid() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ClassificationLoss.weighted_sigmoid)
  if (has_weighted_sigmoid()) {
    clear_has_classification_loss();
    ::object_detection::protos::WeightedSigmoidClassificationLoss* temp = classification_loss_.weighted_sigmoid_;
    classification_loss_.weighted_sigmoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_sigmoid(::object_detection::protos::WeightedSigmoidClassificationLoss* weighted_sigmoid) {
  clear_classification_loss();
  if (weighted_sigmoid) {
    set_has_weighted_sigmoid();
    classification_loss_.weighted_sigmoid_ = weighted_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_sigmoid)
}

// optional .object_detection.protos.WeightedSoftmaxClassificationLoss weighted_softmax = 2;
bool ClassificationLoss::has_weighted_softmax() const {
  return classification_loss_case() == kWeightedSoftmax;
}
void ClassificationLoss::set_has_weighted_softmax() {
  _oneof_case_[0] = kWeightedSoftmax;
}
void ClassificationLoss::clear_weighted_softmax() {
  if (has_weighted_softmax()) {
    delete classification_loss_.weighted_softmax_;
    clear_has_classification_loss();
  }
}
 const ::object_detection::protos::WeightedSoftmaxClassificationLoss& ClassificationLoss::weighted_softmax() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ClassificationLoss.weighted_softmax)
  return has_weighted_softmax()
      ? *classification_loss_.weighted_softmax_
      : ::object_detection::protos::WeightedSoftmaxClassificationLoss::default_instance();
}
::object_detection::protos::WeightedSoftmaxClassificationLoss* ClassificationLoss::mutable_weighted_softmax() {
  if (!has_weighted_softmax()) {
    clear_classification_loss();
    set_has_weighted_softmax();
    classification_loss_.weighted_softmax_ = new ::object_detection::protos::WeightedSoftmaxClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ClassificationLoss.weighted_softmax)
  return classification_loss_.weighted_softmax_;
}
::object_detection::protos::WeightedSoftmaxClassificationLoss* ClassificationLoss::release_weighted_softmax() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ClassificationLoss.weighted_softmax)
  if (has_weighted_softmax()) {
    clear_has_classification_loss();
    ::object_detection::protos::WeightedSoftmaxClassificationLoss* temp = classification_loss_.weighted_softmax_;
    classification_loss_.weighted_softmax_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_softmax(::object_detection::protos::WeightedSoftmaxClassificationLoss* weighted_softmax) {
  clear_classification_loss();
  if (weighted_softmax) {
    set_has_weighted_softmax();
    classification_loss_.weighted_softmax_ = weighted_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_softmax)
}

// optional .object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss weighted_logits_softmax = 5;
bool ClassificationLoss::has_weighted_logits_softmax() const {
  return classification_loss_case() == kWeightedLogitsSoftmax;
}
void ClassificationLoss::set_has_weighted_logits_softmax() {
  _oneof_case_[0] = kWeightedLogitsSoftmax;
}
void ClassificationLoss::clear_weighted_logits_softmax() {
  if (has_weighted_logits_softmax()) {
    delete classification_loss_.weighted_logits_softmax_;
    clear_has_classification_loss();
  }
}
 const ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss& ClassificationLoss::weighted_logits_softmax() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ClassificationLoss.weighted_logits_softmax)
  return has_weighted_logits_softmax()
      ? *classification_loss_.weighted_logits_softmax_
      : ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss::default_instance();
}
::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* ClassificationLoss::mutable_weighted_logits_softmax() {
  if (!has_weighted_logits_softmax()) {
    clear_classification_loss();
    set_has_weighted_logits_softmax();
    classification_loss_.weighted_logits_softmax_ = new ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ClassificationLoss.weighted_logits_softmax)
  return classification_loss_.weighted_logits_softmax_;
}
::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* ClassificationLoss::release_weighted_logits_softmax() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ClassificationLoss.weighted_logits_softmax)
  if (has_weighted_logits_softmax()) {
    clear_has_classification_loss();
    ::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* temp = classification_loss_.weighted_logits_softmax_;
    classification_loss_.weighted_logits_softmax_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_logits_softmax(::object_detection::protos::WeightedSoftmaxClassificationAgainstLogitsLoss* weighted_logits_softmax) {
  clear_classification_loss();
  if (weighted_logits_softmax) {
    set_has_weighted_logits_softmax();
    classification_loss_.weighted_logits_softmax_ = weighted_logits_softmax;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_logits_softmax)
}

// optional .object_detection.protos.BootstrappedSigmoidClassificationLoss bootstrapped_sigmoid = 3;
bool ClassificationLoss::has_bootstrapped_sigmoid() const {
  return classification_loss_case() == kBootstrappedSigmoid;
}
void ClassificationLoss::set_has_bootstrapped_sigmoid() {
  _oneof_case_[0] = kBootstrappedSigmoid;
}
void ClassificationLoss::clear_bootstrapped_sigmoid() {
  if (has_bootstrapped_sigmoid()) {
    delete classification_loss_.bootstrapped_sigmoid_;
    clear_has_classification_loss();
  }
}
 const ::object_detection::protos::BootstrappedSigmoidClassificationLoss& ClassificationLoss::bootstrapped_sigmoid() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ClassificationLoss.bootstrapped_sigmoid)
  return has_bootstrapped_sigmoid()
      ? *classification_loss_.bootstrapped_sigmoid_
      : ::object_detection::protos::BootstrappedSigmoidClassificationLoss::default_instance();
}
::object_detection::protos::BootstrappedSigmoidClassificationLoss* ClassificationLoss::mutable_bootstrapped_sigmoid() {
  if (!has_bootstrapped_sigmoid()) {
    clear_classification_loss();
    set_has_bootstrapped_sigmoid();
    classification_loss_.bootstrapped_sigmoid_ = new ::object_detection::protos::BootstrappedSigmoidClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ClassificationLoss.bootstrapped_sigmoid)
  return classification_loss_.bootstrapped_sigmoid_;
}
::object_detection::protos::BootstrappedSigmoidClassificationLoss* ClassificationLoss::release_bootstrapped_sigmoid() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ClassificationLoss.bootstrapped_sigmoid)
  if (has_bootstrapped_sigmoid()) {
    clear_has_classification_loss();
    ::object_detection::protos::BootstrappedSigmoidClassificationLoss* temp = classification_loss_.bootstrapped_sigmoid_;
    classification_loss_.bootstrapped_sigmoid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_bootstrapped_sigmoid(::object_detection::protos::BootstrappedSigmoidClassificationLoss* bootstrapped_sigmoid) {
  clear_classification_loss();
  if (bootstrapped_sigmoid) {
    set_has_bootstrapped_sigmoid();
    classification_loss_.bootstrapped_sigmoid_ = bootstrapped_sigmoid;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.bootstrapped_sigmoid)
}

// optional .object_detection.protos.SigmoidFocalClassificationLoss weighted_sigmoid_focal = 4;
bool ClassificationLoss::has_weighted_sigmoid_focal() const {
  return classification_loss_case() == kWeightedSigmoidFocal;
}
void ClassificationLoss::set_has_weighted_sigmoid_focal() {
  _oneof_case_[0] = kWeightedSigmoidFocal;
}
void ClassificationLoss::clear_weighted_sigmoid_focal() {
  if (has_weighted_sigmoid_focal()) {
    delete classification_loss_.weighted_sigmoid_focal_;
    clear_has_classification_loss();
  }
}
 const ::object_detection::protos::SigmoidFocalClassificationLoss& ClassificationLoss::weighted_sigmoid_focal() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ClassificationLoss.weighted_sigmoid_focal)
  return has_weighted_sigmoid_focal()
      ? *classification_loss_.weighted_sigmoid_focal_
      : ::object_detection::protos::SigmoidFocalClassificationLoss::default_instance();
}
::object_detection::protos::SigmoidFocalClassificationLoss* ClassificationLoss::mutable_weighted_sigmoid_focal() {
  if (!has_weighted_sigmoid_focal()) {
    clear_classification_loss();
    set_has_weighted_sigmoid_focal();
    classification_loss_.weighted_sigmoid_focal_ = new ::object_detection::protos::SigmoidFocalClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ClassificationLoss.weighted_sigmoid_focal)
  return classification_loss_.weighted_sigmoid_focal_;
}
::object_detection::protos::SigmoidFocalClassificationLoss* ClassificationLoss::release_weighted_sigmoid_focal() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ClassificationLoss.weighted_sigmoid_focal)
  if (has_weighted_sigmoid_focal()) {
    clear_has_classification_loss();
    ::object_detection::protos::SigmoidFocalClassificationLoss* temp = classification_loss_.weighted_sigmoid_focal_;
    classification_loss_.weighted_sigmoid_focal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ClassificationLoss::set_allocated_weighted_sigmoid_focal(::object_detection::protos::SigmoidFocalClassificationLoss* weighted_sigmoid_focal) {
  clear_classification_loss();
  if (weighted_sigmoid_focal) {
    set_has_weighted_sigmoid_focal();
    classification_loss_.weighted_sigmoid_focal_ = weighted_sigmoid_focal;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ClassificationLoss.weighted_sigmoid_focal)
}

bool ClassificationLoss::has_classification_loss() const {
  return classification_loss_case() != CLASSIFICATION_LOSS_NOT_SET;
}
void ClassificationLoss::clear_has_classification_loss() {
  _oneof_case_[0] = CLASSIFICATION_LOSS_NOT_SET;
}
ClassificationLoss::ClassificationLossCase ClassificationLoss::classification_loss_case() const {
  return ClassificationLoss::ClassificationLossCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSigmoidClassificationLoss::kAnchorwiseOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSigmoidClassificationLoss)
}
WeightedSigmoidClassificationLoss::WeightedSigmoidClassificationLoss(const WeightedSigmoidClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  anchorwise_output_ = from.anchorwise_output_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSigmoidClassificationLoss)
}

void WeightedSigmoidClassificationLoss::SharedCtor() {
  _cached_size_ = 0;
  anchorwise_output_ = false;
}

WeightedSigmoidClassificationLoss::~WeightedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSigmoidClassificationLoss)
  SharedDtor();
}

void WeightedSigmoidClassificationLoss::SharedDtor() {
}

void WeightedSigmoidClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSigmoidClassificationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSigmoidClassificationLoss& WeightedSigmoidClassificationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSigmoidClassificationLoss* WeightedSigmoidClassificationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSigmoidClassificationLoss* n = new WeightedSigmoidClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  anchorwise_output_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSigmoidClassificationLoss)
  return false;
#undef DO_
}

void WeightedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSigmoidClassificationLoss)
}

::google::protobuf::uint8* WeightedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSigmoidClassificationLoss)
  return target;
}

size_t WeightedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool anchorwise_output = 1 [default = false];
  if (has_anchorwise_output()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSigmoidClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSigmoidClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSigmoidClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSigmoidClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSigmoidClassificationLoss::MergeFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_anchorwise_output()) {
    set_anchorwise_output(from.anchorwise_output());
  }
}

void WeightedSigmoidClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSigmoidClassificationLoss::CopyFrom(const WeightedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSigmoidClassificationLoss::Swap(WeightedSigmoidClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSigmoidClassificationLoss::InternalSwap(WeightedSigmoidClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSigmoidClassificationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSigmoidClassificationLoss

// optional bool anchorwise_output = 1 [default = false];
bool WeightedSigmoidClassificationLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightedSigmoidClassificationLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightedSigmoidClassificationLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightedSigmoidClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool WeightedSigmoidClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSigmoidClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSigmoidClassificationLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSigmoidClassificationLoss.anchorwise_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SigmoidFocalClassificationLoss::kAnchorwiseOutputFieldNumber;
const int SigmoidFocalClassificationLoss::kGammaFieldNumber;
const int SigmoidFocalClassificationLoss::kAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.SigmoidFocalClassificationLoss)
}
SigmoidFocalClassificationLoss::SigmoidFocalClassificationLoss(const SigmoidFocalClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamma_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(gamma_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.SigmoidFocalClassificationLoss)
}

void SigmoidFocalClassificationLoss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&anchorwise_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
  gamma_ = 2;
}

SigmoidFocalClassificationLoss::~SigmoidFocalClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.SigmoidFocalClassificationLoss)
  SharedDtor();
}

void SigmoidFocalClassificationLoss::SharedDtor() {
}

void SigmoidFocalClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SigmoidFocalClassificationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SigmoidFocalClassificationLoss& SigmoidFocalClassificationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

SigmoidFocalClassificationLoss* SigmoidFocalClassificationLoss::New(::google::protobuf::Arena* arena) const {
  SigmoidFocalClassificationLoss* n = new SigmoidFocalClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SigmoidFocalClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.SigmoidFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&anchorwise_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alpha_) -
        reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(alpha_));
    gamma_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SigmoidFocalClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.SigmoidFocalClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gamma = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_gamma();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gamma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.SigmoidFocalClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.SigmoidFocalClassificationLoss)
  return false;
#undef DO_
}

void SigmoidFocalClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.SigmoidFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float gamma = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gamma(), output);
  }

  // optional float alpha = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.SigmoidFocalClassificationLoss)
}

::google::protobuf::uint8* SigmoidFocalClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.SigmoidFocalClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float gamma = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gamma(), target);
  }

  // optional float alpha = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.SigmoidFocalClassificationLoss)
  return target;
}

size_t SigmoidFocalClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.SigmoidFocalClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (has_anchorwise_output()) {
      total_size += 1 + 1;
    }

    // optional float alpha = 3;
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional float gamma = 2 [default = 2];
    if (has_gamma()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SigmoidFocalClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const SigmoidFocalClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SigmoidFocalClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.SigmoidFocalClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.SigmoidFocalClassificationLoss)
    MergeFrom(*source);
  }
}

void SigmoidFocalClassificationLoss::MergeFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000004u) {
      gamma_ = from.gamma_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SigmoidFocalClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SigmoidFocalClassificationLoss::CopyFrom(const SigmoidFocalClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.SigmoidFocalClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigmoidFocalClassificationLoss::IsInitialized() const {
  return true;
}

void SigmoidFocalClassificationLoss::Swap(SigmoidFocalClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SigmoidFocalClassificationLoss::InternalSwap(SigmoidFocalClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(alpha_, other->alpha_);
  swap(gamma_, other->gamma_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SigmoidFocalClassificationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SigmoidFocalClassificationLoss

// optional bool anchorwise_output = 1 [default = false];
bool SigmoidFocalClassificationLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SigmoidFocalClassificationLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000001u;
}
void SigmoidFocalClassificationLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void SigmoidFocalClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool SigmoidFocalClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SigmoidFocalClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void SigmoidFocalClassificationLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SigmoidFocalClassificationLoss.anchorwise_output)
}

// optional float gamma = 2 [default = 2];
bool SigmoidFocalClassificationLoss::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SigmoidFocalClassificationLoss::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
void SigmoidFocalClassificationLoss::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
void SigmoidFocalClassificationLoss::clear_gamma() {
  gamma_ = 2;
  clear_has_gamma();
}
float SigmoidFocalClassificationLoss::gamma() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SigmoidFocalClassificationLoss.gamma)
  return gamma_;
}
void SigmoidFocalClassificationLoss::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SigmoidFocalClassificationLoss.gamma)
}

// optional float alpha = 3;
bool SigmoidFocalClassificationLoss::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SigmoidFocalClassificationLoss::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
void SigmoidFocalClassificationLoss::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
void SigmoidFocalClassificationLoss::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
float SigmoidFocalClassificationLoss::alpha() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.SigmoidFocalClassificationLoss.alpha)
  return alpha_;
}
void SigmoidFocalClassificationLoss::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.SigmoidFocalClassificationLoss.alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSoftmaxClassificationLoss::kAnchorwiseOutputFieldNumber;
const int WeightedSoftmaxClassificationLoss::kLogitScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSoftmaxClassificationLoss)
}
WeightedSoftmaxClassificationLoss::WeightedSoftmaxClassificationLoss(const WeightedSoftmaxClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSoftmaxClassificationLoss)
}

void WeightedSoftmaxClassificationLoss::SharedCtor() {
  _cached_size_ = 0;
  anchorwise_output_ = false;
  logit_scale_ = 1;
}

WeightedSoftmaxClassificationLoss::~WeightedSoftmaxClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSoftmaxClassificationLoss)
  SharedDtor();
}

void WeightedSoftmaxClassificationLoss::SharedDtor() {
}

void WeightedSoftmaxClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSoftmaxClassificationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSoftmaxClassificationLoss& WeightedSoftmaxClassificationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSoftmaxClassificationLoss* WeightedSoftmaxClassificationLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSoftmaxClassificationLoss* n = new WeightedSoftmaxClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSoftmaxClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    anchorwise_output_ = false;
    logit_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightedSoftmaxClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logit_scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_logit_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSoftmaxClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSoftmaxClassificationLoss)
  return false;
#undef DO_
}

void WeightedSoftmaxClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->logit_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSoftmaxClassificationLoss)
}

::google::protobuf::uint8* WeightedSoftmaxClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->logit_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSoftmaxClassificationLoss)
  return target;
}

size_t WeightedSoftmaxClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (has_anchorwise_output()) {
      total_size += 1 + 1;
    }

    // optional float logit_scale = 2 [default = 1];
    if (has_logit_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSoftmaxClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSoftmaxClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSoftmaxClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSoftmaxClassificationLoss)
    MergeFrom(*source);
  }
}

void WeightedSoftmaxClassificationLoss::MergeFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      logit_scale_ = from.logit_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxClassificationLoss::CopyFrom(const WeightedSoftmaxClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSoftmaxClassificationLoss::IsInitialized() const {
  return true;
}

void WeightedSoftmaxClassificationLoss::Swap(WeightedSoftmaxClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSoftmaxClassificationLoss::InternalSwap(WeightedSoftmaxClassificationLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(logit_scale_, other->logit_scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSoftmaxClassificationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSoftmaxClassificationLoss

// optional bool anchorwise_output = 1 [default = false];
bool WeightedSoftmaxClassificationLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightedSoftmaxClassificationLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightedSoftmaxClassificationLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightedSoftmaxClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool WeightedSoftmaxClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSoftmaxClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSoftmaxClassificationLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSoftmaxClassificationLoss.anchorwise_output)
}

// optional float logit_scale = 2 [default = 1];
bool WeightedSoftmaxClassificationLoss::has_logit_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeightedSoftmaxClassificationLoss::set_has_logit_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void WeightedSoftmaxClassificationLoss::clear_has_logit_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeightedSoftmaxClassificationLoss::clear_logit_scale() {
  logit_scale_ = 1;
  clear_has_logit_scale();
}
float WeightedSoftmaxClassificationLoss::logit_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSoftmaxClassificationLoss.logit_scale)
  return logit_scale_;
}
void WeightedSoftmaxClassificationLoss::set_logit_scale(float value) {
  set_has_logit_scale();
  logit_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSoftmaxClassificationLoss.logit_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightedSoftmaxClassificationAgainstLogitsLoss::kAnchorwiseOutputFieldNumber;
const int WeightedSoftmaxClassificationAgainstLogitsLoss::kLogitScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightedSoftmaxClassificationAgainstLogitsLoss::WeightedSoftmaxClassificationAgainstLogitsLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
}
WeightedSoftmaxClassificationAgainstLogitsLoss::WeightedSoftmaxClassificationAgainstLogitsLoss(const WeightedSoftmaxClassificationAgainstLogitsLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anchorwise_output_, &from.anchorwise_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&logit_scale_) -
    reinterpret_cast<char*>(&anchorwise_output_)) + sizeof(logit_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SharedCtor() {
  _cached_size_ = 0;
  anchorwise_output_ = false;
  logit_scale_ = 1;
}

WeightedSoftmaxClassificationAgainstLogitsLoss::~WeightedSoftmaxClassificationAgainstLogitsLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  SharedDtor();
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SharedDtor() {
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightedSoftmaxClassificationAgainstLogitsLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightedSoftmaxClassificationAgainstLogitsLoss& WeightedSoftmaxClassificationAgainstLogitsLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

WeightedSoftmaxClassificationAgainstLogitsLoss* WeightedSoftmaxClassificationAgainstLogitsLoss::New(::google::protobuf::Arena* arena) const {
  WeightedSoftmaxClassificationAgainstLogitsLoss* n = new WeightedSoftmaxClassificationAgainstLogitsLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    anchorwise_output_ = false;
    logit_scale_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WeightedSoftmaxClassificationAgainstLogitsLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool anchorwise_output = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logit_scale = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_logit_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logit_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  return false;
#undef DO_
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->anchorwise_output(), output);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->logit_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
}

::google::protobuf::uint8* WeightedSoftmaxClassificationAgainstLogitsLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool anchorwise_output = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->anchorwise_output(), target);
  }

  // optional float logit_scale = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->logit_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  return target;
}

size_t WeightedSoftmaxClassificationAgainstLogitsLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool anchorwise_output = 1 [default = false];
    if (has_anchorwise_output()) {
      total_size += 1 + 1;
    }

    // optional float logit_scale = 2 [default = 1];
    if (has_logit_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightedSoftmaxClassificationAgainstLogitsLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightedSoftmaxClassificationAgainstLogitsLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
    MergeFrom(*source);
  }
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::MergeFrom(const WeightedSoftmaxClassificationAgainstLogitsLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      logit_scale_ = from.logit_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::CopyFrom(const WeightedSoftmaxClassificationAgainstLogitsLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedSoftmaxClassificationAgainstLogitsLoss::IsInitialized() const {
  return true;
}

void WeightedSoftmaxClassificationAgainstLogitsLoss::Swap(WeightedSoftmaxClassificationAgainstLogitsLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::InternalSwap(WeightedSoftmaxClassificationAgainstLogitsLoss* other) {
  using std::swap;
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(logit_scale_, other->logit_scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightedSoftmaxClassificationAgainstLogitsLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WeightedSoftmaxClassificationAgainstLogitsLoss

// optional bool anchorwise_output = 1 [default = false];
bool WeightedSoftmaxClassificationAgainstLogitsLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000001u;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool WeightedSoftmaxClassificationAgainstLogitsLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss.anchorwise_output)
  return anchorwise_output_;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss.anchorwise_output)
}

// optional float logit_scale = 2 [default = 1];
bool WeightedSoftmaxClassificationAgainstLogitsLoss::has_logit_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::set_has_logit_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::clear_has_logit_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::clear_logit_scale() {
  logit_scale_ = 1;
  clear_has_logit_scale();
}
float WeightedSoftmaxClassificationAgainstLogitsLoss::logit_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss.logit_scale)
  return logit_scale_;
}
void WeightedSoftmaxClassificationAgainstLogitsLoss::set_logit_scale(float value) {
  set_has_logit_scale();
  logit_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.WeightedSoftmaxClassificationAgainstLogitsLoss.logit_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrappedSigmoidClassificationLoss::kAlphaFieldNumber;
const int BootstrappedSigmoidClassificationLoss::kHardBootstrapFieldNumber;
const int BootstrappedSigmoidClassificationLoss::kAnchorwiseOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.BootstrappedSigmoidClassificationLoss)
}
BootstrappedSigmoidClassificationLoss::BootstrappedSigmoidClassificationLoss(const BootstrappedSigmoidClassificationLoss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&alpha_, &from.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchorwise_output_) -
    reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.BootstrappedSigmoidClassificationLoss)
}

void BootstrappedSigmoidClassificationLoss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&alpha_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchorwise_output_) -
      reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
}

BootstrappedSigmoidClassificationLoss::~BootstrappedSigmoidClassificationLoss() {
  // @@protoc_insertion_point(destructor:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  SharedDtor();
}

void BootstrappedSigmoidClassificationLoss::SharedDtor() {
}

void BootstrappedSigmoidClassificationLoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrappedSigmoidClassificationLoss::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BootstrappedSigmoidClassificationLoss& BootstrappedSigmoidClassificationLoss::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

BootstrappedSigmoidClassificationLoss* BootstrappedSigmoidClassificationLoss::New(::google::protobuf::Arena* arena) const {
  BootstrappedSigmoidClassificationLoss* n = new BootstrappedSigmoidClassificationLoss;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BootstrappedSigmoidClassificationLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&alpha_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anchorwise_output_) -
        reinterpret_cast<char*>(&alpha_)) + sizeof(anchorwise_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BootstrappedSigmoidClassificationLoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hard_bootstrap = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hard_bootstrap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hard_bootstrap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool anchorwise_output = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_anchorwise_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anchorwise_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  return false;
#undef DO_
}

void BootstrappedSigmoidClassificationLoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->alpha(), output);
  }

  // optional bool hard_bootstrap = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hard_bootstrap(), output);
  }

  // optional bool anchorwise_output = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->anchorwise_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.BootstrappedSigmoidClassificationLoss)
}

::google::protobuf::uint8* BootstrappedSigmoidClassificationLoss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->alpha(), target);
  }

  // optional bool hard_bootstrap = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hard_bootstrap(), target);
  }

  // optional bool anchorwise_output = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->anchorwise_output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  return target;
}

size_t BootstrappedSigmoidClassificationLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float alpha = 1;
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // optional bool hard_bootstrap = 2 [default = false];
    if (has_hard_bootstrap()) {
      total_size += 1 + 1;
    }

    // optional bool anchorwise_output = 3 [default = false];
    if (has_anchorwise_output()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  const BootstrappedSigmoidClassificationLoss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BootstrappedSigmoidClassificationLoss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.BootstrappedSigmoidClassificationLoss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.BootstrappedSigmoidClassificationLoss)
    MergeFrom(*source);
  }
}

void BootstrappedSigmoidClassificationLoss::MergeFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00000002u) {
      hard_bootstrap_ = from.hard_bootstrap_;
    }
    if (cached_has_bits & 0x00000004u) {
      anchorwise_output_ = from.anchorwise_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrappedSigmoidClassificationLoss::CopyFrom(const BootstrappedSigmoidClassificationLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.BootstrappedSigmoidClassificationLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BootstrappedSigmoidClassificationLoss::IsInitialized() const {
  return true;
}

void BootstrappedSigmoidClassificationLoss::Swap(BootstrappedSigmoidClassificationLoss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrappedSigmoidClassificationLoss::InternalSwap(BootstrappedSigmoidClassificationLoss* other) {
  using std::swap;
  swap(alpha_, other->alpha_);
  swap(hard_bootstrap_, other->hard_bootstrap_);
  swap(anchorwise_output_, other->anchorwise_output_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BootstrappedSigmoidClassificationLoss::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BootstrappedSigmoidClassificationLoss

// optional float alpha = 1;
bool BootstrappedSigmoidClassificationLoss::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BootstrappedSigmoidClassificationLoss::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void BootstrappedSigmoidClassificationLoss::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void BootstrappedSigmoidClassificationLoss::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
float BootstrappedSigmoidClassificationLoss::alpha() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BootstrappedSigmoidClassificationLoss.alpha)
  return alpha_;
}
void BootstrappedSigmoidClassificationLoss::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BootstrappedSigmoidClassificationLoss.alpha)
}

// optional bool hard_bootstrap = 2 [default = false];
bool BootstrappedSigmoidClassificationLoss::has_hard_bootstrap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BootstrappedSigmoidClassificationLoss::set_has_hard_bootstrap() {
  _has_bits_[0] |= 0x00000002u;
}
void BootstrappedSigmoidClassificationLoss::clear_has_hard_bootstrap() {
  _has_bits_[0] &= ~0x00000002u;
}
void BootstrappedSigmoidClassificationLoss::clear_hard_bootstrap() {
  hard_bootstrap_ = false;
  clear_has_hard_bootstrap();
}
bool BootstrappedSigmoidClassificationLoss::hard_bootstrap() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BootstrappedSigmoidClassificationLoss.hard_bootstrap)
  return hard_bootstrap_;
}
void BootstrappedSigmoidClassificationLoss::set_hard_bootstrap(bool value) {
  set_has_hard_bootstrap();
  hard_bootstrap_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BootstrappedSigmoidClassificationLoss.hard_bootstrap)
}

// optional bool anchorwise_output = 3 [default = false];
bool BootstrappedSigmoidClassificationLoss::has_anchorwise_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BootstrappedSigmoidClassificationLoss::set_has_anchorwise_output() {
  _has_bits_[0] |= 0x00000004u;
}
void BootstrappedSigmoidClassificationLoss::clear_has_anchorwise_output() {
  _has_bits_[0] &= ~0x00000004u;
}
void BootstrappedSigmoidClassificationLoss::clear_anchorwise_output() {
  anchorwise_output_ = false;
  clear_has_anchorwise_output();
}
bool BootstrappedSigmoidClassificationLoss::anchorwise_output() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.BootstrappedSigmoidClassificationLoss.anchorwise_output)
  return anchorwise_output_;
}
void BootstrappedSigmoidClassificationLoss::set_anchorwise_output(bool value) {
  set_has_anchorwise_output();
  anchorwise_output_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.BootstrappedSigmoidClassificationLoss.anchorwise_output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardExampleMiner::kNumHardExamplesFieldNumber;
const int HardExampleMiner::kIouThresholdFieldNumber;
const int HardExampleMiner::kLossTypeFieldNumber;
const int HardExampleMiner::kMaxNegativesPerPositiveFieldNumber;
const int HardExampleMiner::kMinNegativesPerImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardExampleMiner::HardExampleMiner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.HardExampleMiner)
}
HardExampleMiner::HardExampleMiner(const HardExampleMiner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loss_type_, &from.loss_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&iou_threshold_) -
    reinterpret_cast<char*>(&loss_type_)) + sizeof(iou_threshold_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.HardExampleMiner)
}

void HardExampleMiner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&loss_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_negatives_per_image_) -
      reinterpret_cast<char*>(&loss_type_)) + sizeof(min_negatives_per_image_));
  num_hard_examples_ = 64;
  iou_threshold_ = 0.7f;
}

HardExampleMiner::~HardExampleMiner() {
  // @@protoc_insertion_point(destructor:object_detection.protos.HardExampleMiner)
  SharedDtor();
}

void HardExampleMiner::SharedDtor() {
}

void HardExampleMiner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardExampleMiner::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HardExampleMiner& HardExampleMiner::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

HardExampleMiner* HardExampleMiner::New(::google::protobuf::Arena* arena) const {
  HardExampleMiner* n = new HardExampleMiner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardExampleMiner::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.HardExampleMiner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&loss_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_negatives_per_image_) -
        reinterpret_cast<char*>(&loss_type_)) + sizeof(min_negatives_per_image_));
    num_hard_examples_ = 64;
    iou_threshold_ = 0.7f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HardExampleMiner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.HardExampleMiner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_hard_examples = 1 [default = 64];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_hard_examples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hard_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float iou_threshold = 2 [default = 0.7];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_iou_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::HardExampleMiner_LossType_IsValid(value)) {
            set_loss_type(static_cast< ::object_detection::protos::HardExampleMiner_LossType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_negatives_per_positive = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_negatives_per_positive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_negatives_per_positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_negatives_per_image = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_min_negatives_per_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_negatives_per_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.HardExampleMiner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.HardExampleMiner)
  return false;
#undef DO_
}

void HardExampleMiner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.HardExampleMiner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_hard_examples = 1 [default = 64];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hard_examples(), output);
  }

  // optional float iou_threshold = 2 [default = 0.7];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->iou_threshold(), output);
  }

  // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->loss_type(), output);
  }

  // optional int32 max_negatives_per_positive = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_negatives_per_positive(), output);
  }

  // optional int32 min_negatives_per_image = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_negatives_per_image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.HardExampleMiner)
}

::google::protobuf::uint8* HardExampleMiner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.HardExampleMiner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_hard_examples = 1 [default = 64];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_hard_examples(), target);
  }

  // optional float iou_threshold = 2 [default = 0.7];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->iou_threshold(), target);
  }

  // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->loss_type(), target);
  }

  // optional int32 max_negatives_per_positive = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_negatives_per_positive(), target);
  }

  // optional int32 min_negatives_per_image = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_negatives_per_image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.HardExampleMiner)
  return target;
}

size_t HardExampleMiner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.HardExampleMiner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
    if (has_loss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loss_type());
    }

    // optional int32 max_negatives_per_positive = 4 [default = 0];
    if (has_max_negatives_per_positive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_negatives_per_positive());
    }

    // optional int32 min_negatives_per_image = 5 [default = 0];
    if (has_min_negatives_per_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_negatives_per_image());
    }

    // optional int32 num_hard_examples = 1 [default = 64];
    if (has_num_hard_examples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hard_examples());
    }

    // optional float iou_threshold = 2 [default = 0.7];
    if (has_iou_threshold()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardExampleMiner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  const HardExampleMiner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HardExampleMiner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.HardExampleMiner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.HardExampleMiner)
    MergeFrom(*source);
  }
}

void HardExampleMiner::MergeFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.HardExampleMiner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      loss_type_ = from.loss_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_negatives_per_positive_ = from.max_negatives_per_positive_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_negatives_per_image_ = from.min_negatives_per_image_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_hard_examples_ = from.num_hard_examples_;
    }
    if (cached_has_bits & 0x00000010u) {
      iou_threshold_ = from.iou_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HardExampleMiner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardExampleMiner::CopyFrom(const HardExampleMiner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.HardExampleMiner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardExampleMiner::IsInitialized() const {
  return true;
}

void HardExampleMiner::Swap(HardExampleMiner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardExampleMiner::InternalSwap(HardExampleMiner* other) {
  using std::swap;
  swap(loss_type_, other->loss_type_);
  swap(max_negatives_per_positive_, other->max_negatives_per_positive_);
  swap(min_negatives_per_image_, other->min_negatives_per_image_);
  swap(num_hard_examples_, other->num_hard_examples_);
  swap(iou_threshold_, other->iou_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HardExampleMiner::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardExampleMiner

// optional int32 num_hard_examples = 1 [default = 64];
bool HardExampleMiner::has_num_hard_examples() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HardExampleMiner::set_has_num_hard_examples() {
  _has_bits_[0] |= 0x00000008u;
}
void HardExampleMiner::clear_has_num_hard_examples() {
  _has_bits_[0] &= ~0x00000008u;
}
void HardExampleMiner::clear_num_hard_examples() {
  num_hard_examples_ = 64;
  clear_has_num_hard_examples();
}
::google::protobuf::int32 HardExampleMiner::num_hard_examples() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.HardExampleMiner.num_hard_examples)
  return num_hard_examples_;
}
void HardExampleMiner::set_num_hard_examples(::google::protobuf::int32 value) {
  set_has_num_hard_examples();
  num_hard_examples_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.HardExampleMiner.num_hard_examples)
}

// optional float iou_threshold = 2 [default = 0.7];
bool HardExampleMiner::has_iou_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HardExampleMiner::set_has_iou_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void HardExampleMiner::clear_has_iou_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void HardExampleMiner::clear_iou_threshold() {
  iou_threshold_ = 0.7f;
  clear_has_iou_threshold();
}
float HardExampleMiner::iou_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.HardExampleMiner.iou_threshold)
  return iou_threshold_;
}
void HardExampleMiner::set_iou_threshold(float value) {
  set_has_iou_threshold();
  iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.HardExampleMiner.iou_threshold)
}

// optional .object_detection.protos.HardExampleMiner.LossType loss_type = 3 [default = BOTH];
bool HardExampleMiner::has_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HardExampleMiner::set_has_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HardExampleMiner::clear_has_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HardExampleMiner::clear_loss_type() {
  loss_type_ = 0;
  clear_has_loss_type();
}
::object_detection::protos::HardExampleMiner_LossType HardExampleMiner::loss_type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.HardExampleMiner.loss_type)
  return static_cast< ::object_detection::protos::HardExampleMiner_LossType >(loss_type_);
}
void HardExampleMiner::set_loss_type(::object_detection::protos::HardExampleMiner_LossType value) {
  assert(::object_detection::protos::HardExampleMiner_LossType_IsValid(value));
  set_has_loss_type();
  loss_type_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.HardExampleMiner.loss_type)
}

// optional int32 max_negatives_per_positive = 4 [default = 0];
bool HardExampleMiner::has_max_negatives_per_positive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HardExampleMiner::set_has_max_negatives_per_positive() {
  _has_bits_[0] |= 0x00000002u;
}
void HardExampleMiner::clear_has_max_negatives_per_positive() {
  _has_bits_[0] &= ~0x00000002u;
}
void HardExampleMiner::clear_max_negatives_per_positive() {
  max_negatives_per_positive_ = 0;
  clear_has_max_negatives_per_positive();
}
::google::protobuf::int32 HardExampleMiner::max_negatives_per_positive() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.HardExampleMiner.max_negatives_per_positive)
  return max_negatives_per_positive_;
}
void HardExampleMiner::set_max_negatives_per_positive(::google::protobuf::int32 value) {
  set_has_max_negatives_per_positive();
  max_negatives_per_positive_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.HardExampleMiner.max_negatives_per_positive)
}

// optional int32 min_negatives_per_image = 5 [default = 0];
bool HardExampleMiner::has_min_negatives_per_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HardExampleMiner::set_has_min_negatives_per_image() {
  _has_bits_[0] |= 0x00000004u;
}
void HardExampleMiner::clear_has_min_negatives_per_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void HardExampleMiner::clear_min_negatives_per_image() {
  min_negatives_per_image_ = 0;
  clear_has_min_negatives_per_image();
}
::google::protobuf::int32 HardExampleMiner::min_negatives_per_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.HardExampleMiner.min_negatives_per_image)
  return min_negatives_per_image_;
}
void HardExampleMiner::set_min_negatives_per_image(::google::protobuf::int32 value) {
  set_has_min_negatives_per_image();
  min_negatives_per_image_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.HardExampleMiner.min_negatives_per_image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomExampleSampler::kPositiveSampleFractionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomExampleSampler::RandomExampleSampler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.RandomExampleSampler)
}
RandomExampleSampler::RandomExampleSampler(const RandomExampleSampler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positive_sample_fraction_ = from.positive_sample_fraction_;
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.RandomExampleSampler)
}

void RandomExampleSampler::SharedCtor() {
  _cached_size_ = 0;
  positive_sample_fraction_ = 0.01f;
}

RandomExampleSampler::~RandomExampleSampler() {
  // @@protoc_insertion_point(destructor:object_detection.protos.RandomExampleSampler)
  SharedDtor();
}

void RandomExampleSampler::SharedDtor() {
}

void RandomExampleSampler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomExampleSampler::descriptor() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomExampleSampler& RandomExampleSampler::default_instance() {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  return *internal_default_instance();
}

RandomExampleSampler* RandomExampleSampler::New(::google::protobuf::Arena* arena) const {
  RandomExampleSampler* n = new RandomExampleSampler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RandomExampleSampler::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.RandomExampleSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positive_sample_fraction_ = 0.01f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RandomExampleSampler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.RandomExampleSampler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float positive_sample_fraction = 1 [default = 0.01];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_positive_sample_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positive_sample_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.RandomExampleSampler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.RandomExampleSampler)
  return false;
#undef DO_
}

void RandomExampleSampler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.RandomExampleSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float positive_sample_fraction = 1 [default = 0.01];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->positive_sample_fraction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.RandomExampleSampler)
}

::google::protobuf::uint8* RandomExampleSampler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.RandomExampleSampler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float positive_sample_fraction = 1 [default = 0.01];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->positive_sample_fraction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.RandomExampleSampler)
  return target;
}

size_t RandomExampleSampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.RandomExampleSampler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float positive_sample_fraction = 1 [default = 0.01];
  if (has_positive_sample_fraction()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomExampleSampler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.RandomExampleSampler)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomExampleSampler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomExampleSampler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.RandomExampleSampler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.RandomExampleSampler)
    MergeFrom(*source);
  }
}

void RandomExampleSampler::MergeFrom(const RandomExampleSampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.RandomExampleSampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_positive_sample_fraction()) {
    set_positive_sample_fraction(from.positive_sample_fraction());
  }
}

void RandomExampleSampler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.RandomExampleSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomExampleSampler::CopyFrom(const RandomExampleSampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.RandomExampleSampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomExampleSampler::IsInitialized() const {
  return true;
}

void RandomExampleSampler::Swap(RandomExampleSampler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomExampleSampler::InternalSwap(RandomExampleSampler* other) {
  using std::swap;
  swap(positive_sample_fraction_, other->positive_sample_fraction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomExampleSampler::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2flosses_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2flosses_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RandomExampleSampler

// optional float positive_sample_fraction = 1 [default = 0.01];
bool RandomExampleSampler::has_positive_sample_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RandomExampleSampler::set_has_positive_sample_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
void RandomExampleSampler::clear_has_positive_sample_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
void RandomExampleSampler::clear_positive_sample_fraction() {
  positive_sample_fraction_ = 0.01f;
  clear_has_positive_sample_fraction();
}
float RandomExampleSampler::positive_sample_fraction() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.RandomExampleSampler.positive_sample_fraction)
  return positive_sample_fraction_;
}
void RandomExampleSampler::set_positive_sample_fraction(float value) {
  set_has_positive_sample_fraction();
  positive_sample_fraction_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.RandomExampleSampler.positive_sample_fraction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
