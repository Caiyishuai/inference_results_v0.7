// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/faster_rcnn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/faster_rcnn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class FasterRcnnDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FasterRcnn>
     _instance;
} _FasterRcnn_default_instance_;
class FasterRcnnFeatureExtractorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FasterRcnnFeatureExtractor>
     _instance;
} _FasterRcnnFeatureExtractor_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, number_of_stages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, num_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, image_resizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, feature_extractor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_anchor_generator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_atrous_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_box_predictor_conv_hyperparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_box_predictor_kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_box_predictor_depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_minibatch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_positive_balance_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_nms_score_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_nms_iou_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_max_proposals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_localization_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, first_stage_objectness_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, initial_crop_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, maxpool_kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, maxpool_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_box_predictor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_balance_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_post_processing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_localization_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_classification_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_mask_prediction_loss_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, hard_example_miner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, second_stage_classification_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, inplace_batchnorm_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, use_matmul_crop_and_resize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, clip_anchors_to_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, use_matmul_gather_in_matcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, use_static_balanced_label_sampler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, use_static_shapes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, resize_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnn, use_static_shapes_for_eval_),
  20,
  8,
  0,
  1,
  2,
  21,
  3,
  22,
  23,
  24,
  25,
  9,
  26,
  27,
  28,
  29,
  10,
  11,
  12,
  4,
  30,
  31,
  5,
  32,
  33,
  34,
  6,
  7,
  13,
  14,
  15,
  16,
  17,
  18,
  35,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnnFeatureExtractor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnnFeatureExtractor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnnFeatureExtractor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnnFeatureExtractor, first_stage_features_stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FasterRcnnFeatureExtractor, batch_norm_trainable_),
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 41, sizeof(FasterRcnn)},
  { 77, 85, sizeof(FasterRcnnFeatureExtractor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FasterRcnn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FasterRcnnFeatureExtractor_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/faster_rcnn.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fhyperparams_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2flosses_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::InitDefaults();
  _FasterRcnn_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FasterRcnn_default_instance_);_FasterRcnnFeatureExtractor_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FasterRcnnFeatureExtractor_default_instance_);_FasterRcnn_default_instance_._instance.get_mutable()->image_resizer_ = const_cast< ::object_detection::protos::ImageResizer*>(
      ::object_detection::protos::ImageResizer::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->feature_extractor_ = const_cast< ::object_detection::protos::FasterRcnnFeatureExtractor*>(
      ::object_detection::protos::FasterRcnnFeatureExtractor::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->first_stage_anchor_generator_ = const_cast< ::object_detection::protos::AnchorGenerator*>(
      ::object_detection::protos::AnchorGenerator::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->first_stage_box_predictor_conv_hyperparams_ = const_cast< ::object_detection::protos::Hyperparams*>(
      ::object_detection::protos::Hyperparams::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->second_stage_box_predictor_ = const_cast< ::object_detection::protos::BoxPredictor*>(
      ::object_detection::protos::BoxPredictor::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->second_stage_post_processing_ = const_cast< ::object_detection::protos::PostProcessing*>(
      ::object_detection::protos::PostProcessing::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->hard_example_miner_ = const_cast< ::object_detection::protos::HardExampleMiner*>(
      ::object_detection::protos::HardExampleMiner::internal_default_instance());
  _FasterRcnn_default_instance_._instance.get_mutable()->second_stage_classification_loss_ = const_cast< ::object_detection::protos::ClassificationLoss*>(
      ::object_detection::protos::ClassificationLoss::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)object_detection/protos/faster_rcnn.pr"
      "oto\022\027object_detection.protos\032.object_det"
      "ection/protos/anchor_generator.proto\032+ob"
      "ject_detection/protos/box_predictor.prot"
      "o\032)object_detection/protos/hyperparams.p"
      "roto\032+object_detection/protos/image_resi"
      "zer.proto\032$object_detection/protos/losse"
      "s.proto\032-object_detection/protos/post_pr"
      "ocessing.proto\"\356\r\n\nFasterRcnn\022\033\n\020number_"
      "of_stages\030\001 \001(\005:\0012\022\023\n\013num_classes\030\003 \001(\005\022"
      "<\n\rimage_resizer\030\004 \001(\0132%.object_detectio"
      "n.protos.ImageResizer\022N\n\021feature_extract"
      "or\030\005 \001(\01323.object_detection.protos.Faste"
      "rRcnnFeatureExtractor\022N\n\034first_stage_anc"
      "hor_generator\030\006 \001(\0132(.object_detection.p"
      "rotos.AnchorGenerator\022\"\n\027first_stage_atr"
      "ous_rate\030\007 \001(\005:\0011\022X\n*first_stage_box_pre"
      "dictor_conv_hyperparams\030\010 \001(\0132$.object_d"
      "etection.protos.Hyperparams\0220\n%first_sta"
      "ge_box_predictor_kernel_size\030\t \001(\005:\0013\022,\n"
      "\037first_stage_box_predictor_depth\030\n \001(\005:\003"
      "512\022\'\n\032first_stage_minibatch_size\030\013 \001(\005:"
      "\003256\0222\n%first_stage_positive_balance_fra"
      "ction\030\014 \001(\002:\0030.5\022*\n\037first_stage_nms_scor"
      "e_threshold\030\r \001(\002:\0010\022*\n\035first_stage_nms_"
      "iou_threshold\030\016 \001(\002:\0030.7\022&\n\031first_stage_"
      "max_proposals\030\017 \001(\005:\003300\022/\n$first_stage_"
      "localization_loss_weight\030\020 \001(\002:\0011\022-\n\"fir"
      "st_stage_objectness_loss_weight\030\021 \001(\002:\0011"
      "\022\031\n\021initial_crop_size\030\022 \001(\005\022\033\n\023maxpool_k"
      "ernel_size\030\023 \001(\005\022\026\n\016maxpool_stride\030\024 \001(\005"
      "\022I\n\032second_stage_box_predictor\030\025 \001(\0132%.o"
      "bject_detection.protos.BoxPredictor\022#\n\027s"
      "econd_stage_batch_size\030\026 \001(\005:\00264\022+\n\035seco"
      "nd_stage_balance_fraction\030\027 \001(\002:\0040.25\022M\n"
      "\034second_stage_post_processing\030\030 \001(\0132\'.ob"
      "ject_detection.protos.PostProcessing\0220\n%"
      "second_stage_localization_loss_weight\030\031 "
      "\001(\002:\0011\0222\n\'second_stage_classification_lo"
      "ss_weight\030\032 \001(\002:\0011\0223\n(second_stage_mask_"
      "prediction_loss_weight\030\033 \001(\002:\0011\022E\n\022hard_"
      "example_miner\030\034 \001(\0132).object_detection.p"
      "rotos.HardExampleMiner\022U\n second_stage_c"
      "lassification_loss\030\035 \001(\0132+.object_detect"
      "ion.protos.ClassificationLoss\022\'\n\030inplace"
      "_batchnorm_update\030\036 \001(\010:\005false\022)\n\032use_ma"
      "tmul_crop_and_resize\030\037 \001(\010:\005false\022$\n\025cli"
      "p_anchors_to_image\030  \001(\010:\005false\022+\n\034use_m"
      "atmul_gather_in_matcher\030! \001(\010:\005false\0220\n!"
      "use_static_balanced_label_sampler\030\" \001(\010:"
      "\005false\022 \n\021use_static_shapes\030# \001(\010:\005false"
      "\022\032\n\014resize_masks\030$ \001(\010:\004true\022)\n\032use_stat"
      "ic_shapes_for_eval\030% \001(\010:\005false\"x\n\032Faste"
      "rRcnnFeatureExtractor\022\014\n\004type\030\001 \001(\t\022\'\n\033f"
      "irst_stage_features_stride\030\002 \001(\005:\00216\022#\n\024"
      "batch_norm_trainable\030\003 \001(\010:\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/faster_rcnn.proto", &protobuf_RegisterTypes);
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fanchor_5fgenerator_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbox_5fpredictor_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fhyperparams_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2flosses_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fpost_5fprocessing_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FasterRcnn::kNumberOfStagesFieldNumber;
const int FasterRcnn::kNumClassesFieldNumber;
const int FasterRcnn::kImageResizerFieldNumber;
const int FasterRcnn::kFeatureExtractorFieldNumber;
const int FasterRcnn::kFirstStageAnchorGeneratorFieldNumber;
const int FasterRcnn::kFirstStageAtrousRateFieldNumber;
const int FasterRcnn::kFirstStageBoxPredictorConvHyperparamsFieldNumber;
const int FasterRcnn::kFirstStageBoxPredictorKernelSizeFieldNumber;
const int FasterRcnn::kFirstStageBoxPredictorDepthFieldNumber;
const int FasterRcnn::kFirstStageMinibatchSizeFieldNumber;
const int FasterRcnn::kFirstStagePositiveBalanceFractionFieldNumber;
const int FasterRcnn::kFirstStageNmsScoreThresholdFieldNumber;
const int FasterRcnn::kFirstStageNmsIouThresholdFieldNumber;
const int FasterRcnn::kFirstStageMaxProposalsFieldNumber;
const int FasterRcnn::kFirstStageLocalizationLossWeightFieldNumber;
const int FasterRcnn::kFirstStageObjectnessLossWeightFieldNumber;
const int FasterRcnn::kInitialCropSizeFieldNumber;
const int FasterRcnn::kMaxpoolKernelSizeFieldNumber;
const int FasterRcnn::kMaxpoolStrideFieldNumber;
const int FasterRcnn::kSecondStageBoxPredictorFieldNumber;
const int FasterRcnn::kSecondStageBatchSizeFieldNumber;
const int FasterRcnn::kSecondStageBalanceFractionFieldNumber;
const int FasterRcnn::kSecondStagePostProcessingFieldNumber;
const int FasterRcnn::kSecondStageLocalizationLossWeightFieldNumber;
const int FasterRcnn::kSecondStageClassificationLossWeightFieldNumber;
const int FasterRcnn::kSecondStageMaskPredictionLossWeightFieldNumber;
const int FasterRcnn::kHardExampleMinerFieldNumber;
const int FasterRcnn::kSecondStageClassificationLossFieldNumber;
const int FasterRcnn::kInplaceBatchnormUpdateFieldNumber;
const int FasterRcnn::kUseMatmulCropAndResizeFieldNumber;
const int FasterRcnn::kClipAnchorsToImageFieldNumber;
const int FasterRcnn::kUseMatmulGatherInMatcherFieldNumber;
const int FasterRcnn::kUseStaticBalancedLabelSamplerFieldNumber;
const int FasterRcnn::kUseStaticShapesFieldNumber;
const int FasterRcnn::kResizeMasksFieldNumber;
const int FasterRcnn::kUseStaticShapesForEvalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FasterRcnn::FasterRcnn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FasterRcnn)
}
FasterRcnn::FasterRcnn(const FasterRcnn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_resizer()) {
    image_resizer_ = new ::object_detection::protos::ImageResizer(*from.image_resizer_);
  } else {
    image_resizer_ = NULL;
  }
  if (from.has_feature_extractor()) {
    feature_extractor_ = new ::object_detection::protos::FasterRcnnFeatureExtractor(*from.feature_extractor_);
  } else {
    feature_extractor_ = NULL;
  }
  if (from.has_first_stage_anchor_generator()) {
    first_stage_anchor_generator_ = new ::object_detection::protos::AnchorGenerator(*from.first_stage_anchor_generator_);
  } else {
    first_stage_anchor_generator_ = NULL;
  }
  if (from.has_first_stage_box_predictor_conv_hyperparams()) {
    first_stage_box_predictor_conv_hyperparams_ = new ::object_detection::protos::Hyperparams(*from.first_stage_box_predictor_conv_hyperparams_);
  } else {
    first_stage_box_predictor_conv_hyperparams_ = NULL;
  }
  if (from.has_second_stage_box_predictor()) {
    second_stage_box_predictor_ = new ::object_detection::protos::BoxPredictor(*from.second_stage_box_predictor_);
  } else {
    second_stage_box_predictor_ = NULL;
  }
  if (from.has_second_stage_post_processing()) {
    second_stage_post_processing_ = new ::object_detection::protos::PostProcessing(*from.second_stage_post_processing_);
  } else {
    second_stage_post_processing_ = NULL;
  }
  if (from.has_hard_example_miner()) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner(*from.hard_example_miner_);
  } else {
    hard_example_miner_ = NULL;
  }
  if (from.has_second_stage_classification_loss()) {
    second_stage_classification_loss_ = new ::object_detection::protos::ClassificationLoss(*from.second_stage_classification_loss_);
  } else {
    second_stage_classification_loss_ = NULL;
  }
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&resize_masks_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(resize_masks_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FasterRcnn)
}

void FasterRcnn::SharedCtor() {
  ::memset(&image_resizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_static_shapes_for_eval_) -
      reinterpret_cast<char*>(&image_resizer_)) + sizeof(use_static_shapes_for_eval_));
  number_of_stages_ = 2;
  first_stage_atrous_rate_ = 1;
  first_stage_box_predictor_kernel_size_ = 3;
  first_stage_box_predictor_depth_ = 512;
  first_stage_minibatch_size_ = 256;
  first_stage_positive_balance_fraction_ = 0.5f;
  first_stage_nms_iou_threshold_ = 0.7f;
  first_stage_max_proposals_ = 300;
  first_stage_localization_loss_weight_ = 1;
  first_stage_objectness_loss_weight_ = 1;
  second_stage_batch_size_ = 64;
  second_stage_balance_fraction_ = 0.25f;
  second_stage_localization_loss_weight_ = 1;
  second_stage_classification_loss_weight_ = 1;
  second_stage_mask_prediction_loss_weight_ = 1;
  resize_masks_ = true;
  _cached_size_ = 0;
}

FasterRcnn::~FasterRcnn() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FasterRcnn)
  SharedDtor();
}

void FasterRcnn::SharedDtor() {
  if (this != internal_default_instance()) delete image_resizer_;
  if (this != internal_default_instance()) delete feature_extractor_;
  if (this != internal_default_instance()) delete first_stage_anchor_generator_;
  if (this != internal_default_instance()) delete first_stage_box_predictor_conv_hyperparams_;
  if (this != internal_default_instance()) delete second_stage_box_predictor_;
  if (this != internal_default_instance()) delete second_stage_post_processing_;
  if (this != internal_default_instance()) delete hard_example_miner_;
  if (this != internal_default_instance()) delete second_stage_classification_loss_;
}

void FasterRcnn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FasterRcnn::descriptor() {
  protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FasterRcnn& FasterRcnn::default_instance() {
  protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::InitDefaults();
  return *internal_default_instance();
}

FasterRcnn* FasterRcnn::New(::google::protobuf::Arena* arena) const {
  FasterRcnn* n = new FasterRcnn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FasterRcnn::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FasterRcnn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(image_resizer_ != NULL);
      image_resizer_->::object_detection::protos::ImageResizer::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feature_extractor_ != NULL);
      feature_extractor_->::object_detection::protos::FasterRcnnFeatureExtractor::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(first_stage_anchor_generator_ != NULL);
      first_stage_anchor_generator_->::object_detection::protos::AnchorGenerator::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(first_stage_box_predictor_conv_hyperparams_ != NULL);
      first_stage_box_predictor_conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(second_stage_box_predictor_ != NULL);
      second_stage_box_predictor_->::object_detection::protos::BoxPredictor::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(second_stage_post_processing_ != NULL);
      second_stage_post_processing_->::object_detection::protos::PostProcessing::Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(hard_example_miner_ != NULL);
      hard_example_miner_->::object_detection::protos::HardExampleMiner::Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(second_stage_classification_loss_ != NULL);
      second_stage_classification_loss_->::object_detection::protos::ClassificationLoss::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    ::memset(&num_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clip_anchors_to_image_) -
        reinterpret_cast<char*>(&num_classes_)) + sizeof(clip_anchors_to_image_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&use_matmul_gather_in_matcher_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_static_shapes_for_eval_) -
        reinterpret_cast<char*>(&use_matmul_gather_in_matcher_)) + sizeof(use_static_shapes_for_eval_));
    number_of_stages_ = 2;
    first_stage_atrous_rate_ = 1;
    first_stage_box_predictor_kernel_size_ = 3;
    first_stage_box_predictor_depth_ = 512;
  }
  if (cached_has_bits & 4278190080u) {
    first_stage_minibatch_size_ = 256;
    first_stage_positive_balance_fraction_ = 0.5f;
    first_stage_nms_iou_threshold_ = 0.7f;
    first_stage_max_proposals_ = 300;
    first_stage_localization_loss_weight_ = 1;
    first_stage_objectness_loss_weight_ = 1;
    second_stage_batch_size_ = 64;
    second_stage_balance_fraction_ = 0.25f;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 15u) {
    second_stage_localization_loss_weight_ = 1;
    second_stage_classification_loss_weight_ = 1;
    second_stage_mask_prediction_loss_weight_ = 1;
    resize_masks_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FasterRcnn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FasterRcnn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number_of_stages = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_number_of_stages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_stages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_classes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ImageResizer image_resizer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_extractor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_stage_anchor_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_atrous_rate = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_first_stage_atrous_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_atrous_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_stage_box_predictor_conv_hyperparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_first_stage_box_predictor_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_box_predictor_kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_first_stage_box_predictor_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_box_predictor_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_minibatch_size = 11 [default = 256];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_first_stage_minibatch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_minibatch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_first_stage_positive_balance_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_positive_balance_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_nms_score_threshold = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_first_stage_nms_score_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_nms_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_first_stage_nms_iou_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_nms_iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_max_proposals = 15 [default = 300];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_first_stage_max_proposals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_max_proposals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_localization_loss_weight = 16 [default = 1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_first_stage_localization_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_localization_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float first_stage_objectness_loss_weight = 17 [default = 1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_first_stage_objectness_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_stage_objectness_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 initial_crop_size = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_initial_crop_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_crop_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxpool_kernel_size = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_maxpool_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpool_kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxpool_stride = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_maxpool_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpool_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second_stage_box_predictor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 second_stage_batch_size = 22 [default = 64];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_second_stage_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_stage_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_balance_fraction = 23 [default = 0.25];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_second_stage_balance_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_balance_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second_stage_post_processing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_localization_loss_weight = 25 [default = 1];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {
          set_has_second_stage_localization_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_localization_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_classification_loss_weight = 26 [default = 1];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_second_stage_classification_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_classification_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_second_stage_mask_prediction_loss_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_stage_mask_prediction_loss_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_example_miner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second_stage_classification_loss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inplace_batchnorm_update = 30 [default = false];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_inplace_batchnorm_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inplace_batchnorm_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_matmul_crop_and_resize = 31 [default = false];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_use_matmul_crop_and_resize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_matmul_crop_and_resize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clip_anchors_to_image = 32 [default = false];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_clip_anchors_to_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clip_anchors_to_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_matmul_gather_in_matcher = 33 [default = false];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_use_matmul_gather_in_matcher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_matmul_gather_in_matcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_balanced_label_sampler = 34 [default = false];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_use_static_balanced_label_sampler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_balanced_label_sampler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_shapes = 35 [default = false];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_use_static_shapes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_shapes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool resize_masks = 36 [default = true];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_resize_masks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resize_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_static_shapes_for_eval = 37 [default = false];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_use_static_shapes_for_eval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_static_shapes_for_eval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FasterRcnn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FasterRcnn)
  return false;
#undef DO_
}

void FasterRcnn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FasterRcnn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_stages = 1 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number_of_stages(), output);
  }

  // optional int32 num_classes = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_classes(), output);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->image_resizer_, output);
  }

  // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->feature_extractor_, output);
  }

  // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->first_stage_anchor_generator_, output);
  }

  // optional int32 first_stage_atrous_rate = 7 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->first_stage_atrous_rate(), output);
  }

  // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->first_stage_box_predictor_conv_hyperparams_, output);
  }

  // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->first_stage_box_predictor_kernel_size(), output);
  }

  // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->first_stage_box_predictor_depth(), output);
  }

  // optional int32 first_stage_minibatch_size = 11 [default = 256];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->first_stage_minibatch_size(), output);
  }

  // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->first_stage_positive_balance_fraction(), output);
  }

  // optional float first_stage_nms_score_threshold = 13 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->first_stage_nms_score_threshold(), output);
  }

  // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->first_stage_nms_iou_threshold(), output);
  }

  // optional int32 first_stage_max_proposals = 15 [default = 300];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->first_stage_max_proposals(), output);
  }

  // optional float first_stage_localization_loss_weight = 16 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->first_stage_localization_loss_weight(), output);
  }

  // optional float first_stage_objectness_loss_weight = 17 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->first_stage_objectness_loss_weight(), output);
  }

  // optional int32 initial_crop_size = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->initial_crop_size(), output);
  }

  // optional int32 maxpool_kernel_size = 19;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->maxpool_kernel_size(), output);
  }

  // optional int32 maxpool_stride = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->maxpool_stride(), output);
  }

  // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->second_stage_box_predictor_, output);
  }

  // optional int32 second_stage_batch_size = 22 [default = 64];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->second_stage_batch_size(), output);
  }

  // optional float second_stage_balance_fraction = 23 [default = 0.25];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->second_stage_balance_fraction(), output);
  }

  // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->second_stage_post_processing_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float second_stage_localization_loss_weight = 25 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->second_stage_localization_loss_weight(), output);
  }

  // optional float second_stage_classification_loss_weight = 26 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->second_stage_classification_loss_weight(), output);
  }

  // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->second_stage_mask_prediction_loss_weight(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->hard_example_miner_, output);
  }

  // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->second_stage_classification_loss_, output);
  }

  // optional bool inplace_batchnorm_update = 30 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->inplace_batchnorm_update(), output);
  }

  // optional bool use_matmul_crop_and_resize = 31 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->use_matmul_crop_and_resize(), output);
  }

  // optional bool clip_anchors_to_image = 32 [default = false];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->clip_anchors_to_image(), output);
  }

  // optional bool use_matmul_gather_in_matcher = 33 [default = false];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->use_matmul_gather_in_matcher(), output);
  }

  // optional bool use_static_balanced_label_sampler = 34 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->use_static_balanced_label_sampler(), output);
  }

  // optional bool use_static_shapes = 35 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->use_static_shapes(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool resize_masks = 36 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->resize_masks(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_static_shapes_for_eval = 37 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->use_static_shapes_for_eval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FasterRcnn)
}

::google::protobuf::uint8* FasterRcnn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FasterRcnn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 number_of_stages = 1 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number_of_stages(), target);
  }

  // optional int32 num_classes = 3;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_classes(), target);
  }

  // optional .object_detection.protos.ImageResizer image_resizer = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->image_resizer_, deterministic, target);
  }

  // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->feature_extractor_, deterministic, target);
  }

  // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->first_stage_anchor_generator_, deterministic, target);
  }

  // optional int32 first_stage_atrous_rate = 7 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->first_stage_atrous_rate(), target);
  }

  // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->first_stage_box_predictor_conv_hyperparams_, deterministic, target);
  }

  // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->first_stage_box_predictor_kernel_size(), target);
  }

  // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->first_stage_box_predictor_depth(), target);
  }

  // optional int32 first_stage_minibatch_size = 11 [default = 256];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->first_stage_minibatch_size(), target);
  }

  // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->first_stage_positive_balance_fraction(), target);
  }

  // optional float first_stage_nms_score_threshold = 13 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->first_stage_nms_score_threshold(), target);
  }

  // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->first_stage_nms_iou_threshold(), target);
  }

  // optional int32 first_stage_max_proposals = 15 [default = 300];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->first_stage_max_proposals(), target);
  }

  // optional float first_stage_localization_loss_weight = 16 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->first_stage_localization_loss_weight(), target);
  }

  // optional float first_stage_objectness_loss_weight = 17 [default = 1];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->first_stage_objectness_loss_weight(), target);
  }

  // optional int32 initial_crop_size = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->initial_crop_size(), target);
  }

  // optional int32 maxpool_kernel_size = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->maxpool_kernel_size(), target);
  }

  // optional int32 maxpool_stride = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->maxpool_stride(), target);
  }

  // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->second_stage_box_predictor_, deterministic, target);
  }

  // optional int32 second_stage_batch_size = 22 [default = 64];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->second_stage_batch_size(), target);
  }

  // optional float second_stage_balance_fraction = 23 [default = 0.25];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->second_stage_balance_fraction(), target);
  }

  // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->second_stage_post_processing_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float second_stage_localization_loss_weight = 25 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->second_stage_localization_loss_weight(), target);
  }

  // optional float second_stage_classification_loss_weight = 26 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->second_stage_classification_loss_weight(), target);
  }

  // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->second_stage_mask_prediction_loss_weight(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->hard_example_miner_, deterministic, target);
  }

  // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->second_stage_classification_loss_, deterministic, target);
  }

  // optional bool inplace_batchnorm_update = 30 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->inplace_batchnorm_update(), target);
  }

  // optional bool use_matmul_crop_and_resize = 31 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->use_matmul_crop_and_resize(), target);
  }

  // optional bool clip_anchors_to_image = 32 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->clip_anchors_to_image(), target);
  }

  // optional bool use_matmul_gather_in_matcher = 33 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->use_matmul_gather_in_matcher(), target);
  }

  // optional bool use_static_balanced_label_sampler = 34 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->use_static_balanced_label_sampler(), target);
  }

  // optional bool use_static_shapes = 35 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->use_static_shapes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool resize_masks = 36 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->resize_masks(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_static_shapes_for_eval = 37 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->use_static_shapes_for_eval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FasterRcnn)
  return target;
}

size_t FasterRcnn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FasterRcnn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .object_detection.protos.ImageResizer image_resizer = 4;
    if (has_image_resizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_resizer_);
    }

    // optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
    if (has_feature_extractor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feature_extractor_);
    }

    // optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
    if (has_first_stage_anchor_generator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->first_stage_anchor_generator_);
    }

    // optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
    if (has_first_stage_box_predictor_conv_hyperparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->first_stage_box_predictor_conv_hyperparams_);
    }

    // optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
    if (has_second_stage_box_predictor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->second_stage_box_predictor_);
    }

    // optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
    if (has_second_stage_post_processing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->second_stage_post_processing_);
    }

    // optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
    if (has_hard_example_miner()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hard_example_miner_);
    }

    // optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
    if (has_second_stage_classification_loss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->second_stage_classification_loss_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 num_classes = 3;
    if (has_num_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional float first_stage_nms_score_threshold = 13 [default = 0];
    if (has_first_stage_nms_score_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 initial_crop_size = 18;
    if (has_initial_crop_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_crop_size());
    }

    // optional int32 maxpool_kernel_size = 19;
    if (has_maxpool_kernel_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpool_kernel_size());
    }

    // optional int32 maxpool_stride = 20;
    if (has_maxpool_stride()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpool_stride());
    }

    // optional bool inplace_batchnorm_update = 30 [default = false];
    if (has_inplace_batchnorm_update()) {
      total_size += 2 + 1;
    }

    // optional bool use_matmul_crop_and_resize = 31 [default = false];
    if (has_use_matmul_crop_and_resize()) {
      total_size += 2 + 1;
    }

    // optional bool clip_anchors_to_image = 32 [default = false];
    if (has_clip_anchors_to_image()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool use_matmul_gather_in_matcher = 33 [default = false];
    if (has_use_matmul_gather_in_matcher()) {
      total_size += 2 + 1;
    }

    // optional bool use_static_balanced_label_sampler = 34 [default = false];
    if (has_use_static_balanced_label_sampler()) {
      total_size += 2 + 1;
    }

    // optional bool use_static_shapes = 35 [default = false];
    if (has_use_static_shapes()) {
      total_size += 2 + 1;
    }

    // optional bool use_static_shapes_for_eval = 37 [default = false];
    if (has_use_static_shapes_for_eval()) {
      total_size += 2 + 1;
    }

    // optional int32 number_of_stages = 1 [default = 2];
    if (has_number_of_stages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_of_stages());
    }

    // optional int32 first_stage_atrous_rate = 7 [default = 1];
    if (has_first_stage_atrous_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_stage_atrous_rate());
    }

    // optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
    if (has_first_stage_box_predictor_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_stage_box_predictor_kernel_size());
    }

    // optional int32 first_stage_box_predictor_depth = 10 [default = 512];
    if (has_first_stage_box_predictor_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_stage_box_predictor_depth());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 first_stage_minibatch_size = 11 [default = 256];
    if (has_first_stage_minibatch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_stage_minibatch_size());
    }

    // optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
    if (has_first_stage_positive_balance_fraction()) {
      total_size += 1 + 4;
    }

    // optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
    if (has_first_stage_nms_iou_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 first_stage_max_proposals = 15 [default = 300];
    if (has_first_stage_max_proposals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_stage_max_proposals());
    }

    // optional float first_stage_localization_loss_weight = 16 [default = 1];
    if (has_first_stage_localization_loss_weight()) {
      total_size += 2 + 4;
    }

    // optional float first_stage_objectness_loss_weight = 17 [default = 1];
    if (has_first_stage_objectness_loss_weight()) {
      total_size += 2 + 4;
    }

    // optional int32 second_stage_batch_size = 22 [default = 64];
    if (has_second_stage_batch_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_stage_batch_size());
    }

    // optional float second_stage_balance_fraction = 23 [default = 0.25];
    if (has_second_stage_balance_fraction()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 15u) {
    // optional float second_stage_localization_loss_weight = 25 [default = 1];
    if (has_second_stage_localization_loss_weight()) {
      total_size += 2 + 4;
    }

    // optional float second_stage_classification_loss_weight = 26 [default = 1];
    if (has_second_stage_classification_loss_weight()) {
      total_size += 2 + 4;
    }

    // optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
    if (has_second_stage_mask_prediction_loss_weight()) {
      total_size += 2 + 4;
    }

    // optional bool resize_masks = 36 [default = true];
    if (has_resize_masks()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FasterRcnn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FasterRcnn)
  GOOGLE_DCHECK_NE(&from, this);
  const FasterRcnn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FasterRcnn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FasterRcnn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FasterRcnn)
    MergeFrom(*source);
  }
}

void FasterRcnn::MergeFrom(const FasterRcnn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FasterRcnn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_image_resizer()->::object_detection::protos::ImageResizer::MergeFrom(from.image_resizer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_feature_extractor()->::object_detection::protos::FasterRcnnFeatureExtractor::MergeFrom(from.feature_extractor());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_first_stage_anchor_generator()->::object_detection::protos::AnchorGenerator::MergeFrom(from.first_stage_anchor_generator());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_first_stage_box_predictor_conv_hyperparams()->::object_detection::protos::Hyperparams::MergeFrom(from.first_stage_box_predictor_conv_hyperparams());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_second_stage_box_predictor()->::object_detection::protos::BoxPredictor::MergeFrom(from.second_stage_box_predictor());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_second_stage_post_processing()->::object_detection::protos::PostProcessing::MergeFrom(from.second_stage_post_processing());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_hard_example_miner()->::object_detection::protos::HardExampleMiner::MergeFrom(from.hard_example_miner());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_second_stage_classification_loss()->::object_detection::protos::ClassificationLoss::MergeFrom(from.second_stage_classification_loss());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_stage_nms_score_threshold_ = from.first_stage_nms_score_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      initial_crop_size_ = from.initial_crop_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      maxpool_kernel_size_ = from.maxpool_kernel_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      maxpool_stride_ = from.maxpool_stride_;
    }
    if (cached_has_bits & 0x00002000u) {
      inplace_batchnorm_update_ = from.inplace_batchnorm_update_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_matmul_crop_and_resize_ = from.use_matmul_crop_and_resize_;
    }
    if (cached_has_bits & 0x00008000u) {
      clip_anchors_to_image_ = from.clip_anchors_to_image_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      use_matmul_gather_in_matcher_ = from.use_matmul_gather_in_matcher_;
    }
    if (cached_has_bits & 0x00020000u) {
      use_static_balanced_label_sampler_ = from.use_static_balanced_label_sampler_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_static_shapes_ = from.use_static_shapes_;
    }
    if (cached_has_bits & 0x00080000u) {
      use_static_shapes_for_eval_ = from.use_static_shapes_for_eval_;
    }
    if (cached_has_bits & 0x00100000u) {
      number_of_stages_ = from.number_of_stages_;
    }
    if (cached_has_bits & 0x00200000u) {
      first_stage_atrous_rate_ = from.first_stage_atrous_rate_;
    }
    if (cached_has_bits & 0x00400000u) {
      first_stage_box_predictor_kernel_size_ = from.first_stage_box_predictor_kernel_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      first_stage_box_predictor_depth_ = from.first_stage_box_predictor_depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      first_stage_minibatch_size_ = from.first_stage_minibatch_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      first_stage_positive_balance_fraction_ = from.first_stage_positive_balance_fraction_;
    }
    if (cached_has_bits & 0x04000000u) {
      first_stage_nms_iou_threshold_ = from.first_stage_nms_iou_threshold_;
    }
    if (cached_has_bits & 0x08000000u) {
      first_stage_max_proposals_ = from.first_stage_max_proposals_;
    }
    if (cached_has_bits & 0x10000000u) {
      first_stage_localization_loss_weight_ = from.first_stage_localization_loss_weight_;
    }
    if (cached_has_bits & 0x20000000u) {
      first_stage_objectness_loss_weight_ = from.first_stage_objectness_loss_weight_;
    }
    if (cached_has_bits & 0x40000000u) {
      second_stage_batch_size_ = from.second_stage_batch_size_;
    }
    if (cached_has_bits & 0x80000000u) {
      second_stage_balance_fraction_ = from.second_stage_balance_fraction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      second_stage_localization_loss_weight_ = from.second_stage_localization_loss_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      second_stage_classification_loss_weight_ = from.second_stage_classification_loss_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      second_stage_mask_prediction_loss_weight_ = from.second_stage_mask_prediction_loss_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      resize_masks_ = from.resize_masks_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void FasterRcnn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FasterRcnn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FasterRcnn::CopyFrom(const FasterRcnn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FasterRcnn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FasterRcnn::IsInitialized() const {
  return true;
}

void FasterRcnn::Swap(FasterRcnn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FasterRcnn::InternalSwap(FasterRcnn* other) {
  using std::swap;
  swap(image_resizer_, other->image_resizer_);
  swap(feature_extractor_, other->feature_extractor_);
  swap(first_stage_anchor_generator_, other->first_stage_anchor_generator_);
  swap(first_stage_box_predictor_conv_hyperparams_, other->first_stage_box_predictor_conv_hyperparams_);
  swap(second_stage_box_predictor_, other->second_stage_box_predictor_);
  swap(second_stage_post_processing_, other->second_stage_post_processing_);
  swap(hard_example_miner_, other->hard_example_miner_);
  swap(second_stage_classification_loss_, other->second_stage_classification_loss_);
  swap(num_classes_, other->num_classes_);
  swap(first_stage_nms_score_threshold_, other->first_stage_nms_score_threshold_);
  swap(initial_crop_size_, other->initial_crop_size_);
  swap(maxpool_kernel_size_, other->maxpool_kernel_size_);
  swap(maxpool_stride_, other->maxpool_stride_);
  swap(inplace_batchnorm_update_, other->inplace_batchnorm_update_);
  swap(use_matmul_crop_and_resize_, other->use_matmul_crop_and_resize_);
  swap(clip_anchors_to_image_, other->clip_anchors_to_image_);
  swap(use_matmul_gather_in_matcher_, other->use_matmul_gather_in_matcher_);
  swap(use_static_balanced_label_sampler_, other->use_static_balanced_label_sampler_);
  swap(use_static_shapes_, other->use_static_shapes_);
  swap(use_static_shapes_for_eval_, other->use_static_shapes_for_eval_);
  swap(number_of_stages_, other->number_of_stages_);
  swap(first_stage_atrous_rate_, other->first_stage_atrous_rate_);
  swap(first_stage_box_predictor_kernel_size_, other->first_stage_box_predictor_kernel_size_);
  swap(first_stage_box_predictor_depth_, other->first_stage_box_predictor_depth_);
  swap(first_stage_minibatch_size_, other->first_stage_minibatch_size_);
  swap(first_stage_positive_balance_fraction_, other->first_stage_positive_balance_fraction_);
  swap(first_stage_nms_iou_threshold_, other->first_stage_nms_iou_threshold_);
  swap(first_stage_max_proposals_, other->first_stage_max_proposals_);
  swap(first_stage_localization_loss_weight_, other->first_stage_localization_loss_weight_);
  swap(first_stage_objectness_loss_weight_, other->first_stage_objectness_loss_weight_);
  swap(second_stage_batch_size_, other->second_stage_batch_size_);
  swap(second_stage_balance_fraction_, other->second_stage_balance_fraction_);
  swap(second_stage_localization_loss_weight_, other->second_stage_localization_loss_weight_);
  swap(second_stage_classification_loss_weight_, other->second_stage_classification_loss_weight_);
  swap(second_stage_mask_prediction_loss_weight_, other->second_stage_mask_prediction_loss_weight_);
  swap(resize_masks_, other->resize_masks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FasterRcnn::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FasterRcnn

// optional int32 number_of_stages = 1 [default = 2];
bool FasterRcnn::has_number_of_stages() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void FasterRcnn::set_has_number_of_stages() {
  _has_bits_[0] |= 0x00100000u;
}
void FasterRcnn::clear_has_number_of_stages() {
  _has_bits_[0] &= ~0x00100000u;
}
void FasterRcnn::clear_number_of_stages() {
  number_of_stages_ = 2;
  clear_has_number_of_stages();
}
::google::protobuf::int32 FasterRcnn::number_of_stages() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.number_of_stages)
  return number_of_stages_;
}
void FasterRcnn::set_number_of_stages(::google::protobuf::int32 value) {
  set_has_number_of_stages();
  number_of_stages_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.number_of_stages)
}

// optional int32 num_classes = 3;
bool FasterRcnn::has_num_classes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FasterRcnn::set_has_num_classes() {
  _has_bits_[0] |= 0x00000100u;
}
void FasterRcnn::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000100u;
}
void FasterRcnn::clear_num_classes() {
  num_classes_ = 0;
  clear_has_num_classes();
}
::google::protobuf::int32 FasterRcnn::num_classes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.num_classes)
  return num_classes_;
}
void FasterRcnn::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.num_classes)
}

// optional .object_detection.protos.ImageResizer image_resizer = 4;
bool FasterRcnn::has_image_resizer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FasterRcnn::set_has_image_resizer() {
  _has_bits_[0] |= 0x00000001u;
}
void FasterRcnn::clear_has_image_resizer() {
  _has_bits_[0] &= ~0x00000001u;
}
void FasterRcnn::clear_image_resizer() {
  if (image_resizer_ != NULL) image_resizer_->::object_detection::protos::ImageResizer::Clear();
  clear_has_image_resizer();
}
const ::object_detection::protos::ImageResizer& FasterRcnn::image_resizer() const {
  const ::object_detection::protos::ImageResizer* p = image_resizer_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.image_resizer)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ImageResizer*>(
      &::object_detection::protos::_ImageResizer_default_instance_);
}
::object_detection::protos::ImageResizer* FasterRcnn::mutable_image_resizer() {
  set_has_image_resizer();
  if (image_resizer_ == NULL) {
    image_resizer_ = new ::object_detection::protos::ImageResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.image_resizer)
  return image_resizer_;
}
::object_detection::protos::ImageResizer* FasterRcnn::release_image_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.image_resizer)
  clear_has_image_resizer();
  ::object_detection::protos::ImageResizer* temp = image_resizer_;
  image_resizer_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_image_resizer(::object_detection::protos::ImageResizer* image_resizer) {
  delete image_resizer_;
  image_resizer_ = image_resizer;
  if (image_resizer) {
    set_has_image_resizer();
  } else {
    clear_has_image_resizer();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.image_resizer)
}

// optional .object_detection.protos.FasterRcnnFeatureExtractor feature_extractor = 5;
bool FasterRcnn::has_feature_extractor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FasterRcnn::set_has_feature_extractor() {
  _has_bits_[0] |= 0x00000002u;
}
void FasterRcnn::clear_has_feature_extractor() {
  _has_bits_[0] &= ~0x00000002u;
}
void FasterRcnn::clear_feature_extractor() {
  if (feature_extractor_ != NULL) feature_extractor_->::object_detection::protos::FasterRcnnFeatureExtractor::Clear();
  clear_has_feature_extractor();
}
const ::object_detection::protos::FasterRcnnFeatureExtractor& FasterRcnn::feature_extractor() const {
  const ::object_detection::protos::FasterRcnnFeatureExtractor* p = feature_extractor_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.feature_extractor)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::FasterRcnnFeatureExtractor*>(
      &::object_detection::protos::_FasterRcnnFeatureExtractor_default_instance_);
}
::object_detection::protos::FasterRcnnFeatureExtractor* FasterRcnn::mutable_feature_extractor() {
  set_has_feature_extractor();
  if (feature_extractor_ == NULL) {
    feature_extractor_ = new ::object_detection::protos::FasterRcnnFeatureExtractor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.feature_extractor)
  return feature_extractor_;
}
::object_detection::protos::FasterRcnnFeatureExtractor* FasterRcnn::release_feature_extractor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.feature_extractor)
  clear_has_feature_extractor();
  ::object_detection::protos::FasterRcnnFeatureExtractor* temp = feature_extractor_;
  feature_extractor_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_feature_extractor(::object_detection::protos::FasterRcnnFeatureExtractor* feature_extractor) {
  delete feature_extractor_;
  feature_extractor_ = feature_extractor;
  if (feature_extractor) {
    set_has_feature_extractor();
  } else {
    clear_has_feature_extractor();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.feature_extractor)
}

// optional .object_detection.protos.AnchorGenerator first_stage_anchor_generator = 6;
bool FasterRcnn::has_first_stage_anchor_generator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FasterRcnn::set_has_first_stage_anchor_generator() {
  _has_bits_[0] |= 0x00000004u;
}
void FasterRcnn::clear_has_first_stage_anchor_generator() {
  _has_bits_[0] &= ~0x00000004u;
}
void FasterRcnn::clear_first_stage_anchor_generator() {
  if (first_stage_anchor_generator_ != NULL) first_stage_anchor_generator_->::object_detection::protos::AnchorGenerator::Clear();
  clear_has_first_stage_anchor_generator();
}
const ::object_detection::protos::AnchorGenerator& FasterRcnn::first_stage_anchor_generator() const {
  const ::object_detection::protos::AnchorGenerator* p = first_stage_anchor_generator_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::AnchorGenerator*>(
      &::object_detection::protos::_AnchorGenerator_default_instance_);
}
::object_detection::protos::AnchorGenerator* FasterRcnn::mutable_first_stage_anchor_generator() {
  set_has_first_stage_anchor_generator();
  if (first_stage_anchor_generator_ == NULL) {
    first_stage_anchor_generator_ = new ::object_detection::protos::AnchorGenerator;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
  return first_stage_anchor_generator_;
}
::object_detection::protos::AnchorGenerator* FasterRcnn::release_first_stage_anchor_generator() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
  clear_has_first_stage_anchor_generator();
  ::object_detection::protos::AnchorGenerator* temp = first_stage_anchor_generator_;
  first_stage_anchor_generator_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_first_stage_anchor_generator(::object_detection::protos::AnchorGenerator* first_stage_anchor_generator) {
  delete first_stage_anchor_generator_;
  first_stage_anchor_generator_ = first_stage_anchor_generator;
  if (first_stage_anchor_generator) {
    set_has_first_stage_anchor_generator();
  } else {
    clear_has_first_stage_anchor_generator();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.first_stage_anchor_generator)
}

// optional int32 first_stage_atrous_rate = 7 [default = 1];
bool FasterRcnn::has_first_stage_atrous_rate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void FasterRcnn::set_has_first_stage_atrous_rate() {
  _has_bits_[0] |= 0x00200000u;
}
void FasterRcnn::clear_has_first_stage_atrous_rate() {
  _has_bits_[0] &= ~0x00200000u;
}
void FasterRcnn::clear_first_stage_atrous_rate() {
  first_stage_atrous_rate_ = 1;
  clear_has_first_stage_atrous_rate();
}
::google::protobuf::int32 FasterRcnn::first_stage_atrous_rate() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_atrous_rate)
  return first_stage_atrous_rate_;
}
void FasterRcnn::set_first_stage_atrous_rate(::google::protobuf::int32 value) {
  set_has_first_stage_atrous_rate();
  first_stage_atrous_rate_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_atrous_rate)
}

// optional .object_detection.protos.Hyperparams first_stage_box_predictor_conv_hyperparams = 8;
bool FasterRcnn::has_first_stage_box_predictor_conv_hyperparams() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FasterRcnn::set_has_first_stage_box_predictor_conv_hyperparams() {
  _has_bits_[0] |= 0x00000008u;
}
void FasterRcnn::clear_has_first_stage_box_predictor_conv_hyperparams() {
  _has_bits_[0] &= ~0x00000008u;
}
void FasterRcnn::clear_first_stage_box_predictor_conv_hyperparams() {
  if (first_stage_box_predictor_conv_hyperparams_ != NULL) first_stage_box_predictor_conv_hyperparams_->::object_detection::protos::Hyperparams::Clear();
  clear_has_first_stage_box_predictor_conv_hyperparams();
}
const ::object_detection::protos::Hyperparams& FasterRcnn::first_stage_box_predictor_conv_hyperparams() const {
  const ::object_detection::protos::Hyperparams* p = first_stage_box_predictor_conv_hyperparams_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Hyperparams*>(
      &::object_detection::protos::_Hyperparams_default_instance_);
}
::object_detection::protos::Hyperparams* FasterRcnn::mutable_first_stage_box_predictor_conv_hyperparams() {
  set_has_first_stage_box_predictor_conv_hyperparams();
  if (first_stage_box_predictor_conv_hyperparams_ == NULL) {
    first_stage_box_predictor_conv_hyperparams_ = new ::object_detection::protos::Hyperparams;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
  return first_stage_box_predictor_conv_hyperparams_;
}
::object_detection::protos::Hyperparams* FasterRcnn::release_first_stage_box_predictor_conv_hyperparams() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
  clear_has_first_stage_box_predictor_conv_hyperparams();
  ::object_detection::protos::Hyperparams* temp = first_stage_box_predictor_conv_hyperparams_;
  first_stage_box_predictor_conv_hyperparams_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_first_stage_box_predictor_conv_hyperparams(::object_detection::protos::Hyperparams* first_stage_box_predictor_conv_hyperparams) {
  delete first_stage_box_predictor_conv_hyperparams_;
  first_stage_box_predictor_conv_hyperparams_ = first_stage_box_predictor_conv_hyperparams;
  if (first_stage_box_predictor_conv_hyperparams) {
    set_has_first_stage_box_predictor_conv_hyperparams();
  } else {
    clear_has_first_stage_box_predictor_conv_hyperparams();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.first_stage_box_predictor_conv_hyperparams)
}

// optional int32 first_stage_box_predictor_kernel_size = 9 [default = 3];
bool FasterRcnn::has_first_stage_box_predictor_kernel_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void FasterRcnn::set_has_first_stage_box_predictor_kernel_size() {
  _has_bits_[0] |= 0x00400000u;
}
void FasterRcnn::clear_has_first_stage_box_predictor_kernel_size() {
  _has_bits_[0] &= ~0x00400000u;
}
void FasterRcnn::clear_first_stage_box_predictor_kernel_size() {
  first_stage_box_predictor_kernel_size_ = 3;
  clear_has_first_stage_box_predictor_kernel_size();
}
::google::protobuf::int32 FasterRcnn::first_stage_box_predictor_kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_box_predictor_kernel_size)
  return first_stage_box_predictor_kernel_size_;
}
void FasterRcnn::set_first_stage_box_predictor_kernel_size(::google::protobuf::int32 value) {
  set_has_first_stage_box_predictor_kernel_size();
  first_stage_box_predictor_kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_box_predictor_kernel_size)
}

// optional int32 first_stage_box_predictor_depth = 10 [default = 512];
bool FasterRcnn::has_first_stage_box_predictor_depth() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void FasterRcnn::set_has_first_stage_box_predictor_depth() {
  _has_bits_[0] |= 0x00800000u;
}
void FasterRcnn::clear_has_first_stage_box_predictor_depth() {
  _has_bits_[0] &= ~0x00800000u;
}
void FasterRcnn::clear_first_stage_box_predictor_depth() {
  first_stage_box_predictor_depth_ = 512;
  clear_has_first_stage_box_predictor_depth();
}
::google::protobuf::int32 FasterRcnn::first_stage_box_predictor_depth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_box_predictor_depth)
  return first_stage_box_predictor_depth_;
}
void FasterRcnn::set_first_stage_box_predictor_depth(::google::protobuf::int32 value) {
  set_has_first_stage_box_predictor_depth();
  first_stage_box_predictor_depth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_box_predictor_depth)
}

// optional int32 first_stage_minibatch_size = 11 [default = 256];
bool FasterRcnn::has_first_stage_minibatch_size() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void FasterRcnn::set_has_first_stage_minibatch_size() {
  _has_bits_[0] |= 0x01000000u;
}
void FasterRcnn::clear_has_first_stage_minibatch_size() {
  _has_bits_[0] &= ~0x01000000u;
}
void FasterRcnn::clear_first_stage_minibatch_size() {
  first_stage_minibatch_size_ = 256;
  clear_has_first_stage_minibatch_size();
}
::google::protobuf::int32 FasterRcnn::first_stage_minibatch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_minibatch_size)
  return first_stage_minibatch_size_;
}
void FasterRcnn::set_first_stage_minibatch_size(::google::protobuf::int32 value) {
  set_has_first_stage_minibatch_size();
  first_stage_minibatch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_minibatch_size)
}

// optional float first_stage_positive_balance_fraction = 12 [default = 0.5];
bool FasterRcnn::has_first_stage_positive_balance_fraction() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void FasterRcnn::set_has_first_stage_positive_balance_fraction() {
  _has_bits_[0] |= 0x02000000u;
}
void FasterRcnn::clear_has_first_stage_positive_balance_fraction() {
  _has_bits_[0] &= ~0x02000000u;
}
void FasterRcnn::clear_first_stage_positive_balance_fraction() {
  first_stage_positive_balance_fraction_ = 0.5f;
  clear_has_first_stage_positive_balance_fraction();
}
float FasterRcnn::first_stage_positive_balance_fraction() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_positive_balance_fraction)
  return first_stage_positive_balance_fraction_;
}
void FasterRcnn::set_first_stage_positive_balance_fraction(float value) {
  set_has_first_stage_positive_balance_fraction();
  first_stage_positive_balance_fraction_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_positive_balance_fraction)
}

// optional float first_stage_nms_score_threshold = 13 [default = 0];
bool FasterRcnn::has_first_stage_nms_score_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FasterRcnn::set_has_first_stage_nms_score_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
void FasterRcnn::clear_has_first_stage_nms_score_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void FasterRcnn::clear_first_stage_nms_score_threshold() {
  first_stage_nms_score_threshold_ = 0;
  clear_has_first_stage_nms_score_threshold();
}
float FasterRcnn::first_stage_nms_score_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_nms_score_threshold)
  return first_stage_nms_score_threshold_;
}
void FasterRcnn::set_first_stage_nms_score_threshold(float value) {
  set_has_first_stage_nms_score_threshold();
  first_stage_nms_score_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_nms_score_threshold)
}

// optional float first_stage_nms_iou_threshold = 14 [default = 0.7];
bool FasterRcnn::has_first_stage_nms_iou_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void FasterRcnn::set_has_first_stage_nms_iou_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
void FasterRcnn::clear_has_first_stage_nms_iou_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
void FasterRcnn::clear_first_stage_nms_iou_threshold() {
  first_stage_nms_iou_threshold_ = 0.7f;
  clear_has_first_stage_nms_iou_threshold();
}
float FasterRcnn::first_stage_nms_iou_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_nms_iou_threshold)
  return first_stage_nms_iou_threshold_;
}
void FasterRcnn::set_first_stage_nms_iou_threshold(float value) {
  set_has_first_stage_nms_iou_threshold();
  first_stage_nms_iou_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_nms_iou_threshold)
}

// optional int32 first_stage_max_proposals = 15 [default = 300];
bool FasterRcnn::has_first_stage_max_proposals() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void FasterRcnn::set_has_first_stage_max_proposals() {
  _has_bits_[0] |= 0x08000000u;
}
void FasterRcnn::clear_has_first_stage_max_proposals() {
  _has_bits_[0] &= ~0x08000000u;
}
void FasterRcnn::clear_first_stage_max_proposals() {
  first_stage_max_proposals_ = 300;
  clear_has_first_stage_max_proposals();
}
::google::protobuf::int32 FasterRcnn::first_stage_max_proposals() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_max_proposals)
  return first_stage_max_proposals_;
}
void FasterRcnn::set_first_stage_max_proposals(::google::protobuf::int32 value) {
  set_has_first_stage_max_proposals();
  first_stage_max_proposals_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_max_proposals)
}

// optional float first_stage_localization_loss_weight = 16 [default = 1];
bool FasterRcnn::has_first_stage_localization_loss_weight() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void FasterRcnn::set_has_first_stage_localization_loss_weight() {
  _has_bits_[0] |= 0x10000000u;
}
void FasterRcnn::clear_has_first_stage_localization_loss_weight() {
  _has_bits_[0] &= ~0x10000000u;
}
void FasterRcnn::clear_first_stage_localization_loss_weight() {
  first_stage_localization_loss_weight_ = 1;
  clear_has_first_stage_localization_loss_weight();
}
float FasterRcnn::first_stage_localization_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_localization_loss_weight)
  return first_stage_localization_loss_weight_;
}
void FasterRcnn::set_first_stage_localization_loss_weight(float value) {
  set_has_first_stage_localization_loss_weight();
  first_stage_localization_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_localization_loss_weight)
}

// optional float first_stage_objectness_loss_weight = 17 [default = 1];
bool FasterRcnn::has_first_stage_objectness_loss_weight() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void FasterRcnn::set_has_first_stage_objectness_loss_weight() {
  _has_bits_[0] |= 0x20000000u;
}
void FasterRcnn::clear_has_first_stage_objectness_loss_weight() {
  _has_bits_[0] &= ~0x20000000u;
}
void FasterRcnn::clear_first_stage_objectness_loss_weight() {
  first_stage_objectness_loss_weight_ = 1;
  clear_has_first_stage_objectness_loss_weight();
}
float FasterRcnn::first_stage_objectness_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.first_stage_objectness_loss_weight)
  return first_stage_objectness_loss_weight_;
}
void FasterRcnn::set_first_stage_objectness_loss_weight(float value) {
  set_has_first_stage_objectness_loss_weight();
  first_stage_objectness_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.first_stage_objectness_loss_weight)
}

// optional int32 initial_crop_size = 18;
bool FasterRcnn::has_initial_crop_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FasterRcnn::set_has_initial_crop_size() {
  _has_bits_[0] |= 0x00000400u;
}
void FasterRcnn::clear_has_initial_crop_size() {
  _has_bits_[0] &= ~0x00000400u;
}
void FasterRcnn::clear_initial_crop_size() {
  initial_crop_size_ = 0;
  clear_has_initial_crop_size();
}
::google::protobuf::int32 FasterRcnn::initial_crop_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.initial_crop_size)
  return initial_crop_size_;
}
void FasterRcnn::set_initial_crop_size(::google::protobuf::int32 value) {
  set_has_initial_crop_size();
  initial_crop_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.initial_crop_size)
}

// optional int32 maxpool_kernel_size = 19;
bool FasterRcnn::has_maxpool_kernel_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FasterRcnn::set_has_maxpool_kernel_size() {
  _has_bits_[0] |= 0x00000800u;
}
void FasterRcnn::clear_has_maxpool_kernel_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void FasterRcnn::clear_maxpool_kernel_size() {
  maxpool_kernel_size_ = 0;
  clear_has_maxpool_kernel_size();
}
::google::protobuf::int32 FasterRcnn::maxpool_kernel_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.maxpool_kernel_size)
  return maxpool_kernel_size_;
}
void FasterRcnn::set_maxpool_kernel_size(::google::protobuf::int32 value) {
  set_has_maxpool_kernel_size();
  maxpool_kernel_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.maxpool_kernel_size)
}

// optional int32 maxpool_stride = 20;
bool FasterRcnn::has_maxpool_stride() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FasterRcnn::set_has_maxpool_stride() {
  _has_bits_[0] |= 0x00001000u;
}
void FasterRcnn::clear_has_maxpool_stride() {
  _has_bits_[0] &= ~0x00001000u;
}
void FasterRcnn::clear_maxpool_stride() {
  maxpool_stride_ = 0;
  clear_has_maxpool_stride();
}
::google::protobuf::int32 FasterRcnn::maxpool_stride() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.maxpool_stride)
  return maxpool_stride_;
}
void FasterRcnn::set_maxpool_stride(::google::protobuf::int32 value) {
  set_has_maxpool_stride();
  maxpool_stride_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.maxpool_stride)
}

// optional .object_detection.protos.BoxPredictor second_stage_box_predictor = 21;
bool FasterRcnn::has_second_stage_box_predictor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FasterRcnn::set_has_second_stage_box_predictor() {
  _has_bits_[0] |= 0x00000010u;
}
void FasterRcnn::clear_has_second_stage_box_predictor() {
  _has_bits_[0] &= ~0x00000010u;
}
void FasterRcnn::clear_second_stage_box_predictor() {
  if (second_stage_box_predictor_ != NULL) second_stage_box_predictor_->::object_detection::protos::BoxPredictor::Clear();
  clear_has_second_stage_box_predictor();
}
const ::object_detection::protos::BoxPredictor& FasterRcnn::second_stage_box_predictor() const {
  const ::object_detection::protos::BoxPredictor* p = second_stage_box_predictor_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_box_predictor)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::BoxPredictor*>(
      &::object_detection::protos::_BoxPredictor_default_instance_);
}
::object_detection::protos::BoxPredictor* FasterRcnn::mutable_second_stage_box_predictor() {
  set_has_second_stage_box_predictor();
  if (second_stage_box_predictor_ == NULL) {
    second_stage_box_predictor_ = new ::object_detection::protos::BoxPredictor;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.second_stage_box_predictor)
  return second_stage_box_predictor_;
}
::object_detection::protos::BoxPredictor* FasterRcnn::release_second_stage_box_predictor() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.second_stage_box_predictor)
  clear_has_second_stage_box_predictor();
  ::object_detection::protos::BoxPredictor* temp = second_stage_box_predictor_;
  second_stage_box_predictor_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_second_stage_box_predictor(::object_detection::protos::BoxPredictor* second_stage_box_predictor) {
  delete second_stage_box_predictor_;
  second_stage_box_predictor_ = second_stage_box_predictor;
  if (second_stage_box_predictor) {
    set_has_second_stage_box_predictor();
  } else {
    clear_has_second_stage_box_predictor();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.second_stage_box_predictor)
}

// optional int32 second_stage_batch_size = 22 [default = 64];
bool FasterRcnn::has_second_stage_batch_size() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void FasterRcnn::set_has_second_stage_batch_size() {
  _has_bits_[0] |= 0x40000000u;
}
void FasterRcnn::clear_has_second_stage_batch_size() {
  _has_bits_[0] &= ~0x40000000u;
}
void FasterRcnn::clear_second_stage_batch_size() {
  second_stage_batch_size_ = 64;
  clear_has_second_stage_batch_size();
}
::google::protobuf::int32 FasterRcnn::second_stage_batch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_batch_size)
  return second_stage_batch_size_;
}
void FasterRcnn::set_second_stage_batch_size(::google::protobuf::int32 value) {
  set_has_second_stage_batch_size();
  second_stage_batch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_batch_size)
}

// optional float second_stage_balance_fraction = 23 [default = 0.25];
bool FasterRcnn::has_second_stage_balance_fraction() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void FasterRcnn::set_has_second_stage_balance_fraction() {
  _has_bits_[0] |= 0x80000000u;
}
void FasterRcnn::clear_has_second_stage_balance_fraction() {
  _has_bits_[0] &= ~0x80000000u;
}
void FasterRcnn::clear_second_stage_balance_fraction() {
  second_stage_balance_fraction_ = 0.25f;
  clear_has_second_stage_balance_fraction();
}
float FasterRcnn::second_stage_balance_fraction() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_balance_fraction)
  return second_stage_balance_fraction_;
}
void FasterRcnn::set_second_stage_balance_fraction(float value) {
  set_has_second_stage_balance_fraction();
  second_stage_balance_fraction_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_balance_fraction)
}

// optional .object_detection.protos.PostProcessing second_stage_post_processing = 24;
bool FasterRcnn::has_second_stage_post_processing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FasterRcnn::set_has_second_stage_post_processing() {
  _has_bits_[0] |= 0x00000020u;
}
void FasterRcnn::clear_has_second_stage_post_processing() {
  _has_bits_[0] &= ~0x00000020u;
}
void FasterRcnn::clear_second_stage_post_processing() {
  if (second_stage_post_processing_ != NULL) second_stage_post_processing_->::object_detection::protos::PostProcessing::Clear();
  clear_has_second_stage_post_processing();
}
const ::object_detection::protos::PostProcessing& FasterRcnn::second_stage_post_processing() const {
  const ::object_detection::protos::PostProcessing* p = second_stage_post_processing_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_post_processing)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::PostProcessing*>(
      &::object_detection::protos::_PostProcessing_default_instance_);
}
::object_detection::protos::PostProcessing* FasterRcnn::mutable_second_stage_post_processing() {
  set_has_second_stage_post_processing();
  if (second_stage_post_processing_ == NULL) {
    second_stage_post_processing_ = new ::object_detection::protos::PostProcessing;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.second_stage_post_processing)
  return second_stage_post_processing_;
}
::object_detection::protos::PostProcessing* FasterRcnn::release_second_stage_post_processing() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.second_stage_post_processing)
  clear_has_second_stage_post_processing();
  ::object_detection::protos::PostProcessing* temp = second_stage_post_processing_;
  second_stage_post_processing_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_second_stage_post_processing(::object_detection::protos::PostProcessing* second_stage_post_processing) {
  delete second_stage_post_processing_;
  second_stage_post_processing_ = second_stage_post_processing;
  if (second_stage_post_processing) {
    set_has_second_stage_post_processing();
  } else {
    clear_has_second_stage_post_processing();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.second_stage_post_processing)
}

// optional float second_stage_localization_loss_weight = 25 [default = 1];
bool FasterRcnn::has_second_stage_localization_loss_weight() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void FasterRcnn::set_has_second_stage_localization_loss_weight() {
  _has_bits_[1] |= 0x00000001u;
}
void FasterRcnn::clear_has_second_stage_localization_loss_weight() {
  _has_bits_[1] &= ~0x00000001u;
}
void FasterRcnn::clear_second_stage_localization_loss_weight() {
  second_stage_localization_loss_weight_ = 1;
  clear_has_second_stage_localization_loss_weight();
}
float FasterRcnn::second_stage_localization_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_localization_loss_weight)
  return second_stage_localization_loss_weight_;
}
void FasterRcnn::set_second_stage_localization_loss_weight(float value) {
  set_has_second_stage_localization_loss_weight();
  second_stage_localization_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_localization_loss_weight)
}

// optional float second_stage_classification_loss_weight = 26 [default = 1];
bool FasterRcnn::has_second_stage_classification_loss_weight() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void FasterRcnn::set_has_second_stage_classification_loss_weight() {
  _has_bits_[1] |= 0x00000002u;
}
void FasterRcnn::clear_has_second_stage_classification_loss_weight() {
  _has_bits_[1] &= ~0x00000002u;
}
void FasterRcnn::clear_second_stage_classification_loss_weight() {
  second_stage_classification_loss_weight_ = 1;
  clear_has_second_stage_classification_loss_weight();
}
float FasterRcnn::second_stage_classification_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_classification_loss_weight)
  return second_stage_classification_loss_weight_;
}
void FasterRcnn::set_second_stage_classification_loss_weight(float value) {
  set_has_second_stage_classification_loss_weight();
  second_stage_classification_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_classification_loss_weight)
}

// optional float second_stage_mask_prediction_loss_weight = 27 [default = 1];
bool FasterRcnn::has_second_stage_mask_prediction_loss_weight() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void FasterRcnn::set_has_second_stage_mask_prediction_loss_weight() {
  _has_bits_[1] |= 0x00000004u;
}
void FasterRcnn::clear_has_second_stage_mask_prediction_loss_weight() {
  _has_bits_[1] &= ~0x00000004u;
}
void FasterRcnn::clear_second_stage_mask_prediction_loss_weight() {
  second_stage_mask_prediction_loss_weight_ = 1;
  clear_has_second_stage_mask_prediction_loss_weight();
}
float FasterRcnn::second_stage_mask_prediction_loss_weight() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_mask_prediction_loss_weight)
  return second_stage_mask_prediction_loss_weight_;
}
void FasterRcnn::set_second_stage_mask_prediction_loss_weight(float value) {
  set_has_second_stage_mask_prediction_loss_weight();
  second_stage_mask_prediction_loss_weight_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.second_stage_mask_prediction_loss_weight)
}

// optional .object_detection.protos.HardExampleMiner hard_example_miner = 28;
bool FasterRcnn::has_hard_example_miner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FasterRcnn::set_has_hard_example_miner() {
  _has_bits_[0] |= 0x00000040u;
}
void FasterRcnn::clear_has_hard_example_miner() {
  _has_bits_[0] &= ~0x00000040u;
}
void FasterRcnn::clear_hard_example_miner() {
  if (hard_example_miner_ != NULL) hard_example_miner_->::object_detection::protos::HardExampleMiner::Clear();
  clear_has_hard_example_miner();
}
const ::object_detection::protos::HardExampleMiner& FasterRcnn::hard_example_miner() const {
  const ::object_detection::protos::HardExampleMiner* p = hard_example_miner_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.hard_example_miner)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::HardExampleMiner*>(
      &::object_detection::protos::_HardExampleMiner_default_instance_);
}
::object_detection::protos::HardExampleMiner* FasterRcnn::mutable_hard_example_miner() {
  set_has_hard_example_miner();
  if (hard_example_miner_ == NULL) {
    hard_example_miner_ = new ::object_detection::protos::HardExampleMiner;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.hard_example_miner)
  return hard_example_miner_;
}
::object_detection::protos::HardExampleMiner* FasterRcnn::release_hard_example_miner() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.hard_example_miner)
  clear_has_hard_example_miner();
  ::object_detection::protos::HardExampleMiner* temp = hard_example_miner_;
  hard_example_miner_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_hard_example_miner(::object_detection::protos::HardExampleMiner* hard_example_miner) {
  delete hard_example_miner_;
  hard_example_miner_ = hard_example_miner;
  if (hard_example_miner) {
    set_has_hard_example_miner();
  } else {
    clear_has_hard_example_miner();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.hard_example_miner)
}

// optional .object_detection.protos.ClassificationLoss second_stage_classification_loss = 29;
bool FasterRcnn::has_second_stage_classification_loss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FasterRcnn::set_has_second_stage_classification_loss() {
  _has_bits_[0] |= 0x00000080u;
}
void FasterRcnn::clear_has_second_stage_classification_loss() {
  _has_bits_[0] &= ~0x00000080u;
}
void FasterRcnn::clear_second_stage_classification_loss() {
  if (second_stage_classification_loss_ != NULL) second_stage_classification_loss_->::object_detection::protos::ClassificationLoss::Clear();
  clear_has_second_stage_classification_loss();
}
const ::object_detection::protos::ClassificationLoss& FasterRcnn::second_stage_classification_loss() const {
  const ::object_detection::protos::ClassificationLoss* p = second_stage_classification_loss_;
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.second_stage_classification_loss)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::ClassificationLoss*>(
      &::object_detection::protos::_ClassificationLoss_default_instance_);
}
::object_detection::protos::ClassificationLoss* FasterRcnn::mutable_second_stage_classification_loss() {
  set_has_second_stage_classification_loss();
  if (second_stage_classification_loss_ == NULL) {
    second_stage_classification_loss_ = new ::object_detection::protos::ClassificationLoss;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnn.second_stage_classification_loss)
  return second_stage_classification_loss_;
}
::object_detection::protos::ClassificationLoss* FasterRcnn::release_second_stage_classification_loss() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnn.second_stage_classification_loss)
  clear_has_second_stage_classification_loss();
  ::object_detection::protos::ClassificationLoss* temp = second_stage_classification_loss_;
  second_stage_classification_loss_ = NULL;
  return temp;
}
void FasterRcnn::set_allocated_second_stage_classification_loss(::object_detection::protos::ClassificationLoss* second_stage_classification_loss) {
  delete second_stage_classification_loss_;
  second_stage_classification_loss_ = second_stage_classification_loss;
  if (second_stage_classification_loss) {
    set_has_second_stage_classification_loss();
  } else {
    clear_has_second_stage_classification_loss();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnn.second_stage_classification_loss)
}

// optional bool inplace_batchnorm_update = 30 [default = false];
bool FasterRcnn::has_inplace_batchnorm_update() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FasterRcnn::set_has_inplace_batchnorm_update() {
  _has_bits_[0] |= 0x00002000u;
}
void FasterRcnn::clear_has_inplace_batchnorm_update() {
  _has_bits_[0] &= ~0x00002000u;
}
void FasterRcnn::clear_inplace_batchnorm_update() {
  inplace_batchnorm_update_ = false;
  clear_has_inplace_batchnorm_update();
}
bool FasterRcnn::inplace_batchnorm_update() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.inplace_batchnorm_update)
  return inplace_batchnorm_update_;
}
void FasterRcnn::set_inplace_batchnorm_update(bool value) {
  set_has_inplace_batchnorm_update();
  inplace_batchnorm_update_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.inplace_batchnorm_update)
}

// optional bool use_matmul_crop_and_resize = 31 [default = false];
bool FasterRcnn::has_use_matmul_crop_and_resize() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FasterRcnn::set_has_use_matmul_crop_and_resize() {
  _has_bits_[0] |= 0x00004000u;
}
void FasterRcnn::clear_has_use_matmul_crop_and_resize() {
  _has_bits_[0] &= ~0x00004000u;
}
void FasterRcnn::clear_use_matmul_crop_and_resize() {
  use_matmul_crop_and_resize_ = false;
  clear_has_use_matmul_crop_and_resize();
}
bool FasterRcnn::use_matmul_crop_and_resize() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_matmul_crop_and_resize)
  return use_matmul_crop_and_resize_;
}
void FasterRcnn::set_use_matmul_crop_and_resize(bool value) {
  set_has_use_matmul_crop_and_resize();
  use_matmul_crop_and_resize_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_matmul_crop_and_resize)
}

// optional bool clip_anchors_to_image = 32 [default = false];
bool FasterRcnn::has_clip_anchors_to_image() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FasterRcnn::set_has_clip_anchors_to_image() {
  _has_bits_[0] |= 0x00008000u;
}
void FasterRcnn::clear_has_clip_anchors_to_image() {
  _has_bits_[0] &= ~0x00008000u;
}
void FasterRcnn::clear_clip_anchors_to_image() {
  clip_anchors_to_image_ = false;
  clear_has_clip_anchors_to_image();
}
bool FasterRcnn::clip_anchors_to_image() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.clip_anchors_to_image)
  return clip_anchors_to_image_;
}
void FasterRcnn::set_clip_anchors_to_image(bool value) {
  set_has_clip_anchors_to_image();
  clip_anchors_to_image_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.clip_anchors_to_image)
}

// optional bool use_matmul_gather_in_matcher = 33 [default = false];
bool FasterRcnn::has_use_matmul_gather_in_matcher() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FasterRcnn::set_has_use_matmul_gather_in_matcher() {
  _has_bits_[0] |= 0x00010000u;
}
void FasterRcnn::clear_has_use_matmul_gather_in_matcher() {
  _has_bits_[0] &= ~0x00010000u;
}
void FasterRcnn::clear_use_matmul_gather_in_matcher() {
  use_matmul_gather_in_matcher_ = false;
  clear_has_use_matmul_gather_in_matcher();
}
bool FasterRcnn::use_matmul_gather_in_matcher() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_matmul_gather_in_matcher)
  return use_matmul_gather_in_matcher_;
}
void FasterRcnn::set_use_matmul_gather_in_matcher(bool value) {
  set_has_use_matmul_gather_in_matcher();
  use_matmul_gather_in_matcher_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_matmul_gather_in_matcher)
}

// optional bool use_static_balanced_label_sampler = 34 [default = false];
bool FasterRcnn::has_use_static_balanced_label_sampler() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FasterRcnn::set_has_use_static_balanced_label_sampler() {
  _has_bits_[0] |= 0x00020000u;
}
void FasterRcnn::clear_has_use_static_balanced_label_sampler() {
  _has_bits_[0] &= ~0x00020000u;
}
void FasterRcnn::clear_use_static_balanced_label_sampler() {
  use_static_balanced_label_sampler_ = false;
  clear_has_use_static_balanced_label_sampler();
}
bool FasterRcnn::use_static_balanced_label_sampler() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_static_balanced_label_sampler)
  return use_static_balanced_label_sampler_;
}
void FasterRcnn::set_use_static_balanced_label_sampler(bool value) {
  set_has_use_static_balanced_label_sampler();
  use_static_balanced_label_sampler_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_static_balanced_label_sampler)
}

// optional bool use_static_shapes = 35 [default = false];
bool FasterRcnn::has_use_static_shapes() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void FasterRcnn::set_has_use_static_shapes() {
  _has_bits_[0] |= 0x00040000u;
}
void FasterRcnn::clear_has_use_static_shapes() {
  _has_bits_[0] &= ~0x00040000u;
}
void FasterRcnn::clear_use_static_shapes() {
  use_static_shapes_ = false;
  clear_has_use_static_shapes();
}
bool FasterRcnn::use_static_shapes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_static_shapes)
  return use_static_shapes_;
}
void FasterRcnn::set_use_static_shapes(bool value) {
  set_has_use_static_shapes();
  use_static_shapes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_static_shapes)
}

// optional bool resize_masks = 36 [default = true];
bool FasterRcnn::has_resize_masks() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void FasterRcnn::set_has_resize_masks() {
  _has_bits_[1] |= 0x00000008u;
}
void FasterRcnn::clear_has_resize_masks() {
  _has_bits_[1] &= ~0x00000008u;
}
void FasterRcnn::clear_resize_masks() {
  resize_masks_ = true;
  clear_has_resize_masks();
}
bool FasterRcnn::resize_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.resize_masks)
  return resize_masks_;
}
void FasterRcnn::set_resize_masks(bool value) {
  set_has_resize_masks();
  resize_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.resize_masks)
}

// optional bool use_static_shapes_for_eval = 37 [default = false];
bool FasterRcnn::has_use_static_shapes_for_eval() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void FasterRcnn::set_has_use_static_shapes_for_eval() {
  _has_bits_[0] |= 0x00080000u;
}
void FasterRcnn::clear_has_use_static_shapes_for_eval() {
  _has_bits_[0] &= ~0x00080000u;
}
void FasterRcnn::clear_use_static_shapes_for_eval() {
  use_static_shapes_for_eval_ = false;
  clear_has_use_static_shapes_for_eval();
}
bool FasterRcnn::use_static_shapes_for_eval() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnn.use_static_shapes_for_eval)
  return use_static_shapes_for_eval_;
}
void FasterRcnn::set_use_static_shapes_for_eval(bool value) {
  set_has_use_static_shapes_for_eval();
  use_static_shapes_for_eval_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnn.use_static_shapes_for_eval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FasterRcnnFeatureExtractor::kTypeFieldNumber;
const int FasterRcnnFeatureExtractor::kFirstStageFeaturesStrideFieldNumber;
const int FasterRcnnFeatureExtractor::kBatchNormTrainableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FasterRcnnFeatureExtractor::FasterRcnnFeatureExtractor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FasterRcnnFeatureExtractor)
}
FasterRcnnFeatureExtractor::FasterRcnnFeatureExtractor(const FasterRcnnFeatureExtractor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  ::memcpy(&batch_norm_trainable_, &from.batch_norm_trainable_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_stage_features_stride_) -
    reinterpret_cast<char*>(&batch_norm_trainable_)) + sizeof(first_stage_features_stride_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FasterRcnnFeatureExtractor)
}

void FasterRcnnFeatureExtractor::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_norm_trainable_ = false;
  first_stage_features_stride_ = 16;
}

FasterRcnnFeatureExtractor::~FasterRcnnFeatureExtractor() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FasterRcnnFeatureExtractor)
  SharedDtor();
}

void FasterRcnnFeatureExtractor::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FasterRcnnFeatureExtractor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FasterRcnnFeatureExtractor::descriptor() {
  protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FasterRcnnFeatureExtractor& FasterRcnnFeatureExtractor::default_instance() {
  protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::InitDefaults();
  return *internal_default_instance();
}

FasterRcnnFeatureExtractor* FasterRcnnFeatureExtractor::New(::google::protobuf::Arena* arena) const {
  FasterRcnnFeatureExtractor* n = new FasterRcnnFeatureExtractor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FasterRcnnFeatureExtractor::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FasterRcnnFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_type()) {
    GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*type_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    batch_norm_trainable_ = false;
    first_stage_features_stride_ = 16;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FasterRcnnFeatureExtractor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FasterRcnnFeatureExtractor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.FasterRcnnFeatureExtractor.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_stage_features_stride = 2 [default = 16];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_first_stage_features_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_stage_features_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool batch_norm_trainable = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_batch_norm_trainable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batch_norm_trainable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FasterRcnnFeatureExtractor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FasterRcnnFeatureExtractor)
  return false;
#undef DO_
}

void FasterRcnnFeatureExtractor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FasterRcnnFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.FasterRcnnFeatureExtractor.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional int32 first_stage_features_stride = 2 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_stage_features_stride(), output);
  }

  // optional bool batch_norm_trainable = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->batch_norm_trainable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FasterRcnnFeatureExtractor)
}

::google::protobuf::uint8* FasterRcnnFeatureExtractor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FasterRcnnFeatureExtractor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.FasterRcnnFeatureExtractor.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional int32 first_stage_features_stride = 2 [default = 16];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_stage_features_stride(), target);
  }

  // optional bool batch_norm_trainable = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->batch_norm_trainable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FasterRcnnFeatureExtractor)
  return target;
}

size_t FasterRcnnFeatureExtractor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FasterRcnnFeatureExtractor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional bool batch_norm_trainable = 3 [default = false];
    if (has_batch_norm_trainable()) {
      total_size += 1 + 1;
    }

    // optional int32 first_stage_features_stride = 2 [default = 16];
    if (has_first_stage_features_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_stage_features_stride());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FasterRcnnFeatureExtractor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  const FasterRcnnFeatureExtractor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FasterRcnnFeatureExtractor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FasterRcnnFeatureExtractor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FasterRcnnFeatureExtractor)
    MergeFrom(*source);
  }
}

void FasterRcnnFeatureExtractor::MergeFrom(const FasterRcnnFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      batch_norm_trainable_ = from.batch_norm_trainable_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_stage_features_stride_ = from.first_stage_features_stride_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FasterRcnnFeatureExtractor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FasterRcnnFeatureExtractor::CopyFrom(const FasterRcnnFeatureExtractor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FasterRcnnFeatureExtractor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FasterRcnnFeatureExtractor::IsInitialized() const {
  return true;
}

void FasterRcnnFeatureExtractor::Swap(FasterRcnnFeatureExtractor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FasterRcnnFeatureExtractor::InternalSwap(FasterRcnnFeatureExtractor* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(batch_norm_trainable_, other->batch_norm_trainable_);
  swap(first_stage_features_stride_, other->first_stage_features_stride_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FasterRcnnFeatureExtractor::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2ffaster_5frcnn_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FasterRcnnFeatureExtractor

// optional string type = 1;
bool FasterRcnnFeatureExtractor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FasterRcnnFeatureExtractor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FasterRcnnFeatureExtractor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FasterRcnnFeatureExtractor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
const ::std::string& FasterRcnnFeatureExtractor::type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnnFeatureExtractor.type)
  return type_.GetNoArena();
}
void FasterRcnnFeatureExtractor::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
#if LANG_CXX11
void FasterRcnnFeatureExtractor::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
#endif
void FasterRcnnFeatureExtractor::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
void FasterRcnnFeatureExtractor::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.FasterRcnnFeatureExtractor.type)
}
::std::string* FasterRcnnFeatureExtractor::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.FasterRcnnFeatureExtractor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FasterRcnnFeatureExtractor::release_type() {
  // @@protoc_insertion_point(field_release:object_detection.protos.FasterRcnnFeatureExtractor.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FasterRcnnFeatureExtractor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.FasterRcnnFeatureExtractor.type)
}

// optional int32 first_stage_features_stride = 2 [default = 16];
bool FasterRcnnFeatureExtractor::has_first_stage_features_stride() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FasterRcnnFeatureExtractor::set_has_first_stage_features_stride() {
  _has_bits_[0] |= 0x00000004u;
}
void FasterRcnnFeatureExtractor::clear_has_first_stage_features_stride() {
  _has_bits_[0] &= ~0x00000004u;
}
void FasterRcnnFeatureExtractor::clear_first_stage_features_stride() {
  first_stage_features_stride_ = 16;
  clear_has_first_stage_features_stride();
}
::google::protobuf::int32 FasterRcnnFeatureExtractor::first_stage_features_stride() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnnFeatureExtractor.first_stage_features_stride)
  return first_stage_features_stride_;
}
void FasterRcnnFeatureExtractor::set_first_stage_features_stride(::google::protobuf::int32 value) {
  set_has_first_stage_features_stride();
  first_stage_features_stride_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnnFeatureExtractor.first_stage_features_stride)
}

// optional bool batch_norm_trainable = 3 [default = false];
bool FasterRcnnFeatureExtractor::has_batch_norm_trainable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FasterRcnnFeatureExtractor::set_has_batch_norm_trainable() {
  _has_bits_[0] |= 0x00000002u;
}
void FasterRcnnFeatureExtractor::clear_has_batch_norm_trainable() {
  _has_bits_[0] &= ~0x00000002u;
}
void FasterRcnnFeatureExtractor::clear_batch_norm_trainable() {
  batch_norm_trainable_ = false;
  clear_has_batch_norm_trainable();
}
bool FasterRcnnFeatureExtractor::batch_norm_trainable() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FasterRcnnFeatureExtractor.batch_norm_trainable)
  return batch_norm_trainable_;
}
void FasterRcnnFeatureExtractor::set_batch_norm_trainable(bool value) {
  set_has_batch_norm_trainable();
  batch_norm_trainable_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FasterRcnnFeatureExtractor.batch_norm_trainable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
