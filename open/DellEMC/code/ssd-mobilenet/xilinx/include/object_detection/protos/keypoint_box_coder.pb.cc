// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/keypoint_box_coder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/keypoint_box_coder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class KeypointBoxCoderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeypointBoxCoder>
     _instance;
} _KeypointBoxCoder_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, num_keypoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, y_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, x_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, height_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeypointBoxCoder, width_scale_),
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(KeypointBoxCoder)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeypointBoxCoder_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/keypoint_box_coder.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _KeypointBoxCoder_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeypointBoxCoder_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n0object_detection/protos/keypoint_box_c"
      "oder.proto\022\027object_detection.protos\"\204\001\n\020"
      "KeypointBoxCoder\022\025\n\rnum_keypoints\030\001 \001(\005\022"
      "\023\n\007y_scale\030\002 \001(\002:\00210\022\023\n\007x_scale\030\003 \001(\002:\0021"
      "0\022\027\n\014height_scale\030\004 \001(\002:\0015\022\026\n\013width_scal"
      "e\030\005 \001(\002:\0015"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/keypoint_box_coder.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeypointBoxCoder::kNumKeypointsFieldNumber;
const int KeypointBoxCoder::kYScaleFieldNumber;
const int KeypointBoxCoder::kXScaleFieldNumber;
const int KeypointBoxCoder::kHeightScaleFieldNumber;
const int KeypointBoxCoder::kWidthScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeypointBoxCoder::KeypointBoxCoder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.KeypointBoxCoder)
}
KeypointBoxCoder::KeypointBoxCoder(const KeypointBoxCoder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_keypoints_, &from.num_keypoints_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_scale_) -
    reinterpret_cast<char*>(&num_keypoints_)) + sizeof(width_scale_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.KeypointBoxCoder)
}

void KeypointBoxCoder::SharedCtor() {
  _cached_size_ = 0;
  num_keypoints_ = 0;
  y_scale_ = 10;
  x_scale_ = 10;
  height_scale_ = 5;
  width_scale_ = 5;
}

KeypointBoxCoder::~KeypointBoxCoder() {
  // @@protoc_insertion_point(destructor:object_detection.protos.KeypointBoxCoder)
  SharedDtor();
}

void KeypointBoxCoder::SharedDtor() {
}

void KeypointBoxCoder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeypointBoxCoder::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeypointBoxCoder& KeypointBoxCoder::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeypointBoxCoder* KeypointBoxCoder::New(::google::protobuf::Arena* arena) const {
  KeypointBoxCoder* n = new KeypointBoxCoder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeypointBoxCoder::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.KeypointBoxCoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    num_keypoints_ = 0;
    y_scale_ = 10;
    x_scale_ = 10;
    height_scale_ = 5;
    width_scale_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeypointBoxCoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.KeypointBoxCoder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_keypoints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_keypoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_keypoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_scale = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x_scale = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_x_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height_scale = 4 [default = 5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_height_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width_scale = 5 [default = 5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_width_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.KeypointBoxCoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.KeypointBoxCoder)
  return false;
#undef DO_
}

void KeypointBoxCoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.KeypointBoxCoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_keypoints = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_keypoints(), output);
  }

  // optional float y_scale = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_scale(), output);
  }

  // optional float x_scale = 3 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x_scale(), output);
  }

  // optional float height_scale = 4 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height_scale(), output);
  }

  // optional float width_scale = 5 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.KeypointBoxCoder)
}

::google::protobuf::uint8* KeypointBoxCoder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.KeypointBoxCoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_keypoints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_keypoints(), target);
  }

  // optional float y_scale = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_scale(), target);
  }

  // optional float x_scale = 3 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x_scale(), target);
  }

  // optional float height_scale = 4 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height_scale(), target);
  }

  // optional float width_scale = 5 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.KeypointBoxCoder)
  return target;
}

size_t KeypointBoxCoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.KeypointBoxCoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 num_keypoints = 1;
    if (has_num_keypoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_keypoints());
    }

    // optional float y_scale = 2 [default = 10];
    if (has_y_scale()) {
      total_size += 1 + 4;
    }

    // optional float x_scale = 3 [default = 10];
    if (has_x_scale()) {
      total_size += 1 + 4;
    }

    // optional float height_scale = 4 [default = 5];
    if (has_height_scale()) {
      total_size += 1 + 4;
    }

    // optional float width_scale = 5 [default = 5];
    if (has_width_scale()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeypointBoxCoder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.KeypointBoxCoder)
  GOOGLE_DCHECK_NE(&from, this);
  const KeypointBoxCoder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeypointBoxCoder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.KeypointBoxCoder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.KeypointBoxCoder)
    MergeFrom(*source);
  }
}

void KeypointBoxCoder::MergeFrom(const KeypointBoxCoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.KeypointBoxCoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      num_keypoints_ = from.num_keypoints_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_scale_ = from.y_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_scale_ = from.x_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_scale_ = from.height_scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_scale_ = from.width_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeypointBoxCoder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.KeypointBoxCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeypointBoxCoder::CopyFrom(const KeypointBoxCoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.KeypointBoxCoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeypointBoxCoder::IsInitialized() const {
  return true;
}

void KeypointBoxCoder::Swap(KeypointBoxCoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeypointBoxCoder::InternalSwap(KeypointBoxCoder* other) {
  using std::swap;
  swap(num_keypoints_, other->num_keypoints_);
  swap(y_scale_, other->y_scale_);
  swap(x_scale_, other->x_scale_);
  swap(height_scale_, other->height_scale_);
  swap(width_scale_, other->width_scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeypointBoxCoder::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fkeypoint_5fbox_5fcoder_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeypointBoxCoder

// optional int32 num_keypoints = 1;
bool KeypointBoxCoder::has_num_keypoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeypointBoxCoder::set_has_num_keypoints() {
  _has_bits_[0] |= 0x00000001u;
}
void KeypointBoxCoder::clear_has_num_keypoints() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeypointBoxCoder::clear_num_keypoints() {
  num_keypoints_ = 0;
  clear_has_num_keypoints();
}
::google::protobuf::int32 KeypointBoxCoder::num_keypoints() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.num_keypoints)
  return num_keypoints_;
}
void KeypointBoxCoder::set_num_keypoints(::google::protobuf::int32 value) {
  set_has_num_keypoints();
  num_keypoints_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.num_keypoints)
}

// optional float y_scale = 2 [default = 10];
bool KeypointBoxCoder::has_y_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeypointBoxCoder::set_has_y_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void KeypointBoxCoder::clear_has_y_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeypointBoxCoder::clear_y_scale() {
  y_scale_ = 10;
  clear_has_y_scale();
}
float KeypointBoxCoder::y_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.y_scale)
  return y_scale_;
}
void KeypointBoxCoder::set_y_scale(float value) {
  set_has_y_scale();
  y_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.y_scale)
}

// optional float x_scale = 3 [default = 10];
bool KeypointBoxCoder::has_x_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeypointBoxCoder::set_has_x_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void KeypointBoxCoder::clear_has_x_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeypointBoxCoder::clear_x_scale() {
  x_scale_ = 10;
  clear_has_x_scale();
}
float KeypointBoxCoder::x_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.x_scale)
  return x_scale_;
}
void KeypointBoxCoder::set_x_scale(float value) {
  set_has_x_scale();
  x_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.x_scale)
}

// optional float height_scale = 4 [default = 5];
bool KeypointBoxCoder::has_height_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeypointBoxCoder::set_has_height_scale() {
  _has_bits_[0] |= 0x00000008u;
}
void KeypointBoxCoder::clear_has_height_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeypointBoxCoder::clear_height_scale() {
  height_scale_ = 5;
  clear_has_height_scale();
}
float KeypointBoxCoder::height_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.height_scale)
  return height_scale_;
}
void KeypointBoxCoder::set_height_scale(float value) {
  set_has_height_scale();
  height_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.height_scale)
}

// optional float width_scale = 5 [default = 5];
bool KeypointBoxCoder::has_width_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KeypointBoxCoder::set_has_width_scale() {
  _has_bits_[0] |= 0x00000010u;
}
void KeypointBoxCoder::clear_has_width_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
void KeypointBoxCoder::clear_width_scale() {
  width_scale_ = 5;
  clear_has_width_scale();
}
float KeypointBoxCoder::width_scale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeypointBoxCoder.width_scale)
  return width_scale_;
}
void KeypointBoxCoder::set_width_scale(float value) {
  set_has_width_scale();
  width_scale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeypointBoxCoder.width_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
