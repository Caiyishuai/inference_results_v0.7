// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/image_resizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/image_resizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class ImageResizerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageResizer>
     _instance;
  const ::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer_;
  const ::object_detection::protos::FixedShapeResizer* fixed_shape_resizer_;
  const ::object_detection::protos::IdentityResizer* identity_resizer_;
  const ::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer_;
} _ImageResizer_default_instance_;
class IdentityResizerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IdentityResizer>
     _instance;
} _IdentityResizer_default_instance_;
class KeepAspectRatioResizerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<KeepAspectRatioResizer>
     _instance;
} _KeepAspectRatioResizer_default_instance_;
class FixedShapeResizerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixedShapeResizer>
     _instance;
} _FixedShapeResizer_default_instance_;
class ConditionalShapeResizerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConditionalShapeResizer>
     _instance;
} _ConditionalShapeResizer_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResizer, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ImageResizerDefaultTypeInternal, keep_aspect_ratio_resizer_),
  offsetof(ImageResizerDefaultTypeInternal, fixed_shape_resizer_),
  offsetof(ImageResizerDefaultTypeInternal, identity_resizer_),
  offsetof(ImageResizerDefaultTypeInternal, conditional_shape_resizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResizer, image_resizer_oneof_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentityResizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdentityResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, min_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, max_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, resize_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, pad_to_max_dimension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, convert_to_grayscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeepAspectRatioResizer, per_channel_pad_value_),
  3,
  4,
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedShapeResizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedShapeResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedShapeResizer, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedShapeResizer, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedShapeResizer, resize_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedShapeResizer, convert_to_grayscale_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalShapeResizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalShapeResizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalShapeResizer, condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalShapeResizer, size_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalShapeResizer, resize_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionalShapeResizer, convert_to_grayscale_),
  2,
  3,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(ImageResizer)},
  { 14, 19, sizeof(IdentityResizer)},
  { 19, 30, sizeof(KeepAspectRatioResizer)},
  { 36, 45, sizeof(FixedShapeResizer)},
  { 49, 58, sizeof(ConditionalShapeResizer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageResizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IdentityResizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeepAspectRatioResizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixedShapeResizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConditionalShapeResizer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/image_resizer.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ImageResizer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageResizer_default_instance_);_IdentityResizer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IdentityResizer_default_instance_);_KeepAspectRatioResizer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_KeepAspectRatioResizer_default_instance_);_FixedShapeResizer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixedShapeResizer_default_instance_);_ConditionalShapeResizer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConditionalShapeResizer_default_instance_);_ImageResizer_default_instance_.keep_aspect_ratio_resizer_ = const_cast< ::object_detection::protos::KeepAspectRatioResizer*>(
      ::object_detection::protos::KeepAspectRatioResizer::internal_default_instance());
  _ImageResizer_default_instance_.fixed_shape_resizer_ = const_cast< ::object_detection::protos::FixedShapeResizer*>(
      ::object_detection::protos::FixedShapeResizer::internal_default_instance());
  _ImageResizer_default_instance_.identity_resizer_ = const_cast< ::object_detection::protos::IdentityResizer*>(
      ::object_detection::protos::IdentityResizer::internal_default_instance());
  _ImageResizer_default_instance_.conditional_shape_resizer_ = const_cast< ::object_detection::protos::ConditionalShapeResizer*>(
      ::object_detection::protos::ConditionalShapeResizer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+object_detection/protos/image_resizer."
      "proto\022\027object_detection.protos\"\343\002\n\014Image"
      "Resizer\022T\n\031keep_aspect_ratio_resizer\030\001 \001"
      "(\0132/.object_detection.protos.KeepAspectR"
      "atioResizerH\000\022I\n\023fixed_shape_resizer\030\002 \001"
      "(\0132*.object_detection.protos.FixedShapeR"
      "esizerH\000\022D\n\020identity_resizer\030\003 \001(\0132(.obj"
      "ect_detection.protos.IdentityResizerH\000\022U"
      "\n\031conditional_shape_resizer\030\004 \001(\01320.obje"
      "ct_detection.protos.ConditionalShapeResi"
      "zerH\000B\025\n\023image_resizer_oneof\"\021\n\017Identity"
      "Resizer\"\200\002\n\026KeepAspectRatioResizer\022\032\n\rmi"
      "n_dimension\030\001 \001(\005:\003600\022\033\n\rmax_dimension\030"
      "\002 \001(\005:\0041024\022D\n\rresize_method\030\003 \001(\0162#.obj"
      "ect_detection.protos.ResizeType:\010BILINEA"
      "R\022#\n\024pad_to_max_dimension\030\004 \001(\010:\005false\022#"
      "\n\024convert_to_grayscale\030\005 \001(\010:\005false\022\035\n\025p"
      "er_channel_pad_value\030\006 \003(\002\"\247\001\n\021FixedShap"
      "eResizer\022\023\n\006height\030\001 \001(\005:\003300\022\022\n\005width\030\002"
      " \001(\005:\003300\022D\n\rresize_method\030\003 \001(\0162#.objec"
      "t_detection.protos.ResizeType:\010BILINEAR\022"
      "#\n\024convert_to_grayscale\030\004 \001(\010:\005false\"\271\002\n"
      "\027ConditionalShapeResizer\022\\\n\tcondition\030\001 "
      "\001(\0162@.object_detection.protos.Conditiona"
      "lShapeResizer.ResizeCondition:\007GREATER\022\033"
      "\n\016size_threshold\030\002 \001(\005:\003300\022D\n\rresize_me"
      "thod\030\003 \001(\0162#.object_detection.protos.Res"
      "izeType:\010BILINEAR\022#\n\024convert_to_grayscal"
      "e\030\004 \001(\010:\005false\"8\n\017ResizeCondition\022\013\n\007INV"
      "ALID\020\000\022\013\n\007GREATER\020\001\022\013\n\007SMALLER\020\002*G\n\nResi"
      "zeType\022\014\n\010BILINEAR\020\000\022\024\n\020NEAREST_NEIGHBOR"
      "\020\001\022\013\n\007BICUBIC\020\002\022\010\n\004AREA\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/image_resizer.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto

const ::google::protobuf::EnumDescriptor* ConditionalShapeResizer_ResizeCondition_descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_enum_descriptors[0];
}
bool ConditionalShapeResizer_ResizeCondition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::INVALID;
const ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::GREATER;
const ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::SMALLER;
const ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::ResizeCondition_MIN;
const ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::ResizeCondition_MAX;
const int ConditionalShapeResizer::ResizeCondition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResizeType_descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_enum_descriptors[1];
}
bool ResizeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageResizer::kKeepAspectRatioResizerFieldNumber;
const int ImageResizer::kFixedShapeResizerFieldNumber;
const int ImageResizer::kIdentityResizerFieldNumber;
const int ImageResizer::kConditionalShapeResizerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageResizer::ImageResizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ImageResizer)
}
ImageResizer::ImageResizer(const ImageResizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_image_resizer_oneof();
  switch (from.image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer: {
      mutable_keep_aspect_ratio_resizer()->::object_detection::protos::KeepAspectRatioResizer::MergeFrom(from.keep_aspect_ratio_resizer());
      break;
    }
    case kFixedShapeResizer: {
      mutable_fixed_shape_resizer()->::object_detection::protos::FixedShapeResizer::MergeFrom(from.fixed_shape_resizer());
      break;
    }
    case kIdentityResizer: {
      mutable_identity_resizer()->::object_detection::protos::IdentityResizer::MergeFrom(from.identity_resizer());
      break;
    }
    case kConditionalShapeResizer: {
      mutable_conditional_shape_resizer()->::object_detection::protos::ConditionalShapeResizer::MergeFrom(from.conditional_shape_resizer());
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ImageResizer)
}

void ImageResizer::SharedCtor() {
  _cached_size_ = 0;
  clear_has_image_resizer_oneof();
}

ImageResizer::~ImageResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ImageResizer)
  SharedDtor();
}

void ImageResizer::SharedDtor() {
  if (has_image_resizer_oneof()) {
    clear_image_resizer_oneof();
  }
}

void ImageResizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageResizer::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageResizer& ImageResizer::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageResizer* ImageResizer::New(::google::protobuf::Arena* arena) const {
  ImageResizer* n = new ImageResizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageResizer::clear_image_resizer_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.ImageResizer)
  switch (image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer: {
      delete image_resizer_oneof_.keep_aspect_ratio_resizer_;
      break;
    }
    case kFixedShapeResizer: {
      delete image_resizer_oneof_.fixed_shape_resizer_;
      break;
    }
    case kIdentityResizer: {
      delete image_resizer_oneof_.identity_resizer_;
      break;
    }
    case kConditionalShapeResizer: {
      delete image_resizer_oneof_.conditional_shape_resizer_;
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IMAGE_RESIZER_ONEOF_NOT_SET;
}


void ImageResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ImageResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_image_resizer_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageResizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ImageResizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keep_aspect_ratio_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixed_shape_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.IdentityResizer identity_resizer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_identity_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_shape_resizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ImageResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ImageResizer)
  return false;
#undef DO_
}

void ImageResizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ImageResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *image_resizer_oneof_.keep_aspect_ratio_resizer_, output);
      break;
    case kFixedShapeResizer:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *image_resizer_oneof_.fixed_shape_resizer_, output);
      break;
    case kIdentityResizer:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *image_resizer_oneof_.identity_resizer_, output);
      break;
    case kConditionalShapeResizer:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *image_resizer_oneof_.conditional_shape_resizer_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ImageResizer)
}

::google::protobuf::uint8* ImageResizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ImageResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *image_resizer_oneof_.keep_aspect_ratio_resizer_, deterministic, target);
      break;
    case kFixedShapeResizer:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *image_resizer_oneof_.fixed_shape_resizer_, deterministic, target);
      break;
    case kIdentityResizer:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *image_resizer_oneof_.identity_resizer_, deterministic, target);
      break;
    case kConditionalShapeResizer:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *image_resizer_oneof_.conditional_shape_resizer_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ImageResizer)
  return target;
}

size_t ImageResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ImageResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (image_resizer_oneof_case()) {
    // optional .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
    case kKeepAspectRatioResizer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *image_resizer_oneof_.keep_aspect_ratio_resizer_);
      break;
    }
    // optional .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
    case kFixedShapeResizer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *image_resizer_oneof_.fixed_shape_resizer_);
      break;
    }
    // optional .object_detection.protos.IdentityResizer identity_resizer = 3;
    case kIdentityResizer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *image_resizer_oneof_.identity_resizer_);
      break;
    }
    // optional .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
    case kConditionalShapeResizer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *image_resizer_oneof_.conditional_shape_resizer_);
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageResizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ImageResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageResizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageResizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ImageResizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ImageResizer)
    MergeFrom(*source);
  }
}

void ImageResizer::MergeFrom(const ImageResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ImageResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.image_resizer_oneof_case()) {
    case kKeepAspectRatioResizer: {
      mutable_keep_aspect_ratio_resizer()->::object_detection::protos::KeepAspectRatioResizer::MergeFrom(from.keep_aspect_ratio_resizer());
      break;
    }
    case kFixedShapeResizer: {
      mutable_fixed_shape_resizer()->::object_detection::protos::FixedShapeResizer::MergeFrom(from.fixed_shape_resizer());
      break;
    }
    case kIdentityResizer: {
      mutable_identity_resizer()->::object_detection::protos::IdentityResizer::MergeFrom(from.identity_resizer());
      break;
    }
    case kConditionalShapeResizer: {
      mutable_conditional_shape_resizer()->::object_detection::protos::ConditionalShapeResizer::MergeFrom(from.conditional_shape_resizer());
      break;
    }
    case IMAGE_RESIZER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void ImageResizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ImageResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageResizer::CopyFrom(const ImageResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ImageResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResizer::IsInitialized() const {
  return true;
}

void ImageResizer::Swap(ImageResizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageResizer::InternalSwap(ImageResizer* other) {
  using std::swap;
  swap(image_resizer_oneof_, other->image_resizer_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageResizer::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageResizer

// optional .object_detection.protos.KeepAspectRatioResizer keep_aspect_ratio_resizer = 1;
bool ImageResizer::has_keep_aspect_ratio_resizer() const {
  return image_resizer_oneof_case() == kKeepAspectRatioResizer;
}
void ImageResizer::set_has_keep_aspect_ratio_resizer() {
  _oneof_case_[0] = kKeepAspectRatioResizer;
}
void ImageResizer::clear_keep_aspect_ratio_resizer() {
  if (has_keep_aspect_ratio_resizer()) {
    delete image_resizer_oneof_.keep_aspect_ratio_resizer_;
    clear_has_image_resizer_oneof();
  }
}
 const ::object_detection::protos::KeepAspectRatioResizer& ImageResizer::keep_aspect_ratio_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  return has_keep_aspect_ratio_resizer()
      ? *image_resizer_oneof_.keep_aspect_ratio_resizer_
      : ::object_detection::protos::KeepAspectRatioResizer::default_instance();
}
::object_detection::protos::KeepAspectRatioResizer* ImageResizer::mutable_keep_aspect_ratio_resizer() {
  if (!has_keep_aspect_ratio_resizer()) {
    clear_image_resizer_oneof();
    set_has_keep_aspect_ratio_resizer();
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = new ::object_detection::protos::KeepAspectRatioResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  return image_resizer_oneof_.keep_aspect_ratio_resizer_;
}
::object_detection::protos::KeepAspectRatioResizer* ImageResizer::release_keep_aspect_ratio_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
  if (has_keep_aspect_ratio_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::KeepAspectRatioResizer* temp = image_resizer_oneof_.keep_aspect_ratio_resizer_;
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ImageResizer::set_allocated_keep_aspect_ratio_resizer(::object_detection::protos::KeepAspectRatioResizer* keep_aspect_ratio_resizer) {
  clear_image_resizer_oneof();
  if (keep_aspect_ratio_resizer) {
    set_has_keep_aspect_ratio_resizer();
    image_resizer_oneof_.keep_aspect_ratio_resizer_ = keep_aspect_ratio_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.keep_aspect_ratio_resizer)
}

// optional .object_detection.protos.FixedShapeResizer fixed_shape_resizer = 2;
bool ImageResizer::has_fixed_shape_resizer() const {
  return image_resizer_oneof_case() == kFixedShapeResizer;
}
void ImageResizer::set_has_fixed_shape_resizer() {
  _oneof_case_[0] = kFixedShapeResizer;
}
void ImageResizer::clear_fixed_shape_resizer() {
  if (has_fixed_shape_resizer()) {
    delete image_resizer_oneof_.fixed_shape_resizer_;
    clear_has_image_resizer_oneof();
  }
}
 const ::object_detection::protos::FixedShapeResizer& ImageResizer::fixed_shape_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.fixed_shape_resizer)
  return has_fixed_shape_resizer()
      ? *image_resizer_oneof_.fixed_shape_resizer_
      : ::object_detection::protos::FixedShapeResizer::default_instance();
}
::object_detection::protos::FixedShapeResizer* ImageResizer::mutable_fixed_shape_resizer() {
  if (!has_fixed_shape_resizer()) {
    clear_image_resizer_oneof();
    set_has_fixed_shape_resizer();
    image_resizer_oneof_.fixed_shape_resizer_ = new ::object_detection::protos::FixedShapeResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.fixed_shape_resizer)
  return image_resizer_oneof_.fixed_shape_resizer_;
}
::object_detection::protos::FixedShapeResizer* ImageResizer::release_fixed_shape_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.fixed_shape_resizer)
  if (has_fixed_shape_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::FixedShapeResizer* temp = image_resizer_oneof_.fixed_shape_resizer_;
    image_resizer_oneof_.fixed_shape_resizer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ImageResizer::set_allocated_fixed_shape_resizer(::object_detection::protos::FixedShapeResizer* fixed_shape_resizer) {
  clear_image_resizer_oneof();
  if (fixed_shape_resizer) {
    set_has_fixed_shape_resizer();
    image_resizer_oneof_.fixed_shape_resizer_ = fixed_shape_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.fixed_shape_resizer)
}

// optional .object_detection.protos.IdentityResizer identity_resizer = 3;
bool ImageResizer::has_identity_resizer() const {
  return image_resizer_oneof_case() == kIdentityResizer;
}
void ImageResizer::set_has_identity_resizer() {
  _oneof_case_[0] = kIdentityResizer;
}
void ImageResizer::clear_identity_resizer() {
  if (has_identity_resizer()) {
    delete image_resizer_oneof_.identity_resizer_;
    clear_has_image_resizer_oneof();
  }
}
 const ::object_detection::protos::IdentityResizer& ImageResizer::identity_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.identity_resizer)
  return has_identity_resizer()
      ? *image_resizer_oneof_.identity_resizer_
      : ::object_detection::protos::IdentityResizer::default_instance();
}
::object_detection::protos::IdentityResizer* ImageResizer::mutable_identity_resizer() {
  if (!has_identity_resizer()) {
    clear_image_resizer_oneof();
    set_has_identity_resizer();
    image_resizer_oneof_.identity_resizer_ = new ::object_detection::protos::IdentityResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.identity_resizer)
  return image_resizer_oneof_.identity_resizer_;
}
::object_detection::protos::IdentityResizer* ImageResizer::release_identity_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.identity_resizer)
  if (has_identity_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::IdentityResizer* temp = image_resizer_oneof_.identity_resizer_;
    image_resizer_oneof_.identity_resizer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ImageResizer::set_allocated_identity_resizer(::object_detection::protos::IdentityResizer* identity_resizer) {
  clear_image_resizer_oneof();
  if (identity_resizer) {
    set_has_identity_resizer();
    image_resizer_oneof_.identity_resizer_ = identity_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.identity_resizer)
}

// optional .object_detection.protos.ConditionalShapeResizer conditional_shape_resizer = 4;
bool ImageResizer::has_conditional_shape_resizer() const {
  return image_resizer_oneof_case() == kConditionalShapeResizer;
}
void ImageResizer::set_has_conditional_shape_resizer() {
  _oneof_case_[0] = kConditionalShapeResizer;
}
void ImageResizer::clear_conditional_shape_resizer() {
  if (has_conditional_shape_resizer()) {
    delete image_resizer_oneof_.conditional_shape_resizer_;
    clear_has_image_resizer_oneof();
  }
}
 const ::object_detection::protos::ConditionalShapeResizer& ImageResizer::conditional_shape_resizer() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ImageResizer.conditional_shape_resizer)
  return has_conditional_shape_resizer()
      ? *image_resizer_oneof_.conditional_shape_resizer_
      : ::object_detection::protos::ConditionalShapeResizer::default_instance();
}
::object_detection::protos::ConditionalShapeResizer* ImageResizer::mutable_conditional_shape_resizer() {
  if (!has_conditional_shape_resizer()) {
    clear_image_resizer_oneof();
    set_has_conditional_shape_resizer();
    image_resizer_oneof_.conditional_shape_resizer_ = new ::object_detection::protos::ConditionalShapeResizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.ImageResizer.conditional_shape_resizer)
  return image_resizer_oneof_.conditional_shape_resizer_;
}
::object_detection::protos::ConditionalShapeResizer* ImageResizer::release_conditional_shape_resizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.ImageResizer.conditional_shape_resizer)
  if (has_conditional_shape_resizer()) {
    clear_has_image_resizer_oneof();
    ::object_detection::protos::ConditionalShapeResizer* temp = image_resizer_oneof_.conditional_shape_resizer_;
    image_resizer_oneof_.conditional_shape_resizer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ImageResizer::set_allocated_conditional_shape_resizer(::object_detection::protos::ConditionalShapeResizer* conditional_shape_resizer) {
  clear_image_resizer_oneof();
  if (conditional_shape_resizer) {
    set_has_conditional_shape_resizer();
    image_resizer_oneof_.conditional_shape_resizer_ = conditional_shape_resizer;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.ImageResizer.conditional_shape_resizer)
}

bool ImageResizer::has_image_resizer_oneof() const {
  return image_resizer_oneof_case() != IMAGE_RESIZER_ONEOF_NOT_SET;
}
void ImageResizer::clear_has_image_resizer_oneof() {
  _oneof_case_[0] = IMAGE_RESIZER_ONEOF_NOT_SET;
}
ImageResizer::ImageResizerOneofCase ImageResizer::image_resizer_oneof_case() const {
  return ImageResizer::ImageResizerOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentityResizer::IdentityResizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.IdentityResizer)
}
IdentityResizer::IdentityResizer(const IdentityResizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.IdentityResizer)
}

void IdentityResizer::SharedCtor() {
  _cached_size_ = 0;
}

IdentityResizer::~IdentityResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.IdentityResizer)
  SharedDtor();
}

void IdentityResizer::SharedDtor() {
}

void IdentityResizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentityResizer::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdentityResizer& IdentityResizer::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

IdentityResizer* IdentityResizer::New(::google::protobuf::Arena* arena) const {
  IdentityResizer* n = new IdentityResizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdentityResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.IdentityResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IdentityResizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.IdentityResizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.IdentityResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.IdentityResizer)
  return false;
#undef DO_
}

void IdentityResizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.IdentityResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.IdentityResizer)
}

::google::protobuf::uint8* IdentityResizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.IdentityResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.IdentityResizer)
  return target;
}

size_t IdentityResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.IdentityResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentityResizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.IdentityResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentityResizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentityResizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.IdentityResizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.IdentityResizer)
    MergeFrom(*source);
  }
}

void IdentityResizer::MergeFrom(const IdentityResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.IdentityResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IdentityResizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.IdentityResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentityResizer::CopyFrom(const IdentityResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.IdentityResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentityResizer::IsInitialized() const {
  return true;
}

void IdentityResizer::Swap(IdentityResizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentityResizer::InternalSwap(IdentityResizer* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdentityResizer::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdentityResizer

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAspectRatioResizer::kMinDimensionFieldNumber;
const int KeepAspectRatioResizer::kMaxDimensionFieldNumber;
const int KeepAspectRatioResizer::kResizeMethodFieldNumber;
const int KeepAspectRatioResizer::kPadToMaxDimensionFieldNumber;
const int KeepAspectRatioResizer::kConvertToGrayscaleFieldNumber;
const int KeepAspectRatioResizer::kPerChannelPadValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAspectRatioResizer::KeepAspectRatioResizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.KeepAspectRatioResizer)
}
KeepAspectRatioResizer::KeepAspectRatioResizer(const KeepAspectRatioResizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      per_channel_pad_value_(from.per_channel_pad_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_method_, &from.resize_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_dimension_) -
    reinterpret_cast<char*>(&resize_method_)) + sizeof(max_dimension_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.KeepAspectRatioResizer)
}

void KeepAspectRatioResizer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&resize_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_grayscale_) -
      reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
  min_dimension_ = 600;
  max_dimension_ = 1024;
}

KeepAspectRatioResizer::~KeepAspectRatioResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.KeepAspectRatioResizer)
  SharedDtor();
}

void KeepAspectRatioResizer::SharedDtor() {
}

void KeepAspectRatioResizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeepAspectRatioResizer::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepAspectRatioResizer& KeepAspectRatioResizer::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeepAspectRatioResizer* KeepAspectRatioResizer::New(::google::protobuf::Arena* arena) const {
  KeepAspectRatioResizer* n = new KeepAspectRatioResizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeepAspectRatioResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.KeepAspectRatioResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_channel_pad_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&resize_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_grayscale_) -
        reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
    min_dimension_ = 600;
    max_dimension_ = 1024;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepAspectRatioResizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.KeepAspectRatioResizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_dimension = 1 [default = 600];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_dimension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_dimension = 2 [default = 1024];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_dimension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeType_IsValid(value)) {
            set_resize_method(static_cast< ::object_detection::protos::ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pad_to_max_dimension = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_pad_to_max_dimension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_to_max_dimension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_grayscale = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_convert_to_grayscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_grayscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float per_channel_pad_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53u, input, this->mutable_per_channel_pad_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_per_channel_pad_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.KeepAspectRatioResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.KeepAspectRatioResizer)
  return false;
#undef DO_
}

void KeepAspectRatioResizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.KeepAspectRatioResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_dimension = 1 [default = 600];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_dimension(), output);
  }

  // optional int32 max_dimension = 2 [default = 1024];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_dimension(), output);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->resize_method(), output);
  }

  // optional bool pad_to_max_dimension = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pad_to_max_dimension(), output);
  }

  // optional bool convert_to_grayscale = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->convert_to_grayscale(), output);
  }

  // repeated float per_channel_pad_value = 6;
  for (int i = 0, n = this->per_channel_pad_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->per_channel_pad_value(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.KeepAspectRatioResizer)
}

::google::protobuf::uint8* KeepAspectRatioResizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.KeepAspectRatioResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min_dimension = 1 [default = 600];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_dimension(), target);
  }

  // optional int32 max_dimension = 2 [default = 1024];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_dimension(), target);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->resize_method(), target);
  }

  // optional bool pad_to_max_dimension = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pad_to_max_dimension(), target);
  }

  // optional bool convert_to_grayscale = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->convert_to_grayscale(), target);
  }

  // repeated float per_channel_pad_value = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(6, this->per_channel_pad_value_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.KeepAspectRatioResizer)
  return target;
}

size_t KeepAspectRatioResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.KeepAspectRatioResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float per_channel_pad_value = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->per_channel_pad_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->per_channel_pad_value_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
    if (has_resize_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resize_method());
    }

    // optional bool pad_to_max_dimension = 4 [default = false];
    if (has_pad_to_max_dimension()) {
      total_size += 1 + 1;
    }

    // optional bool convert_to_grayscale = 5 [default = false];
    if (has_convert_to_grayscale()) {
      total_size += 1 + 1;
    }

    // optional int32 min_dimension = 1 [default = 600];
    if (has_min_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_dimension());
    }

    // optional int32 max_dimension = 2 [default = 1024];
    if (has_max_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_dimension());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeepAspectRatioResizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.KeepAspectRatioResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAspectRatioResizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAspectRatioResizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.KeepAspectRatioResizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.KeepAspectRatioResizer)
    MergeFrom(*source);
  }
}

void KeepAspectRatioResizer::MergeFrom(const KeepAspectRatioResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.KeepAspectRatioResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  per_channel_pad_value_.MergeFrom(from.per_channel_pad_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      resize_method_ = from.resize_method_;
    }
    if (cached_has_bits & 0x00000002u) {
      pad_to_max_dimension_ = from.pad_to_max_dimension_;
    }
    if (cached_has_bits & 0x00000004u) {
      convert_to_grayscale_ = from.convert_to_grayscale_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_dimension_ = from.min_dimension_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_dimension_ = from.max_dimension_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeepAspectRatioResizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.KeepAspectRatioResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAspectRatioResizer::CopyFrom(const KeepAspectRatioResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.KeepAspectRatioResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAspectRatioResizer::IsInitialized() const {
  return true;
}

void KeepAspectRatioResizer::Swap(KeepAspectRatioResizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAspectRatioResizer::InternalSwap(KeepAspectRatioResizer* other) {
  using std::swap;
  per_channel_pad_value_.InternalSwap(&other->per_channel_pad_value_);
  swap(resize_method_, other->resize_method_);
  swap(pad_to_max_dimension_, other->pad_to_max_dimension_);
  swap(convert_to_grayscale_, other->convert_to_grayscale_);
  swap(min_dimension_, other->min_dimension_);
  swap(max_dimension_, other->max_dimension_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeepAspectRatioResizer::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeepAspectRatioResizer

// optional int32 min_dimension = 1 [default = 600];
bool KeepAspectRatioResizer::has_min_dimension() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KeepAspectRatioResizer::set_has_min_dimension() {
  _has_bits_[0] |= 0x00000008u;
}
void KeepAspectRatioResizer::clear_has_min_dimension() {
  _has_bits_[0] &= ~0x00000008u;
}
void KeepAspectRatioResizer::clear_min_dimension() {
  min_dimension_ = 600;
  clear_has_min_dimension();
}
::google::protobuf::int32 KeepAspectRatioResizer::min_dimension() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.min_dimension)
  return min_dimension_;
}
void KeepAspectRatioResizer::set_min_dimension(::google::protobuf::int32 value) {
  set_has_min_dimension();
  min_dimension_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.min_dimension)
}

// optional int32 max_dimension = 2 [default = 1024];
bool KeepAspectRatioResizer::has_max_dimension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KeepAspectRatioResizer::set_has_max_dimension() {
  _has_bits_[0] |= 0x00000010u;
}
void KeepAspectRatioResizer::clear_has_max_dimension() {
  _has_bits_[0] &= ~0x00000010u;
}
void KeepAspectRatioResizer::clear_max_dimension() {
  max_dimension_ = 1024;
  clear_has_max_dimension();
}
::google::protobuf::int32 KeepAspectRatioResizer::max_dimension() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.max_dimension)
  return max_dimension_;
}
void KeepAspectRatioResizer::set_max_dimension(::google::protobuf::int32 value) {
  set_has_max_dimension();
  max_dimension_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.max_dimension)
}

// optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
bool KeepAspectRatioResizer::has_resize_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeepAspectRatioResizer::set_has_resize_method() {
  _has_bits_[0] |= 0x00000001u;
}
void KeepAspectRatioResizer::clear_has_resize_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeepAspectRatioResizer::clear_resize_method() {
  resize_method_ = 0;
  clear_has_resize_method();
}
::object_detection::protos::ResizeType KeepAspectRatioResizer::resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.resize_method)
  return static_cast< ::object_detection::protos::ResizeType >(resize_method_);
}
void KeepAspectRatioResizer::set_resize_method(::object_detection::protos::ResizeType value) {
  assert(::object_detection::protos::ResizeType_IsValid(value));
  set_has_resize_method();
  resize_method_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.resize_method)
}

// optional bool pad_to_max_dimension = 4 [default = false];
bool KeepAspectRatioResizer::has_pad_to_max_dimension() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeepAspectRatioResizer::set_has_pad_to_max_dimension() {
  _has_bits_[0] |= 0x00000002u;
}
void KeepAspectRatioResizer::clear_has_pad_to_max_dimension() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeepAspectRatioResizer::clear_pad_to_max_dimension() {
  pad_to_max_dimension_ = false;
  clear_has_pad_to_max_dimension();
}
bool KeepAspectRatioResizer::pad_to_max_dimension() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.pad_to_max_dimension)
  return pad_to_max_dimension_;
}
void KeepAspectRatioResizer::set_pad_to_max_dimension(bool value) {
  set_has_pad_to_max_dimension();
  pad_to_max_dimension_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.pad_to_max_dimension)
}

// optional bool convert_to_grayscale = 5 [default = false];
bool KeepAspectRatioResizer::has_convert_to_grayscale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KeepAspectRatioResizer::set_has_convert_to_grayscale() {
  _has_bits_[0] |= 0x00000004u;
}
void KeepAspectRatioResizer::clear_has_convert_to_grayscale() {
  _has_bits_[0] &= ~0x00000004u;
}
void KeepAspectRatioResizer::clear_convert_to_grayscale() {
  convert_to_grayscale_ = false;
  clear_has_convert_to_grayscale();
}
bool KeepAspectRatioResizer::convert_to_grayscale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.convert_to_grayscale)
  return convert_to_grayscale_;
}
void KeepAspectRatioResizer::set_convert_to_grayscale(bool value) {
  set_has_convert_to_grayscale();
  convert_to_grayscale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.convert_to_grayscale)
}

// repeated float per_channel_pad_value = 6;
int KeepAspectRatioResizer::per_channel_pad_value_size() const {
  return per_channel_pad_value_.size();
}
void KeepAspectRatioResizer::clear_per_channel_pad_value() {
  per_channel_pad_value_.Clear();
}
float KeepAspectRatioResizer::per_channel_pad_value(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
  return per_channel_pad_value_.Get(index);
}
void KeepAspectRatioResizer::set_per_channel_pad_value(int index, float value) {
  per_channel_pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
}
void KeepAspectRatioResizer::add_per_channel_pad_value(float value) {
  per_channel_pad_value_.Add(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
}
const ::google::protobuf::RepeatedField< float >&
KeepAspectRatioResizer::per_channel_pad_value() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
  return per_channel_pad_value_;
}
::google::protobuf::RepeatedField< float >*
KeepAspectRatioResizer::mutable_per_channel_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.KeepAspectRatioResizer.per_channel_pad_value)
  return &per_channel_pad_value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedShapeResizer::kHeightFieldNumber;
const int FixedShapeResizer::kWidthFieldNumber;
const int FixedShapeResizer::kResizeMethodFieldNumber;
const int FixedShapeResizer::kConvertToGrayscaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedShapeResizer::FixedShapeResizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.FixedShapeResizer)
}
FixedShapeResizer::FixedShapeResizer(const FixedShapeResizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_method_, &from.resize_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&resize_method_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.FixedShapeResizer)
}

void FixedShapeResizer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&resize_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_grayscale_) -
      reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
  height_ = 300;
  width_ = 300;
}

FixedShapeResizer::~FixedShapeResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.FixedShapeResizer)
  SharedDtor();
}

void FixedShapeResizer::SharedDtor() {
}

void FixedShapeResizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedShapeResizer::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedShapeResizer& FixedShapeResizer::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixedShapeResizer* FixedShapeResizer::New(::google::protobuf::Arena* arena) const {
  FixedShapeResizer* n = new FixedShapeResizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedShapeResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.FixedShapeResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&resize_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_grayscale_) -
        reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
    height_ = 300;
    width_ = 300;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FixedShapeResizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.FixedShapeResizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 height = 1 [default = 300];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2 [default = 300];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeType_IsValid(value)) {
            set_resize_method(static_cast< ::object_detection::protos::ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_grayscale = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_convert_to_grayscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_grayscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.FixedShapeResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.FixedShapeResizer)
  return false;
#undef DO_
}

void FixedShapeResizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.FixedShapeResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1 [default = 300];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // optional int32 width = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->resize_method(), output);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->convert_to_grayscale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.FixedShapeResizer)
}

::google::protobuf::uint8* FixedShapeResizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.FixedShapeResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1 [default = 300];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // optional int32 width = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->resize_method(), target);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->convert_to_grayscale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.FixedShapeResizer)
  return target;
}

size_t FixedShapeResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.FixedShapeResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
    if (has_resize_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resize_method());
    }

    // optional bool convert_to_grayscale = 4 [default = false];
    if (has_convert_to_grayscale()) {
      total_size += 1 + 1;
    }

    // optional int32 height = 1 [default = 300];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 2 [default = 300];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedShapeResizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.FixedShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedShapeResizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedShapeResizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.FixedShapeResizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.FixedShapeResizer)
    MergeFrom(*source);
  }
}

void FixedShapeResizer::MergeFrom(const FixedShapeResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.FixedShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      resize_method_ = from.resize_method_;
    }
    if (cached_has_bits & 0x00000002u) {
      convert_to_grayscale_ = from.convert_to_grayscale_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FixedShapeResizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.FixedShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedShapeResizer::CopyFrom(const FixedShapeResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.FixedShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedShapeResizer::IsInitialized() const {
  return true;
}

void FixedShapeResizer::Swap(FixedShapeResizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedShapeResizer::InternalSwap(FixedShapeResizer* other) {
  using std::swap;
  swap(resize_method_, other->resize_method_);
  swap(convert_to_grayscale_, other->convert_to_grayscale_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedShapeResizer::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedShapeResizer

// optional int32 height = 1 [default = 300];
bool FixedShapeResizer::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FixedShapeResizer::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void FixedShapeResizer::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void FixedShapeResizer::clear_height() {
  height_ = 300;
  clear_has_height();
}
::google::protobuf::int32 FixedShapeResizer::height() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.height)
  return height_;
}
void FixedShapeResizer::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.height)
}

// optional int32 width = 2 [default = 300];
bool FixedShapeResizer::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FixedShapeResizer::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void FixedShapeResizer::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void FixedShapeResizer::clear_width() {
  width_ = 300;
  clear_has_width();
}
::google::protobuf::int32 FixedShapeResizer::width() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.width)
  return width_;
}
void FixedShapeResizer::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.width)
}

// optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
bool FixedShapeResizer::has_resize_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FixedShapeResizer::set_has_resize_method() {
  _has_bits_[0] |= 0x00000001u;
}
void FixedShapeResizer::clear_has_resize_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void FixedShapeResizer::clear_resize_method() {
  resize_method_ = 0;
  clear_has_resize_method();
}
::object_detection::protos::ResizeType FixedShapeResizer::resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.resize_method)
  return static_cast< ::object_detection::protos::ResizeType >(resize_method_);
}
void FixedShapeResizer::set_resize_method(::object_detection::protos::ResizeType value) {
  assert(::object_detection::protos::ResizeType_IsValid(value));
  set_has_resize_method();
  resize_method_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.resize_method)
}

// optional bool convert_to_grayscale = 4 [default = false];
bool FixedShapeResizer::has_convert_to_grayscale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FixedShapeResizer::set_has_convert_to_grayscale() {
  _has_bits_[0] |= 0x00000002u;
}
void FixedShapeResizer::clear_has_convert_to_grayscale() {
  _has_bits_[0] &= ~0x00000002u;
}
void FixedShapeResizer::clear_convert_to_grayscale() {
  convert_to_grayscale_ = false;
  clear_has_convert_to_grayscale();
}
bool FixedShapeResizer::convert_to_grayscale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.FixedShapeResizer.convert_to_grayscale)
  return convert_to_grayscale_;
}
void FixedShapeResizer::set_convert_to_grayscale(bool value) {
  set_has_convert_to_grayscale();
  convert_to_grayscale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.FixedShapeResizer.convert_to_grayscale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionalShapeResizer::kConditionFieldNumber;
const int ConditionalShapeResizer::kSizeThresholdFieldNumber;
const int ConditionalShapeResizer::kResizeMethodFieldNumber;
const int ConditionalShapeResizer::kConvertToGrayscaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionalShapeResizer::ConditionalShapeResizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.ConditionalShapeResizer)
}
ConditionalShapeResizer::ConditionalShapeResizer(const ConditionalShapeResizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resize_method_, &from.resize_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_threshold_) -
    reinterpret_cast<char*>(&resize_method_)) + sizeof(size_threshold_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.ConditionalShapeResizer)
}

void ConditionalShapeResizer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&resize_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convert_to_grayscale_) -
      reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
  condition_ = 1;
  size_threshold_ = 300;
}

ConditionalShapeResizer::~ConditionalShapeResizer() {
  // @@protoc_insertion_point(destructor:object_detection.protos.ConditionalShapeResizer)
  SharedDtor();
}

void ConditionalShapeResizer::SharedDtor() {
}

void ConditionalShapeResizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionalShapeResizer::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConditionalShapeResizer& ConditionalShapeResizer::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConditionalShapeResizer* ConditionalShapeResizer::New(::google::protobuf::Arena* arena) const {
  ConditionalShapeResizer* n = new ConditionalShapeResizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConditionalShapeResizer::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.ConditionalShapeResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&resize_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convert_to_grayscale_) -
        reinterpret_cast<char*>(&resize_method_)) + sizeof(convert_to_grayscale_));
    condition_ = 1;
    size_threshold_ = 300;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConditionalShapeResizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.ConditionalShapeResizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ConditionalShapeResizer_ResizeCondition_IsValid(value)) {
            set_condition(static_cast< ::object_detection::protos::ConditionalShapeResizer_ResizeCondition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size_threshold = 2 [default = 300];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_size_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::object_detection::protos::ResizeType_IsValid(value)) {
            set_resize_method(static_cast< ::object_detection::protos::ResizeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool convert_to_grayscale = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_convert_to_grayscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &convert_to_grayscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.ConditionalShapeResizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.ConditionalShapeResizer)
  return false;
#undef DO_
}

void ConditionalShapeResizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.ConditionalShapeResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->condition(), output);
  }

  // optional int32 size_threshold = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size_threshold(), output);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->resize_method(), output);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->convert_to_grayscale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.ConditionalShapeResizer)
}

::google::protobuf::uint8* ConditionalShapeResizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.ConditionalShapeResizer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->condition(), target);
  }

  // optional int32 size_threshold = 2 [default = 300];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size_threshold(), target);
  }

  // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->resize_method(), target);
  }

  // optional bool convert_to_grayscale = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->convert_to_grayscale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.ConditionalShapeResizer)
  return target;
}

size_t ConditionalShapeResizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.ConditionalShapeResizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
    if (has_resize_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resize_method());
    }

    // optional bool convert_to_grayscale = 4 [default = false];
    if (has_convert_to_grayscale()) {
      total_size += 1 + 1;
    }

    // optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->condition());
    }

    // optional int32 size_threshold = 2 [default = 300];
    if (has_size_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size_threshold());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionalShapeResizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.ConditionalShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionalShapeResizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConditionalShapeResizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.ConditionalShapeResizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.ConditionalShapeResizer)
    MergeFrom(*source);
  }
}

void ConditionalShapeResizer::MergeFrom(const ConditionalShapeResizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.ConditionalShapeResizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      resize_method_ = from.resize_method_;
    }
    if (cached_has_bits & 0x00000002u) {
      convert_to_grayscale_ = from.convert_to_grayscale_;
    }
    if (cached_has_bits & 0x00000004u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_threshold_ = from.size_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConditionalShapeResizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.ConditionalShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionalShapeResizer::CopyFrom(const ConditionalShapeResizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.ConditionalShapeResizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionalShapeResizer::IsInitialized() const {
  return true;
}

void ConditionalShapeResizer::Swap(ConditionalShapeResizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionalShapeResizer::InternalSwap(ConditionalShapeResizer* other) {
  using std::swap;
  swap(resize_method_, other->resize_method_);
  swap(convert_to_grayscale_, other->convert_to_grayscale_);
  swap(condition_, other->condition_);
  swap(size_threshold_, other->size_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConditionalShapeResizer::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fimage_5fresizer_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConditionalShapeResizer

// optional .object_detection.protos.ConditionalShapeResizer.ResizeCondition condition = 1 [default = GREATER];
bool ConditionalShapeResizer::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConditionalShapeResizer::set_has_condition() {
  _has_bits_[0] |= 0x00000004u;
}
void ConditionalShapeResizer::clear_has_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConditionalShapeResizer::clear_condition() {
  condition_ = 1;
  clear_has_condition();
}
::object_detection::protos::ConditionalShapeResizer_ResizeCondition ConditionalShapeResizer::condition() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.condition)
  return static_cast< ::object_detection::protos::ConditionalShapeResizer_ResizeCondition >(condition_);
}
void ConditionalShapeResizer::set_condition(::object_detection::protos::ConditionalShapeResizer_ResizeCondition value) {
  assert(::object_detection::protos::ConditionalShapeResizer_ResizeCondition_IsValid(value));
  set_has_condition();
  condition_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.condition)
}

// optional int32 size_threshold = 2 [default = 300];
bool ConditionalShapeResizer::has_size_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConditionalShapeResizer::set_has_size_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void ConditionalShapeResizer::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConditionalShapeResizer::clear_size_threshold() {
  size_threshold_ = 300;
  clear_has_size_threshold();
}
::google::protobuf::int32 ConditionalShapeResizer::size_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.size_threshold)
  return size_threshold_;
}
void ConditionalShapeResizer::set_size_threshold(::google::protobuf::int32 value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.size_threshold)
}

// optional .object_detection.protos.ResizeType resize_method = 3 [default = BILINEAR];
bool ConditionalShapeResizer::has_resize_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConditionalShapeResizer::set_has_resize_method() {
  _has_bits_[0] |= 0x00000001u;
}
void ConditionalShapeResizer::clear_has_resize_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConditionalShapeResizer::clear_resize_method() {
  resize_method_ = 0;
  clear_has_resize_method();
}
::object_detection::protos::ResizeType ConditionalShapeResizer::resize_method() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.resize_method)
  return static_cast< ::object_detection::protos::ResizeType >(resize_method_);
}
void ConditionalShapeResizer::set_resize_method(::object_detection::protos::ResizeType value) {
  assert(::object_detection::protos::ResizeType_IsValid(value));
  set_has_resize_method();
  resize_method_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.resize_method)
}

// optional bool convert_to_grayscale = 4 [default = false];
bool ConditionalShapeResizer::has_convert_to_grayscale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConditionalShapeResizer::set_has_convert_to_grayscale() {
  _has_bits_[0] |= 0x00000002u;
}
void ConditionalShapeResizer::clear_has_convert_to_grayscale() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConditionalShapeResizer::clear_convert_to_grayscale() {
  convert_to_grayscale_ = false;
  clear_has_convert_to_grayscale();
}
bool ConditionalShapeResizer::convert_to_grayscale() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ConditionalShapeResizer.convert_to_grayscale)
  return convert_to_grayscale_;
}
void ConditionalShapeResizer::set_convert_to_grayscale(bool value) {
  set_has_convert_to_grayscale();
  convert_to_grayscale_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ConditionalShapeResizer.convert_to_grayscale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
