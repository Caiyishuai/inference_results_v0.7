// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/train.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/train.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class TrainConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrainConfig>
     _instance;
} _TrainConfig_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2ftrain_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, data_augmentation_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, sync_replicas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, keep_checkpoint_every_n_hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, gradient_clipping_by_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, fine_tune_checkpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, fine_tune_checkpoint_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, from_detection_checkpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, load_all_detection_checkpoint_vars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, num_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, startup_delay_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, bias_grad_multiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, update_trainable_variables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, freeze_variables_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, replicas_to_aggregate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, batch_queue_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, num_batch_queue_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, prefetch_queue_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, merge_multiple_label_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, use_multiclass_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, add_regularization_loss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, max_number_of_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, unpad_groundtruth_tensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, retain_original_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, use_bfloat16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, summarize_gradients_),
  15,
  ~0u,
  6,
  16,
  2,
  3,
  0,
  1,
  7,
  8,
  4,
  17,
  5,
  ~0u,
  ~0u,
  18,
  19,
  20,
  21,
  9,
  10,
  22,
  14,
  23,
  11,
  12,
  13,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(TrainConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrainConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/train.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2foptimizer_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::InitDefaults();
  _TrainConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrainConfig_default_instance_);_TrainConfig_default_instance_._instance.get_mutable()->optimizer_ = const_cast< ::object_detection::protos::Optimizer*>(
      ::object_detection::protos::Optimizer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#object_detection/protos/train.proto\022\027o"
      "bject_detection.protos\032\'object_detection"
      "/protos/optimizer.proto\032*object_detectio"
      "n/protos/preprocessor.proto\"\241\010\n\013TrainCon"
      "fig\022\026\n\nbatch_size\030\001 \001(\r:\00232\022M\n\031data_augm"
      "entation_options\030\002 \003(\0132*.object_detectio"
      "n.protos.PreprocessingStep\022\034\n\rsync_repli"
      "cas\030\003 \001(\010:\005false\022,\n\035keep_checkpoint_ever"
      "y_n_hours\030\004 \001(\002:\00510000\0225\n\toptimizer\030\005 \001("
      "\0132\".object_detection.protos.Optimizer\022$\n"
      "\031gradient_clipping_by_norm\030\006 \001(\002:\0010\022\036\n\024f"
      "ine_tune_checkpoint\030\007 \001(\t:\000\022#\n\031fine_tune"
      "_checkpoint_type\030\026 \001(\t:\000\022,\n\031from_detecti"
      "on_checkpoint\030\010 \001(\010:\005falseB\002\030\001\0221\n\"load_a"
      "ll_detection_checkpoint_vars\030\023 \001(\010:\005fals"
      "e\022\024\n\tnum_steps\030\t \001(\r:\0010\022\037\n\023startup_delay"
      "_steps\030\n \001(\002:\00215\022\037\n\024bias_grad_multiplier"
      "\030\013 \001(\002:\0010\022\"\n\032update_trainable_variables\030"
      "\031 \003(\t\022\030\n\020freeze_variables\030\014 \003(\t\022 \n\025repli"
      "cas_to_aggregate\030\r \001(\005:\0011\022%\n\024batch_queue"
      "_capacity\030\016 \001(\005:\003150B\002\030\001\022&\n\027num_batch_qu"
      "eue_threads\030\017 \001(\005:\0018B\002\030\001\022&\n\027prefetch_que"
      "ue_capacity\030\020 \001(\005:\0015B\002\030\001\022)\n\032merge_multip"
      "le_label_boxes\030\021 \001(\010:\005false\022$\n\025use_multi"
      "class_scores\030\030 \001(\010:\005false\022%\n\027add_regular"
      "ization_loss\030\022 \001(\010:\004true\022$\n\023max_number_o"
      "f_boxes\030\024 \001(\005:\003100B\002\030\001\022\'\n\031unpad_groundtr"
      "uth_tensors\030\025 \001(\010:\004true\022%\n\026retain_origin"
      "al_images\030\027 \001(\010:\005false\022\033\n\014use_bfloat16\030\032"
      " \001(\010:\005false\022\"\n\023summarize_gradients\030\033 \001(\010"
      ":\005false"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/train.proto", &protobuf_RegisterTypes);
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2foptimizer_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fpreprocessor_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2ftrain_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainConfig::kBatchSizeFieldNumber;
const int TrainConfig::kDataAugmentationOptionsFieldNumber;
const int TrainConfig::kSyncReplicasFieldNumber;
const int TrainConfig::kKeepCheckpointEveryNHoursFieldNumber;
const int TrainConfig::kOptimizerFieldNumber;
const int TrainConfig::kGradientClippingByNormFieldNumber;
const int TrainConfig::kFineTuneCheckpointFieldNumber;
const int TrainConfig::kFineTuneCheckpointTypeFieldNumber;
const int TrainConfig::kFromDetectionCheckpointFieldNumber;
const int TrainConfig::kLoadAllDetectionCheckpointVarsFieldNumber;
const int TrainConfig::kNumStepsFieldNumber;
const int TrainConfig::kStartupDelayStepsFieldNumber;
const int TrainConfig::kBiasGradMultiplierFieldNumber;
const int TrainConfig::kUpdateTrainableVariablesFieldNumber;
const int TrainConfig::kFreezeVariablesFieldNumber;
const int TrainConfig::kReplicasToAggregateFieldNumber;
const int TrainConfig::kBatchQueueCapacityFieldNumber;
const int TrainConfig::kNumBatchQueueThreadsFieldNumber;
const int TrainConfig::kPrefetchQueueCapacityFieldNumber;
const int TrainConfig::kMergeMultipleLabelBoxesFieldNumber;
const int TrainConfig::kUseMulticlassScoresFieldNumber;
const int TrainConfig::kAddRegularizationLossFieldNumber;
const int TrainConfig::kMaxNumberOfBoxesFieldNumber;
const int TrainConfig::kUnpadGroundtruthTensorsFieldNumber;
const int TrainConfig::kRetainOriginalImagesFieldNumber;
const int TrainConfig::kUseBfloat16FieldNumber;
const int TrainConfig::kSummarizeGradientsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainConfig::TrainConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2ftrain_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.TrainConfig)
}
TrainConfig::TrainConfig(const TrainConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_augmentation_options_(from.data_augmentation_options_),
      freeze_variables_(from.freeze_variables_),
      update_trainable_variables_(from.update_trainable_variables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fine_tune_checkpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fine_tune_checkpoint()) {
    fine_tune_checkpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_);
  }
  fine_tune_checkpoint_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fine_tune_checkpoint_type()) {
    fine_tune_checkpoint_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_type_);
  }
  if (from.has_optimizer()) {
    optimizer_ = new ::object_detection::protos::Optimizer(*from.optimizer_);
  } else {
    optimizer_ = NULL;
  }
  ::memcpy(&gradient_clipping_by_norm_, &from.gradient_clipping_by_norm_,
    static_cast<size_t>(reinterpret_cast<char*>(&unpad_groundtruth_tensors_) -
    reinterpret_cast<char*>(&gradient_clipping_by_norm_)) + sizeof(unpad_groundtruth_tensors_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.TrainConfig)
}

void TrainConfig::SharedCtor() {
  _cached_size_ = 0;
  fine_tune_checkpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fine_tune_checkpoint_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&optimizer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&summarize_gradients_) -
      reinterpret_cast<char*>(&optimizer_)) + sizeof(summarize_gradients_));
  max_number_of_boxes_ = 100;
  batch_size_ = 32u;
  keep_checkpoint_every_n_hours_ = 10000;
  startup_delay_steps_ = 15;
  replicas_to_aggregate_ = 1;
  batch_queue_capacity_ = 150;
  num_batch_queue_threads_ = 8;
  prefetch_queue_capacity_ = 5;
  add_regularization_loss_ = true;
  unpad_groundtruth_tensors_ = true;
}

TrainConfig::~TrainConfig() {
  // @@protoc_insertion_point(destructor:object_detection.protos.TrainConfig)
  SharedDtor();
}

void TrainConfig::SharedDtor() {
  fine_tune_checkpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fine_tune_checkpoint_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete optimizer_;
}

void TrainConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainConfig::descriptor() {
  protobuf_object_5fdetection_2fprotos_2ftrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2ftrain_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrainConfig& TrainConfig::default_instance() {
  protobuf_object_5fdetection_2fprotos_2ftrain_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrainConfig* TrainConfig::New(::google::protobuf::Arena* arena) const {
  TrainConfig* n = new TrainConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrainConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.TrainConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_augmentation_options_.Clear();
  freeze_variables_.Clear();
  update_trainable_variables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!fine_tune_checkpoint_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fine_tune_checkpoint_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fine_tune_checkpoint_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fine_tune_checkpoint_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(optimizer_ != NULL);
      optimizer_->::object_detection::protos::Optimizer::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&gradient_clipping_by_norm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_detection_checkpoint_) -
        reinterpret_cast<char*>(&gradient_clipping_by_norm_)) + sizeof(from_detection_checkpoint_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&load_all_detection_checkpoint_vars_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&summarize_gradients_) -
        reinterpret_cast<char*>(&load_all_detection_checkpoint_vars_)) + sizeof(summarize_gradients_));
    max_number_of_boxes_ = 100;
    batch_size_ = 32u;
  }
  if (cached_has_bits & 16711680u) {
    keep_checkpoint_every_n_hours_ = 10000;
    startup_delay_steps_ = 15;
    replicas_to_aggregate_ = 1;
    batch_queue_capacity_ = 150;
    num_batch_queue_threads_ = 8;
    prefetch_queue_capacity_ = 5;
    add_regularization_loss_ = true;
    unpad_groundtruth_tensors_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrainConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.TrainConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 batch_size = 1 [default = 32];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_augmentation_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_replicas = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sync_replicas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_keep_checkpoint_every_n_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &keep_checkpoint_every_n_hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.Optimizer optimizer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gradient_clipping_by_norm = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_gradient_clipping_by_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gradient_clipping_by_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fine_tune_checkpoint = 7 [default = ""];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fine_tune_checkpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fine_tune_checkpoint().data(), static_cast<int>(this->fine_tune_checkpoint().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.TrainConfig.fine_tune_checkpoint");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_from_detection_checkpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_detection_checkpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_steps = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_num_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float startup_delay_steps = 10 [default = 15];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_startup_delay_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startup_delay_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias_grad_multiplier = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_bias_grad_multiplier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_grad_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string freeze_variables = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_freeze_variables()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->freeze_variables(this->freeze_variables_size() - 1).data(),
            static_cast<int>(this->freeze_variables(this->freeze_variables_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.TrainConfig.freeze_variables");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replicas_to_aggregate = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_replicas_to_aggregate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicas_to_aggregate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_batch_queue_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_queue_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_num_batch_queue_threads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_batch_queue_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_prefetch_queue_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prefetch_queue_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool merge_multiple_label_boxes = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_merge_multiple_label_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &merge_multiple_label_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool add_regularization_loss = 18 [default = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_add_regularization_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_regularization_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_load_all_detection_checkpoint_vars();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_all_detection_checkpoint_vars_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_max_number_of_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_number_of_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unpad_groundtruth_tensors = 21 [default = true];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_unpad_groundtruth_tensors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unpad_groundtruth_tensors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fine_tune_checkpoint_type = 22 [default = ""];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fine_tune_checkpoint_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fine_tune_checkpoint_type().data(), static_cast<int>(this->fine_tune_checkpoint_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.TrainConfig.fine_tune_checkpoint_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool retain_original_images = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_retain_original_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retain_original_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_multiclass_scores = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_use_multiclass_scores();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_multiclass_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string update_trainable_variables = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_update_trainable_variables()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->update_trainable_variables(this->update_trainable_variables_size() - 1).data(),
            static_cast<int>(this->update_trainable_variables(this->update_trainable_variables_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.TrainConfig.update_trainable_variables");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_bfloat16 = 26 [default = false];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_use_bfloat16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_bfloat16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool summarize_gradients = 27 [default = false];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_summarize_gradients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &summarize_gradients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.TrainConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.TrainConfig)
  return false;
#undef DO_
}

void TrainConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.TrainConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1 [default = 32];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->batch_size(), output);
  }

  // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_augmentation_options_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_augmentation_options(static_cast<int>(i)), output);
  }

  // optional bool sync_replicas = 3 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sync_replicas(), output);
  }

  // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->keep_checkpoint_every_n_hours(), output);
  }

  // optional .object_detection.protos.Optimizer optimizer = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->optimizer_, output);
  }

  // optional float gradient_clipping_by_norm = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gradient_clipping_by_norm(), output);
  }

  // optional string fine_tune_checkpoint = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fine_tune_checkpoint().data(), static_cast<int>(this->fine_tune_checkpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.fine_tune_checkpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->fine_tune_checkpoint(), output);
  }

  // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->from_detection_checkpoint(), output);
  }

  // optional uint32 num_steps = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_steps(), output);
  }

  // optional float startup_delay_steps = 10 [default = 15];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->startup_delay_steps(), output);
  }

  // optional float bias_grad_multiplier = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->bias_grad_multiplier(), output);
  }

  // repeated string freeze_variables = 12;
  for (int i = 0, n = this->freeze_variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeze_variables(i).data(), static_cast<int>(this->freeze_variables(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.freeze_variables");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->freeze_variables(i), output);
  }

  // optional int32 replicas_to_aggregate = 13 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->replicas_to_aggregate(), output);
  }

  // optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->batch_queue_capacity(), output);
  }

  // optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->num_batch_queue_threads(), output);
  }

  // optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->prefetch_queue_capacity(), output);
  }

  // optional bool merge_multiple_label_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->merge_multiple_label_boxes(), output);
  }

  // optional bool add_regularization_loss = 18 [default = true];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->add_regularization_loss(), output);
  }

  // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->load_all_detection_checkpoint_vars(), output);
  }

  // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_number_of_boxes(), output);
  }

  // optional bool unpad_groundtruth_tensors = 21 [default = true];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->unpad_groundtruth_tensors(), output);
  }

  // optional string fine_tune_checkpoint_type = 22 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fine_tune_checkpoint_type().data(), static_cast<int>(this->fine_tune_checkpoint_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.fine_tune_checkpoint_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->fine_tune_checkpoint_type(), output);
  }

  // optional bool retain_original_images = 23 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->retain_original_images(), output);
  }

  // optional bool use_multiclass_scores = 24 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->use_multiclass_scores(), output);
  }

  // repeated string update_trainable_variables = 25;
  for (int i = 0, n = this->update_trainable_variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_trainable_variables(i).data(), static_cast<int>(this->update_trainable_variables(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.update_trainable_variables");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->update_trainable_variables(i), output);
  }

  // optional bool use_bfloat16 = 26 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->use_bfloat16(), output);
  }

  // optional bool summarize_gradients = 27 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->summarize_gradients(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.TrainConfig)
}

::google::protobuf::uint8* TrainConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.TrainConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 batch_size = 1 [default = 32];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->batch_size(), target);
  }

  // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_augmentation_options_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data_augmentation_options(static_cast<int>(i)), deterministic, target);
  }

  // optional bool sync_replicas = 3 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sync_replicas(), target);
  }

  // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->keep_checkpoint_every_n_hours(), target);
  }

  // optional .object_detection.protos.Optimizer optimizer = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->optimizer_, deterministic, target);
  }

  // optional float gradient_clipping_by_norm = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gradient_clipping_by_norm(), target);
  }

  // optional string fine_tune_checkpoint = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fine_tune_checkpoint().data(), static_cast<int>(this->fine_tune_checkpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.fine_tune_checkpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fine_tune_checkpoint(), target);
  }

  // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->from_detection_checkpoint(), target);
  }

  // optional uint32 num_steps = 9 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_steps(), target);
  }

  // optional float startup_delay_steps = 10 [default = 15];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->startup_delay_steps(), target);
  }

  // optional float bias_grad_multiplier = 11 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->bias_grad_multiplier(), target);
  }

  // repeated string freeze_variables = 12;
  for (int i = 0, n = this->freeze_variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->freeze_variables(i).data(), static_cast<int>(this->freeze_variables(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.freeze_variables");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->freeze_variables(i), target);
  }

  // optional int32 replicas_to_aggregate = 13 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->replicas_to_aggregate(), target);
  }

  // optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->batch_queue_capacity(), target);
  }

  // optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->num_batch_queue_threads(), target);
  }

  // optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->prefetch_queue_capacity(), target);
  }

  // optional bool merge_multiple_label_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->merge_multiple_label_boxes(), target);
  }

  // optional bool add_regularization_loss = 18 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->add_regularization_loss(), target);
  }

  // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->load_all_detection_checkpoint_vars(), target);
  }

  // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->max_number_of_boxes(), target);
  }

  // optional bool unpad_groundtruth_tensors = 21 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->unpad_groundtruth_tensors(), target);
  }

  // optional string fine_tune_checkpoint_type = 22 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fine_tune_checkpoint_type().data(), static_cast<int>(this->fine_tune_checkpoint_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.fine_tune_checkpoint_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->fine_tune_checkpoint_type(), target);
  }

  // optional bool retain_original_images = 23 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->retain_original_images(), target);
  }

  // optional bool use_multiclass_scores = 24 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->use_multiclass_scores(), target);
  }

  // repeated string update_trainable_variables = 25;
  for (int i = 0, n = this->update_trainable_variables_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->update_trainable_variables(i).data(), static_cast<int>(this->update_trainable_variables(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.TrainConfig.update_trainable_variables");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->update_trainable_variables(i), target);
  }

  // optional bool use_bfloat16 = 26 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->use_bfloat16(), target);
  }

  // optional bool summarize_gradients = 27 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->summarize_gradients(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.TrainConfig)
  return target;
}

size_t TrainConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.TrainConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_augmentation_options_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_augmentation_options(static_cast<int>(i)));
    }
  }

  // repeated string freeze_variables = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->freeze_variables_size());
  for (int i = 0, n = this->freeze_variables_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->freeze_variables(i));
  }

  // repeated string update_trainable_variables = 25;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->update_trainable_variables_size());
  for (int i = 0, n = this->update_trainable_variables_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->update_trainable_variables(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string fine_tune_checkpoint = 7 [default = ""];
    if (has_fine_tune_checkpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fine_tune_checkpoint());
    }

    // optional string fine_tune_checkpoint_type = 22 [default = ""];
    if (has_fine_tune_checkpoint_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fine_tune_checkpoint_type());
    }

    // optional .object_detection.protos.Optimizer optimizer = 5;
    if (has_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->optimizer_);
    }

    // optional float gradient_clipping_by_norm = 6 [default = 0];
    if (has_gradient_clipping_by_norm()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_steps = 9 [default = 0];
    if (has_num_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_steps());
    }

    // optional float bias_grad_multiplier = 11 [default = 0];
    if (has_bias_grad_multiplier()) {
      total_size += 1 + 4;
    }

    // optional bool sync_replicas = 3 [default = false];
    if (has_sync_replicas()) {
      total_size += 1 + 1;
    }

    // optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
    if (has_from_detection_checkpoint()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool load_all_detection_checkpoint_vars = 19 [default = false];
    if (has_load_all_detection_checkpoint_vars()) {
      total_size += 2 + 1;
    }

    // optional bool merge_multiple_label_boxes = 17 [default = false];
    if (has_merge_multiple_label_boxes()) {
      total_size += 2 + 1;
    }

    // optional bool use_multiclass_scores = 24 [default = false];
    if (has_use_multiclass_scores()) {
      total_size += 2 + 1;
    }

    // optional bool retain_original_images = 23 [default = false];
    if (has_retain_original_images()) {
      total_size += 2 + 1;
    }

    // optional bool use_bfloat16 = 26 [default = false];
    if (has_use_bfloat16()) {
      total_size += 2 + 1;
    }

    // optional bool summarize_gradients = 27 [default = false];
    if (has_summarize_gradients()) {
      total_size += 2 + 1;
    }

    // optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
    if (has_max_number_of_boxes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_number_of_boxes());
    }

    // optional uint32 batch_size = 1 [default = 32];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
    if (has_keep_checkpoint_every_n_hours()) {
      total_size += 1 + 4;
    }

    // optional float startup_delay_steps = 10 [default = 15];
    if (has_startup_delay_steps()) {
      total_size += 1 + 4;
    }

    // optional int32 replicas_to_aggregate = 13 [default = 1];
    if (has_replicas_to_aggregate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replicas_to_aggregate());
    }

    // optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
    if (has_batch_queue_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_queue_capacity());
    }

    // optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
    if (has_num_batch_queue_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_batch_queue_threads());
    }

    // optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
    if (has_prefetch_queue_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prefetch_queue_capacity());
    }

    // optional bool add_regularization_loss = 18 [default = true];
    if (has_add_regularization_loss()) {
      total_size += 2 + 1;
    }

    // optional bool unpad_groundtruth_tensors = 21 [default = true];
    if (has_unpad_groundtruth_tensors()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrainConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.TrainConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.TrainConfig)
    MergeFrom(*source);
  }
}

void TrainConfig::MergeFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.TrainConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_augmentation_options_.MergeFrom(from.data_augmentation_options_);
  freeze_variables_.MergeFrom(from.freeze_variables_);
  update_trainable_variables_.MergeFrom(from.update_trainable_variables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fine_tune_checkpoint();
      fine_tune_checkpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fine_tune_checkpoint_type();
      fine_tune_checkpoint_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fine_tune_checkpoint_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_optimizer()->::object_detection::protos::Optimizer::MergeFrom(from.optimizer());
    }
    if (cached_has_bits & 0x00000008u) {
      gradient_clipping_by_norm_ = from.gradient_clipping_by_norm_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_steps_ = from.num_steps_;
    }
    if (cached_has_bits & 0x00000020u) {
      bias_grad_multiplier_ = from.bias_grad_multiplier_;
    }
    if (cached_has_bits & 0x00000040u) {
      sync_replicas_ = from.sync_replicas_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_detection_checkpoint_ = from.from_detection_checkpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      load_all_detection_checkpoint_vars_ = from.load_all_detection_checkpoint_vars_;
    }
    if (cached_has_bits & 0x00000200u) {
      merge_multiple_label_boxes_ = from.merge_multiple_label_boxes_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_multiclass_scores_ = from.use_multiclass_scores_;
    }
    if (cached_has_bits & 0x00000800u) {
      retain_original_images_ = from.retain_original_images_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_bfloat16_ = from.use_bfloat16_;
    }
    if (cached_has_bits & 0x00002000u) {
      summarize_gradients_ = from.summarize_gradients_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_number_of_boxes_ = from.max_number_of_boxes_;
    }
    if (cached_has_bits & 0x00008000u) {
      batch_size_ = from.batch_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      keep_checkpoint_every_n_hours_ = from.keep_checkpoint_every_n_hours_;
    }
    if (cached_has_bits & 0x00020000u) {
      startup_delay_steps_ = from.startup_delay_steps_;
    }
    if (cached_has_bits & 0x00040000u) {
      replicas_to_aggregate_ = from.replicas_to_aggregate_;
    }
    if (cached_has_bits & 0x00080000u) {
      batch_queue_capacity_ = from.batch_queue_capacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      num_batch_queue_threads_ = from.num_batch_queue_threads_;
    }
    if (cached_has_bits & 0x00200000u) {
      prefetch_queue_capacity_ = from.prefetch_queue_capacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      add_regularization_loss_ = from.add_regularization_loss_;
    }
    if (cached_has_bits & 0x00800000u) {
      unpad_groundtruth_tensors_ = from.unpad_groundtruth_tensors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrainConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainConfig::CopyFrom(const TrainConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.TrainConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainConfig::IsInitialized() const {
  return true;
}

void TrainConfig::Swap(TrainConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainConfig::InternalSwap(TrainConfig* other) {
  using std::swap;
  data_augmentation_options_.InternalSwap(&other->data_augmentation_options_);
  freeze_variables_.InternalSwap(&other->freeze_variables_);
  update_trainable_variables_.InternalSwap(&other->update_trainable_variables_);
  fine_tune_checkpoint_.Swap(&other->fine_tune_checkpoint_);
  fine_tune_checkpoint_type_.Swap(&other->fine_tune_checkpoint_type_);
  swap(optimizer_, other->optimizer_);
  swap(gradient_clipping_by_norm_, other->gradient_clipping_by_norm_);
  swap(num_steps_, other->num_steps_);
  swap(bias_grad_multiplier_, other->bias_grad_multiplier_);
  swap(sync_replicas_, other->sync_replicas_);
  swap(from_detection_checkpoint_, other->from_detection_checkpoint_);
  swap(load_all_detection_checkpoint_vars_, other->load_all_detection_checkpoint_vars_);
  swap(merge_multiple_label_boxes_, other->merge_multiple_label_boxes_);
  swap(use_multiclass_scores_, other->use_multiclass_scores_);
  swap(retain_original_images_, other->retain_original_images_);
  swap(use_bfloat16_, other->use_bfloat16_);
  swap(summarize_gradients_, other->summarize_gradients_);
  swap(max_number_of_boxes_, other->max_number_of_boxes_);
  swap(batch_size_, other->batch_size_);
  swap(keep_checkpoint_every_n_hours_, other->keep_checkpoint_every_n_hours_);
  swap(startup_delay_steps_, other->startup_delay_steps_);
  swap(replicas_to_aggregate_, other->replicas_to_aggregate_);
  swap(batch_queue_capacity_, other->batch_queue_capacity_);
  swap(num_batch_queue_threads_, other->num_batch_queue_threads_);
  swap(prefetch_queue_capacity_, other->prefetch_queue_capacity_);
  swap(add_regularization_loss_, other->add_regularization_loss_);
  swap(unpad_groundtruth_tensors_, other->unpad_groundtruth_tensors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrainConfig::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2ftrain_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2ftrain_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainConfig

// optional uint32 batch_size = 1 [default = 32];
bool TrainConfig::has_batch_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TrainConfig::set_has_batch_size() {
  _has_bits_[0] |= 0x00008000u;
}
void TrainConfig::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00008000u;
}
void TrainConfig::clear_batch_size() {
  batch_size_ = 32u;
  clear_has_batch_size();
}
::google::protobuf::uint32 TrainConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.batch_size)
  return batch_size_;
}
void TrainConfig::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.batch_size)
}

// repeated .object_detection.protos.PreprocessingStep data_augmentation_options = 2;
int TrainConfig::data_augmentation_options_size() const {
  return data_augmentation_options_.size();
}
void TrainConfig::clear_data_augmentation_options() {
  data_augmentation_options_.Clear();
}
const ::object_detection::protos::PreprocessingStep& TrainConfig::data_augmentation_options(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.data_augmentation_options)
  return data_augmentation_options_.Get(index);
}
::object_detection::protos::PreprocessingStep* TrainConfig::mutable_data_augmentation_options(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.data_augmentation_options)
  return data_augmentation_options_.Mutable(index);
}
::object_detection::protos::PreprocessingStep* TrainConfig::add_data_augmentation_options() {
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.data_augmentation_options)
  return data_augmentation_options_.Add();
}
::google::protobuf::RepeatedPtrField< ::object_detection::protos::PreprocessingStep >*
TrainConfig::mutable_data_augmentation_options() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TrainConfig.data_augmentation_options)
  return &data_augmentation_options_;
}
const ::google::protobuf::RepeatedPtrField< ::object_detection::protos::PreprocessingStep >&
TrainConfig::data_augmentation_options() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TrainConfig.data_augmentation_options)
  return data_augmentation_options_;
}

// optional bool sync_replicas = 3 [default = false];
bool TrainConfig::has_sync_replicas() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrainConfig::set_has_sync_replicas() {
  _has_bits_[0] |= 0x00000040u;
}
void TrainConfig::clear_has_sync_replicas() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrainConfig::clear_sync_replicas() {
  sync_replicas_ = false;
  clear_has_sync_replicas();
}
bool TrainConfig::sync_replicas() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.sync_replicas)
  return sync_replicas_;
}
void TrainConfig::set_sync_replicas(bool value) {
  set_has_sync_replicas();
  sync_replicas_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.sync_replicas)
}

// optional float keep_checkpoint_every_n_hours = 4 [default = 10000];
bool TrainConfig::has_keep_checkpoint_every_n_hours() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TrainConfig::set_has_keep_checkpoint_every_n_hours() {
  _has_bits_[0] |= 0x00010000u;
}
void TrainConfig::clear_has_keep_checkpoint_every_n_hours() {
  _has_bits_[0] &= ~0x00010000u;
}
void TrainConfig::clear_keep_checkpoint_every_n_hours() {
  keep_checkpoint_every_n_hours_ = 10000;
  clear_has_keep_checkpoint_every_n_hours();
}
float TrainConfig::keep_checkpoint_every_n_hours() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.keep_checkpoint_every_n_hours)
  return keep_checkpoint_every_n_hours_;
}
void TrainConfig::set_keep_checkpoint_every_n_hours(float value) {
  set_has_keep_checkpoint_every_n_hours();
  keep_checkpoint_every_n_hours_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.keep_checkpoint_every_n_hours)
}

// optional .object_detection.protos.Optimizer optimizer = 5;
bool TrainConfig::has_optimizer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrainConfig::set_has_optimizer() {
  _has_bits_[0] |= 0x00000004u;
}
void TrainConfig::clear_has_optimizer() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrainConfig::clear_optimizer() {
  if (optimizer_ != NULL) optimizer_->::object_detection::protos::Optimizer::Clear();
  clear_has_optimizer();
}
const ::object_detection::protos::Optimizer& TrainConfig::optimizer() const {
  const ::object_detection::protos::Optimizer* p = optimizer_;
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.optimizer)
  return p != NULL ? *p : *reinterpret_cast<const ::object_detection::protos::Optimizer*>(
      &::object_detection::protos::_Optimizer_default_instance_);
}
::object_detection::protos::Optimizer* TrainConfig::mutable_optimizer() {
  set_has_optimizer();
  if (optimizer_ == NULL) {
    optimizer_ = new ::object_detection::protos::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.optimizer)
  return optimizer_;
}
::object_detection::protos::Optimizer* TrainConfig::release_optimizer() {
  // @@protoc_insertion_point(field_release:object_detection.protos.TrainConfig.optimizer)
  clear_has_optimizer();
  ::object_detection::protos::Optimizer* temp = optimizer_;
  optimizer_ = NULL;
  return temp;
}
void TrainConfig::set_allocated_optimizer(::object_detection::protos::Optimizer* optimizer) {
  delete optimizer_;
  optimizer_ = optimizer;
  if (optimizer) {
    set_has_optimizer();
  } else {
    clear_has_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.TrainConfig.optimizer)
}

// optional float gradient_clipping_by_norm = 6 [default = 0];
bool TrainConfig::has_gradient_clipping_by_norm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrainConfig::set_has_gradient_clipping_by_norm() {
  _has_bits_[0] |= 0x00000008u;
}
void TrainConfig::clear_has_gradient_clipping_by_norm() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrainConfig::clear_gradient_clipping_by_norm() {
  gradient_clipping_by_norm_ = 0;
  clear_has_gradient_clipping_by_norm();
}
float TrainConfig::gradient_clipping_by_norm() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.gradient_clipping_by_norm)
  return gradient_clipping_by_norm_;
}
void TrainConfig::set_gradient_clipping_by_norm(float value) {
  set_has_gradient_clipping_by_norm();
  gradient_clipping_by_norm_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.gradient_clipping_by_norm)
}

// optional string fine_tune_checkpoint = 7 [default = ""];
bool TrainConfig::has_fine_tune_checkpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrainConfig::set_has_fine_tune_checkpoint() {
  _has_bits_[0] |= 0x00000001u;
}
void TrainConfig::clear_has_fine_tune_checkpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrainConfig::clear_fine_tune_checkpoint() {
  fine_tune_checkpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fine_tune_checkpoint();
}
const ::std::string& TrainConfig::fine_tune_checkpoint() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.fine_tune_checkpoint)
  return fine_tune_checkpoint_.GetNoArena();
}
void TrainConfig::set_fine_tune_checkpoint(const ::std::string& value) {
  set_has_fine_tune_checkpoint();
  fine_tune_checkpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}
#if LANG_CXX11
void TrainConfig::set_fine_tune_checkpoint(::std::string&& value) {
  set_has_fine_tune_checkpoint();
  fine_tune_checkpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}
#endif
void TrainConfig::set_fine_tune_checkpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fine_tune_checkpoint();
  fine_tune_checkpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}
void TrainConfig::set_fine_tune_checkpoint(const char* value, size_t size) {
  set_has_fine_tune_checkpoint();
  fine_tune_checkpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}
::std::string* TrainConfig::mutable_fine_tune_checkpoint() {
  set_has_fine_tune_checkpoint();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.fine_tune_checkpoint)
  return fine_tune_checkpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainConfig::release_fine_tune_checkpoint() {
  // @@protoc_insertion_point(field_release:object_detection.protos.TrainConfig.fine_tune_checkpoint)
  clear_has_fine_tune_checkpoint();
  return fine_tune_checkpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainConfig::set_allocated_fine_tune_checkpoint(::std::string* fine_tune_checkpoint) {
  if (fine_tune_checkpoint != NULL) {
    set_has_fine_tune_checkpoint();
  } else {
    clear_has_fine_tune_checkpoint();
  }
  fine_tune_checkpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fine_tune_checkpoint);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.TrainConfig.fine_tune_checkpoint)
}

// optional string fine_tune_checkpoint_type = 22 [default = ""];
bool TrainConfig::has_fine_tune_checkpoint_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrainConfig::set_has_fine_tune_checkpoint_type() {
  _has_bits_[0] |= 0x00000002u;
}
void TrainConfig::clear_has_fine_tune_checkpoint_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrainConfig::clear_fine_tune_checkpoint_type() {
  fine_tune_checkpoint_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fine_tune_checkpoint_type();
}
const ::std::string& TrainConfig::fine_tune_checkpoint_type() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
  return fine_tune_checkpoint_type_.GetNoArena();
}
void TrainConfig::set_fine_tune_checkpoint_type(const ::std::string& value) {
  set_has_fine_tune_checkpoint_type();
  fine_tune_checkpoint_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}
#if LANG_CXX11
void TrainConfig::set_fine_tune_checkpoint_type(::std::string&& value) {
  set_has_fine_tune_checkpoint_type();
  fine_tune_checkpoint_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}
#endif
void TrainConfig::set_fine_tune_checkpoint_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fine_tune_checkpoint_type();
  fine_tune_checkpoint_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}
void TrainConfig::set_fine_tune_checkpoint_type(const char* value, size_t size) {
  set_has_fine_tune_checkpoint_type();
  fine_tune_checkpoint_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}
::std::string* TrainConfig::mutable_fine_tune_checkpoint_type() {
  set_has_fine_tune_checkpoint_type();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
  return fine_tune_checkpoint_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainConfig::release_fine_tune_checkpoint_type() {
  // @@protoc_insertion_point(field_release:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
  clear_has_fine_tune_checkpoint_type();
  return fine_tune_checkpoint_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainConfig::set_allocated_fine_tune_checkpoint_type(::std::string* fine_tune_checkpoint_type) {
  if (fine_tune_checkpoint_type != NULL) {
    set_has_fine_tune_checkpoint_type();
  } else {
    clear_has_fine_tune_checkpoint_type();
  }
  fine_tune_checkpoint_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fine_tune_checkpoint_type);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.TrainConfig.fine_tune_checkpoint_type)
}

// optional bool from_detection_checkpoint = 8 [default = false, deprecated = true];
bool TrainConfig::has_from_detection_checkpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrainConfig::set_has_from_detection_checkpoint() {
  _has_bits_[0] |= 0x00000080u;
}
void TrainConfig::clear_has_from_detection_checkpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrainConfig::clear_from_detection_checkpoint() {
  from_detection_checkpoint_ = false;
  clear_has_from_detection_checkpoint();
}
bool TrainConfig::from_detection_checkpoint() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.from_detection_checkpoint)
  return from_detection_checkpoint_;
}
void TrainConfig::set_from_detection_checkpoint(bool value) {
  set_has_from_detection_checkpoint();
  from_detection_checkpoint_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.from_detection_checkpoint)
}

// optional bool load_all_detection_checkpoint_vars = 19 [default = false];
bool TrainConfig::has_load_all_detection_checkpoint_vars() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrainConfig::set_has_load_all_detection_checkpoint_vars() {
  _has_bits_[0] |= 0x00000100u;
}
void TrainConfig::clear_has_load_all_detection_checkpoint_vars() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrainConfig::clear_load_all_detection_checkpoint_vars() {
  load_all_detection_checkpoint_vars_ = false;
  clear_has_load_all_detection_checkpoint_vars();
}
bool TrainConfig::load_all_detection_checkpoint_vars() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.load_all_detection_checkpoint_vars)
  return load_all_detection_checkpoint_vars_;
}
void TrainConfig::set_load_all_detection_checkpoint_vars(bool value) {
  set_has_load_all_detection_checkpoint_vars();
  load_all_detection_checkpoint_vars_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.load_all_detection_checkpoint_vars)
}

// optional uint32 num_steps = 9 [default = 0];
bool TrainConfig::has_num_steps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrainConfig::set_has_num_steps() {
  _has_bits_[0] |= 0x00000010u;
}
void TrainConfig::clear_has_num_steps() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrainConfig::clear_num_steps() {
  num_steps_ = 0u;
  clear_has_num_steps();
}
::google::protobuf::uint32 TrainConfig::num_steps() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.num_steps)
  return num_steps_;
}
void TrainConfig::set_num_steps(::google::protobuf::uint32 value) {
  set_has_num_steps();
  num_steps_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.num_steps)
}

// optional float startup_delay_steps = 10 [default = 15];
bool TrainConfig::has_startup_delay_steps() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TrainConfig::set_has_startup_delay_steps() {
  _has_bits_[0] |= 0x00020000u;
}
void TrainConfig::clear_has_startup_delay_steps() {
  _has_bits_[0] &= ~0x00020000u;
}
void TrainConfig::clear_startup_delay_steps() {
  startup_delay_steps_ = 15;
  clear_has_startup_delay_steps();
}
float TrainConfig::startup_delay_steps() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.startup_delay_steps)
  return startup_delay_steps_;
}
void TrainConfig::set_startup_delay_steps(float value) {
  set_has_startup_delay_steps();
  startup_delay_steps_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.startup_delay_steps)
}

// optional float bias_grad_multiplier = 11 [default = 0];
bool TrainConfig::has_bias_grad_multiplier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrainConfig::set_has_bias_grad_multiplier() {
  _has_bits_[0] |= 0x00000020u;
}
void TrainConfig::clear_has_bias_grad_multiplier() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrainConfig::clear_bias_grad_multiplier() {
  bias_grad_multiplier_ = 0;
  clear_has_bias_grad_multiplier();
}
float TrainConfig::bias_grad_multiplier() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.bias_grad_multiplier)
  return bias_grad_multiplier_;
}
void TrainConfig::set_bias_grad_multiplier(float value) {
  set_has_bias_grad_multiplier();
  bias_grad_multiplier_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.bias_grad_multiplier)
}

// repeated string update_trainable_variables = 25;
int TrainConfig::update_trainable_variables_size() const {
  return update_trainable_variables_.size();
}
void TrainConfig::clear_update_trainable_variables() {
  update_trainable_variables_.Clear();
}
const ::std::string& TrainConfig::update_trainable_variables(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.update_trainable_variables)
  return update_trainable_variables_.Get(index);
}
::std::string* TrainConfig::mutable_update_trainable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.update_trainable_variables)
  return update_trainable_variables_.Mutable(index);
}
void TrainConfig::set_update_trainable_variables(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.update_trainable_variables)
  update_trainable_variables_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TrainConfig::set_update_trainable_variables(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.update_trainable_variables)
  update_trainable_variables_.Mutable(index)->assign(std::move(value));
}
#endif
void TrainConfig::set_update_trainable_variables(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  update_trainable_variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TrainConfig.update_trainable_variables)
}
void TrainConfig::set_update_trainable_variables(int index, const char* value, size_t size) {
  update_trainable_variables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TrainConfig.update_trainable_variables)
}
::std::string* TrainConfig::add_update_trainable_variables() {
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.TrainConfig.update_trainable_variables)
  return update_trainable_variables_.Add();
}
void TrainConfig::add_update_trainable_variables(const ::std::string& value) {
  update_trainable_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.update_trainable_variables)
}
#if LANG_CXX11
void TrainConfig::add_update_trainable_variables(::std::string&& value) {
  update_trainable_variables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.update_trainable_variables)
}
#endif
void TrainConfig::add_update_trainable_variables(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  update_trainable_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.TrainConfig.update_trainable_variables)
}
void TrainConfig::add_update_trainable_variables(const char* value, size_t size) {
  update_trainable_variables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.TrainConfig.update_trainable_variables)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainConfig::update_trainable_variables() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TrainConfig.update_trainable_variables)
  return update_trainable_variables_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrainConfig::mutable_update_trainable_variables() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TrainConfig.update_trainable_variables)
  return &update_trainable_variables_;
}

// repeated string freeze_variables = 12;
int TrainConfig::freeze_variables_size() const {
  return freeze_variables_.size();
}
void TrainConfig::clear_freeze_variables() {
  freeze_variables_.Clear();
}
const ::std::string& TrainConfig::freeze_variables(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.freeze_variables)
  return freeze_variables_.Get(index);
}
::std::string* TrainConfig::mutable_freeze_variables(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.TrainConfig.freeze_variables)
  return freeze_variables_.Mutable(index);
}
void TrainConfig::set_freeze_variables(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.freeze_variables)
  freeze_variables_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TrainConfig::set_freeze_variables(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.freeze_variables)
  freeze_variables_.Mutable(index)->assign(std::move(value));
}
#endif
void TrainConfig::set_freeze_variables(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  freeze_variables_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.TrainConfig.freeze_variables)
}
void TrainConfig::set_freeze_variables(int index, const char* value, size_t size) {
  freeze_variables_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.TrainConfig.freeze_variables)
}
::std::string* TrainConfig::add_freeze_variables() {
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.TrainConfig.freeze_variables)
  return freeze_variables_.Add();
}
void TrainConfig::add_freeze_variables(const ::std::string& value) {
  freeze_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.freeze_variables)
}
#if LANG_CXX11
void TrainConfig::add_freeze_variables(::std::string&& value) {
  freeze_variables_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.TrainConfig.freeze_variables)
}
#endif
void TrainConfig::add_freeze_variables(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  freeze_variables_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.TrainConfig.freeze_variables)
}
void TrainConfig::add_freeze_variables(const char* value, size_t size) {
  freeze_variables_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.TrainConfig.freeze_variables)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrainConfig::freeze_variables() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.TrainConfig.freeze_variables)
  return freeze_variables_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TrainConfig::mutable_freeze_variables() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.TrainConfig.freeze_variables)
  return &freeze_variables_;
}

// optional int32 replicas_to_aggregate = 13 [default = 1];
bool TrainConfig::has_replicas_to_aggregate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TrainConfig::set_has_replicas_to_aggregate() {
  _has_bits_[0] |= 0x00040000u;
}
void TrainConfig::clear_has_replicas_to_aggregate() {
  _has_bits_[0] &= ~0x00040000u;
}
void TrainConfig::clear_replicas_to_aggregate() {
  replicas_to_aggregate_ = 1;
  clear_has_replicas_to_aggregate();
}
::google::protobuf::int32 TrainConfig::replicas_to_aggregate() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.replicas_to_aggregate)
  return replicas_to_aggregate_;
}
void TrainConfig::set_replicas_to_aggregate(::google::protobuf::int32 value) {
  set_has_replicas_to_aggregate();
  replicas_to_aggregate_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.replicas_to_aggregate)
}

// optional int32 batch_queue_capacity = 14 [default = 150, deprecated = true];
bool TrainConfig::has_batch_queue_capacity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TrainConfig::set_has_batch_queue_capacity() {
  _has_bits_[0] |= 0x00080000u;
}
void TrainConfig::clear_has_batch_queue_capacity() {
  _has_bits_[0] &= ~0x00080000u;
}
void TrainConfig::clear_batch_queue_capacity() {
  batch_queue_capacity_ = 150;
  clear_has_batch_queue_capacity();
}
::google::protobuf::int32 TrainConfig::batch_queue_capacity() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.batch_queue_capacity)
  return batch_queue_capacity_;
}
void TrainConfig::set_batch_queue_capacity(::google::protobuf::int32 value) {
  set_has_batch_queue_capacity();
  batch_queue_capacity_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.batch_queue_capacity)
}

// optional int32 num_batch_queue_threads = 15 [default = 8, deprecated = true];
bool TrainConfig::has_num_batch_queue_threads() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TrainConfig::set_has_num_batch_queue_threads() {
  _has_bits_[0] |= 0x00100000u;
}
void TrainConfig::clear_has_num_batch_queue_threads() {
  _has_bits_[0] &= ~0x00100000u;
}
void TrainConfig::clear_num_batch_queue_threads() {
  num_batch_queue_threads_ = 8;
  clear_has_num_batch_queue_threads();
}
::google::protobuf::int32 TrainConfig::num_batch_queue_threads() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.num_batch_queue_threads)
  return num_batch_queue_threads_;
}
void TrainConfig::set_num_batch_queue_threads(::google::protobuf::int32 value) {
  set_has_num_batch_queue_threads();
  num_batch_queue_threads_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.num_batch_queue_threads)
}

// optional int32 prefetch_queue_capacity = 16 [default = 5, deprecated = true];
bool TrainConfig::has_prefetch_queue_capacity() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TrainConfig::set_has_prefetch_queue_capacity() {
  _has_bits_[0] |= 0x00200000u;
}
void TrainConfig::clear_has_prefetch_queue_capacity() {
  _has_bits_[0] &= ~0x00200000u;
}
void TrainConfig::clear_prefetch_queue_capacity() {
  prefetch_queue_capacity_ = 5;
  clear_has_prefetch_queue_capacity();
}
::google::protobuf::int32 TrainConfig::prefetch_queue_capacity() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.prefetch_queue_capacity)
  return prefetch_queue_capacity_;
}
void TrainConfig::set_prefetch_queue_capacity(::google::protobuf::int32 value) {
  set_has_prefetch_queue_capacity();
  prefetch_queue_capacity_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.prefetch_queue_capacity)
}

// optional bool merge_multiple_label_boxes = 17 [default = false];
bool TrainConfig::has_merge_multiple_label_boxes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrainConfig::set_has_merge_multiple_label_boxes() {
  _has_bits_[0] |= 0x00000200u;
}
void TrainConfig::clear_has_merge_multiple_label_boxes() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrainConfig::clear_merge_multiple_label_boxes() {
  merge_multiple_label_boxes_ = false;
  clear_has_merge_multiple_label_boxes();
}
bool TrainConfig::merge_multiple_label_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.merge_multiple_label_boxes)
  return merge_multiple_label_boxes_;
}
void TrainConfig::set_merge_multiple_label_boxes(bool value) {
  set_has_merge_multiple_label_boxes();
  merge_multiple_label_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.merge_multiple_label_boxes)
}

// optional bool use_multiclass_scores = 24 [default = false];
bool TrainConfig::has_use_multiclass_scores() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrainConfig::set_has_use_multiclass_scores() {
  _has_bits_[0] |= 0x00000400u;
}
void TrainConfig::clear_has_use_multiclass_scores() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrainConfig::clear_use_multiclass_scores() {
  use_multiclass_scores_ = false;
  clear_has_use_multiclass_scores();
}
bool TrainConfig::use_multiclass_scores() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.use_multiclass_scores)
  return use_multiclass_scores_;
}
void TrainConfig::set_use_multiclass_scores(bool value) {
  set_has_use_multiclass_scores();
  use_multiclass_scores_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.use_multiclass_scores)
}

// optional bool add_regularization_loss = 18 [default = true];
bool TrainConfig::has_add_regularization_loss() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TrainConfig::set_has_add_regularization_loss() {
  _has_bits_[0] |= 0x00400000u;
}
void TrainConfig::clear_has_add_regularization_loss() {
  _has_bits_[0] &= ~0x00400000u;
}
void TrainConfig::clear_add_regularization_loss() {
  add_regularization_loss_ = true;
  clear_has_add_regularization_loss();
}
bool TrainConfig::add_regularization_loss() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.add_regularization_loss)
  return add_regularization_loss_;
}
void TrainConfig::set_add_regularization_loss(bool value) {
  set_has_add_regularization_loss();
  add_regularization_loss_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.add_regularization_loss)
}

// optional int32 max_number_of_boxes = 20 [default = 100, deprecated = true];
bool TrainConfig::has_max_number_of_boxes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TrainConfig::set_has_max_number_of_boxes() {
  _has_bits_[0] |= 0x00004000u;
}
void TrainConfig::clear_has_max_number_of_boxes() {
  _has_bits_[0] &= ~0x00004000u;
}
void TrainConfig::clear_max_number_of_boxes() {
  max_number_of_boxes_ = 100;
  clear_has_max_number_of_boxes();
}
::google::protobuf::int32 TrainConfig::max_number_of_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.max_number_of_boxes)
  return max_number_of_boxes_;
}
void TrainConfig::set_max_number_of_boxes(::google::protobuf::int32 value) {
  set_has_max_number_of_boxes();
  max_number_of_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.max_number_of_boxes)
}

// optional bool unpad_groundtruth_tensors = 21 [default = true];
bool TrainConfig::has_unpad_groundtruth_tensors() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TrainConfig::set_has_unpad_groundtruth_tensors() {
  _has_bits_[0] |= 0x00800000u;
}
void TrainConfig::clear_has_unpad_groundtruth_tensors() {
  _has_bits_[0] &= ~0x00800000u;
}
void TrainConfig::clear_unpad_groundtruth_tensors() {
  unpad_groundtruth_tensors_ = true;
  clear_has_unpad_groundtruth_tensors();
}
bool TrainConfig::unpad_groundtruth_tensors() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.unpad_groundtruth_tensors)
  return unpad_groundtruth_tensors_;
}
void TrainConfig::set_unpad_groundtruth_tensors(bool value) {
  set_has_unpad_groundtruth_tensors();
  unpad_groundtruth_tensors_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.unpad_groundtruth_tensors)
}

// optional bool retain_original_images = 23 [default = false];
bool TrainConfig::has_retain_original_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrainConfig::set_has_retain_original_images() {
  _has_bits_[0] |= 0x00000800u;
}
void TrainConfig::clear_has_retain_original_images() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrainConfig::clear_retain_original_images() {
  retain_original_images_ = false;
  clear_has_retain_original_images();
}
bool TrainConfig::retain_original_images() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.retain_original_images)
  return retain_original_images_;
}
void TrainConfig::set_retain_original_images(bool value) {
  set_has_retain_original_images();
  retain_original_images_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.retain_original_images)
}

// optional bool use_bfloat16 = 26 [default = false];
bool TrainConfig::has_use_bfloat16() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TrainConfig::set_has_use_bfloat16() {
  _has_bits_[0] |= 0x00001000u;
}
void TrainConfig::clear_has_use_bfloat16() {
  _has_bits_[0] &= ~0x00001000u;
}
void TrainConfig::clear_use_bfloat16() {
  use_bfloat16_ = false;
  clear_has_use_bfloat16();
}
bool TrainConfig::use_bfloat16() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.use_bfloat16)
  return use_bfloat16_;
}
void TrainConfig::set_use_bfloat16(bool value) {
  set_has_use_bfloat16();
  use_bfloat16_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.use_bfloat16)
}

// optional bool summarize_gradients = 27 [default = false];
bool TrainConfig::has_summarize_gradients() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TrainConfig::set_has_summarize_gradients() {
  _has_bits_[0] |= 0x00002000u;
}
void TrainConfig::clear_has_summarize_gradients() {
  _has_bits_[0] &= ~0x00002000u;
}
void TrainConfig::clear_summarize_gradients() {
  summarize_gradients_ = false;
  clear_has_summarize_gradients();
}
bool TrainConfig::summarize_gradients() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.TrainConfig.summarize_gradients)
  return summarize_gradients_;
}
void TrainConfig::set_summarize_gradients(bool value) {
  set_has_summarize_gradients();
  summarize_gradients_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.TrainConfig.summarize_gradients)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
