// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/matcher.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/matcher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class MatcherDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Matcher>
     _instance;
  const ::object_detection::protos::ArgMaxMatcher* argmax_matcher_;
  const ::object_detection::protos::BipartiteMatcher* bipartite_matcher_;
} _Matcher_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matcher, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matcher, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matcher, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(MatcherDefaultTypeInternal, argmax_matcher_),
  offsetof(MatcherDefaultTypeInternal, bipartite_matcher_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matcher, matcher_oneof_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Matcher)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Matcher_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/matcher.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto::InitDefaults();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbipartite_5fmatcher_2eproto::InitDefaults();
  _Matcher_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Matcher_default_instance_);_Matcher_default_instance_.argmax_matcher_ = const_cast< ::object_detection::protos::ArgMaxMatcher*>(
      ::object_detection::protos::ArgMaxMatcher::internal_default_instance());
  _Matcher_default_instance_.bipartite_matcher_ = const_cast< ::object_detection::protos::BipartiteMatcher*>(
      ::object_detection::protos::BipartiteMatcher::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%object_detection/protos/matcher.proto\022"
      "\027object_detection.protos\032,object_detecti"
      "on/protos/argmax_matcher.proto\032/object_d"
      "etection/protos/bipartite_matcher.proto\""
      "\244\001\n\007Matcher\022@\n\016argmax_matcher\030\001 \001(\0132&.ob"
      "ject_detection.protos.ArgMaxMatcherH\000\022F\n"
      "\021bipartite_matcher\030\002 \001(\0132).object_detect"
      "ion.protos.BipartiteMatcherH\000B\017\n\rmatcher"
      "_oneof"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/matcher.proto", &protobuf_RegisterTypes);
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto::AddDescriptors();
  ::object_detection::protos::protobuf_object_5fdetection_2fprotos_2fbipartite_5fmatcher_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matcher::kArgmaxMatcherFieldNumber;
const int Matcher::kBipartiteMatcherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matcher::Matcher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.Matcher)
}
Matcher::Matcher(const Matcher& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_matcher_oneof();
  switch (from.matcher_oneof_case()) {
    case kArgmaxMatcher: {
      mutable_argmax_matcher()->::object_detection::protos::ArgMaxMatcher::MergeFrom(from.argmax_matcher());
      break;
    }
    case kBipartiteMatcher: {
      mutable_bipartite_matcher()->::object_detection::protos::BipartiteMatcher::MergeFrom(from.bipartite_matcher());
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.Matcher)
}

void Matcher::SharedCtor() {
  _cached_size_ = 0;
  clear_has_matcher_oneof();
}

Matcher::~Matcher() {
  // @@protoc_insertion_point(destructor:object_detection.protos.Matcher)
  SharedDtor();
}

void Matcher::SharedDtor() {
  if (has_matcher_oneof()) {
    clear_matcher_oneof();
  }
}

void Matcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matcher::descriptor() {
  protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Matcher& Matcher::default_instance() {
  protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::InitDefaults();
  return *internal_default_instance();
}

Matcher* Matcher::New(::google::protobuf::Arena* arena) const {
  Matcher* n = new Matcher;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matcher::clear_matcher_oneof() {
// @@protoc_insertion_point(one_of_clear_start:object_detection.protos.Matcher)
  switch (matcher_oneof_case()) {
    case kArgmaxMatcher: {
      delete matcher_oneof_.argmax_matcher_;
      break;
    }
    case kBipartiteMatcher: {
      delete matcher_oneof_.bipartite_matcher_;
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MATCHER_ONEOF_NOT_SET;
}


void Matcher::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.Matcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_matcher_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Matcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.Matcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .object_detection.protos.ArgMaxMatcher argmax_matcher = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_argmax_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .object_detection.protos.BipartiteMatcher bipartite_matcher = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bipartite_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.Matcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.Matcher)
  return false;
#undef DO_
}

void Matcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.Matcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (matcher_oneof_case()) {
    case kArgmaxMatcher:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *matcher_oneof_.argmax_matcher_, output);
      break;
    case kBipartiteMatcher:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *matcher_oneof_.bipartite_matcher_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.Matcher)
}

::google::protobuf::uint8* Matcher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.Matcher)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (matcher_oneof_case()) {
    case kArgmaxMatcher:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *matcher_oneof_.argmax_matcher_, deterministic, target);
      break;
    case kBipartiteMatcher:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *matcher_oneof_.bipartite_matcher_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.Matcher)
  return target;
}

size_t Matcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.Matcher)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (matcher_oneof_case()) {
    // optional .object_detection.protos.ArgMaxMatcher argmax_matcher = 1;
    case kArgmaxMatcher: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *matcher_oneof_.argmax_matcher_);
      break;
    }
    // optional .object_detection.protos.BipartiteMatcher bipartite_matcher = 2;
    case kBipartiteMatcher: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *matcher_oneof_.bipartite_matcher_);
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matcher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.Matcher)
  GOOGLE_DCHECK_NE(&from, this);
  const Matcher* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Matcher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.Matcher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.Matcher)
    MergeFrom(*source);
  }
}

void Matcher::MergeFrom(const Matcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.Matcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.matcher_oneof_case()) {
    case kArgmaxMatcher: {
      mutable_argmax_matcher()->::object_detection::protos::ArgMaxMatcher::MergeFrom(from.argmax_matcher());
      break;
    }
    case kBipartiteMatcher: {
      mutable_bipartite_matcher()->::object_detection::protos::BipartiteMatcher::MergeFrom(from.bipartite_matcher());
      break;
    }
    case MATCHER_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Matcher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.Matcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matcher::CopyFrom(const Matcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.Matcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matcher::IsInitialized() const {
  return true;
}

void Matcher::Swap(Matcher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matcher::InternalSwap(Matcher* other) {
  using std::swap;
  swap(matcher_oneof_, other->matcher_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matcher::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2fmatcher_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Matcher

// optional .object_detection.protos.ArgMaxMatcher argmax_matcher = 1;
bool Matcher::has_argmax_matcher() const {
  return matcher_oneof_case() == kArgmaxMatcher;
}
void Matcher::set_has_argmax_matcher() {
  _oneof_case_[0] = kArgmaxMatcher;
}
void Matcher::clear_argmax_matcher() {
  if (has_argmax_matcher()) {
    delete matcher_oneof_.argmax_matcher_;
    clear_has_matcher_oneof();
  }
}
 const ::object_detection::protos::ArgMaxMatcher& Matcher::argmax_matcher() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Matcher.argmax_matcher)
  return has_argmax_matcher()
      ? *matcher_oneof_.argmax_matcher_
      : ::object_detection::protos::ArgMaxMatcher::default_instance();
}
::object_detection::protos::ArgMaxMatcher* Matcher::mutable_argmax_matcher() {
  if (!has_argmax_matcher()) {
    clear_matcher_oneof();
    set_has_argmax_matcher();
    matcher_oneof_.argmax_matcher_ = new ::object_detection::protos::ArgMaxMatcher;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Matcher.argmax_matcher)
  return matcher_oneof_.argmax_matcher_;
}
::object_detection::protos::ArgMaxMatcher* Matcher::release_argmax_matcher() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Matcher.argmax_matcher)
  if (has_argmax_matcher()) {
    clear_has_matcher_oneof();
    ::object_detection::protos::ArgMaxMatcher* temp = matcher_oneof_.argmax_matcher_;
    matcher_oneof_.argmax_matcher_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Matcher::set_allocated_argmax_matcher(::object_detection::protos::ArgMaxMatcher* argmax_matcher) {
  clear_matcher_oneof();
  if (argmax_matcher) {
    set_has_argmax_matcher();
    matcher_oneof_.argmax_matcher_ = argmax_matcher;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Matcher.argmax_matcher)
}

// optional .object_detection.protos.BipartiteMatcher bipartite_matcher = 2;
bool Matcher::has_bipartite_matcher() const {
  return matcher_oneof_case() == kBipartiteMatcher;
}
void Matcher::set_has_bipartite_matcher() {
  _oneof_case_[0] = kBipartiteMatcher;
}
void Matcher::clear_bipartite_matcher() {
  if (has_bipartite_matcher()) {
    delete matcher_oneof_.bipartite_matcher_;
    clear_has_matcher_oneof();
  }
}
 const ::object_detection::protos::BipartiteMatcher& Matcher::bipartite_matcher() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.Matcher.bipartite_matcher)
  return has_bipartite_matcher()
      ? *matcher_oneof_.bipartite_matcher_
      : ::object_detection::protos::BipartiteMatcher::default_instance();
}
::object_detection::protos::BipartiteMatcher* Matcher::mutable_bipartite_matcher() {
  if (!has_bipartite_matcher()) {
    clear_matcher_oneof();
    set_has_bipartite_matcher();
    matcher_oneof_.bipartite_matcher_ = new ::object_detection::protos::BipartiteMatcher;
  }
  // @@protoc_insertion_point(field_mutable:object_detection.protos.Matcher.bipartite_matcher)
  return matcher_oneof_.bipartite_matcher_;
}
::object_detection::protos::BipartiteMatcher* Matcher::release_bipartite_matcher() {
  // @@protoc_insertion_point(field_release:object_detection.protos.Matcher.bipartite_matcher)
  if (has_bipartite_matcher()) {
    clear_has_matcher_oneof();
    ::object_detection::protos::BipartiteMatcher* temp = matcher_oneof_.bipartite_matcher_;
    matcher_oneof_.bipartite_matcher_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Matcher::set_allocated_bipartite_matcher(::object_detection::protos::BipartiteMatcher* bipartite_matcher) {
  clear_matcher_oneof();
  if (bipartite_matcher) {
    set_has_bipartite_matcher();
    matcher_oneof_.bipartite_matcher_ = bipartite_matcher;
  }
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.Matcher.bipartite_matcher)
}

bool Matcher::has_matcher_oneof() const {
  return matcher_oneof_case() != MATCHER_ONEOF_NOT_SET;
}
void Matcher::clear_has_matcher_oneof() {
  _oneof_case_[0] = MATCHER_ONEOF_NOT_SET;
}
Matcher::MatcherOneofCase Matcher::matcher_oneof_case() const {
  return Matcher::MatcherOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
