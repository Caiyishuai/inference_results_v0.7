// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/eval.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object_detection/protos/eval.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace object_detection {
namespace protos {
class EvalConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EvalConfig>
     _instance;
} _EvalConfig_default_instance_;

namespace protobuf_object_5fdetection_2fprotos_2feval_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, num_visualizations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, num_examples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, eval_interval_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, max_evals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, save_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, visualization_export_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, eval_master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, metrics_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, export_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, ignore_groundtruth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, use_moving_averages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, eval_instance_masks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, min_score_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, max_num_boxes_to_visualize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, skip_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, skip_labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, visualize_groundtruth_boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, groundtruth_box_visualization_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, keep_image_id_for_visualization_export_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, retain_original_images_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, include_metrics_per_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, recall_lower_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalConfig, recall_upper_bound_),
  21,
  15,
  16,
  17,
  4,
  5,
  0,
  1,
  ~0u,
  2,
  6,
  7,
  8,
  18,
  19,
  9,
  10,
  11,
  3,
  12,
  20,
  13,
  14,
  22,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(EvalConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EvalConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "object_detection/protos/eval.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  EvalConfig::_default_groundtruth_box_visualization_color_.DefaultConstruct();
  *EvalConfig::_default_groundtruth_box_visualization_color_.get_mutable() = ::std::string("black", 5);
  ::google::protobuf::internal::OnShutdownDestroyString(
      EvalConfig::_default_groundtruth_box_visualization_color_.get_mutable());
  _EvalConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EvalConfig_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"object_detection/protos/eval.proto\022\027ob"
      "ject_detection.protos\"\265\006\n\nEvalConfig\022\025\n\n"
      "batch_size\030\031 \001(\r:\0011\022\036\n\022num_visualization"
      "s\030\001 \001(\r:\00210\022\036\n\014num_examples\030\002 \001(\r:\0045000B"
      "\002\030\001\022\037\n\022eval_interval_secs\030\003 \001(\r:\003300\022\030\n\t"
      "max_evals\030\004 \001(\r:\0010B\002\030\001\022\031\n\nsave_graph\030\005 \001"
      "(\010:\005false\022\"\n\030visualization_export_dir\030\006 "
      "\001(\t:\000\022\025\n\013eval_master\030\007 \001(\t:\000\022\023\n\013metrics_"
      "set\030\010 \003(\t\022\025\n\013export_path\030\t \001(\t:\000\022!\n\022igno"
      "re_groundtruth\030\n \001(\010:\005false\022\"\n\023use_movin"
      "g_averages\030\013 \001(\010:\005false\022\"\n\023eval_instance"
      "_masks\030\014 \001(\010:\005false\022 \n\023min_score_thresho"
      "ld\030\r \001(\002:\0030.5\022&\n\032max_num_boxes_to_visual"
      "ize\030\016 \001(\005:\00220\022\032\n\013skip_scores\030\017 \001(\010:\005fals"
      "e\022\032\n\013skip_labels\030\020 \001(\010:\005false\022*\n\033visuali"
      "ze_groundtruth_boxes\030\021 \001(\010:\005false\0222\n#gro"
      "undtruth_box_visualization_color\030\022 \001(\t:\005"
      "black\0225\n&keep_image_id_for_visualization"
      "_export\030\023 \001(\010:\005false\022$\n\026retain_original_"
      "images\030\027 \001(\010:\004true\022+\n\034include_metrics_pe"
      "r_category\030\030 \001(\010:\005false\022\035\n\022recall_lower_"
      "bound\030\032 \001(\002:\0010\022\035\n\022recall_upper_bound\030\033 \001"
      "(\002:\0011"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 885);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object_detection/protos/eval.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_object_5fdetection_2fprotos_2feval_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> EvalConfig::_default_groundtruth_box_visualization_color_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvalConfig::kBatchSizeFieldNumber;
const int EvalConfig::kNumVisualizationsFieldNumber;
const int EvalConfig::kNumExamplesFieldNumber;
const int EvalConfig::kEvalIntervalSecsFieldNumber;
const int EvalConfig::kMaxEvalsFieldNumber;
const int EvalConfig::kSaveGraphFieldNumber;
const int EvalConfig::kVisualizationExportDirFieldNumber;
const int EvalConfig::kEvalMasterFieldNumber;
const int EvalConfig::kMetricsSetFieldNumber;
const int EvalConfig::kExportPathFieldNumber;
const int EvalConfig::kIgnoreGroundtruthFieldNumber;
const int EvalConfig::kUseMovingAveragesFieldNumber;
const int EvalConfig::kEvalInstanceMasksFieldNumber;
const int EvalConfig::kMinScoreThresholdFieldNumber;
const int EvalConfig::kMaxNumBoxesToVisualizeFieldNumber;
const int EvalConfig::kSkipScoresFieldNumber;
const int EvalConfig::kSkipLabelsFieldNumber;
const int EvalConfig::kVisualizeGroundtruthBoxesFieldNumber;
const int EvalConfig::kGroundtruthBoxVisualizationColorFieldNumber;
const int EvalConfig::kKeepImageIdForVisualizationExportFieldNumber;
const int EvalConfig::kRetainOriginalImagesFieldNumber;
const int EvalConfig::kIncludeMetricsPerCategoryFieldNumber;
const int EvalConfig::kRecallLowerBoundFieldNumber;
const int EvalConfig::kRecallUpperBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvalConfig::EvalConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_object_5fdetection_2fprotos_2feval_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:object_detection.protos.EvalConfig)
}
EvalConfig::EvalConfig(const EvalConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      metrics_set_(from.metrics_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visualization_export_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_visualization_export_dir()) {
    visualization_export_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visualization_export_dir_);
  }
  eval_master_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_eval_master()) {
    eval_master_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eval_master_);
  }
  export_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_export_path()) {
    export_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.export_path_);
  }
  groundtruth_box_visualization_color_.UnsafeSetDefault(&EvalConfig::_default_groundtruth_box_visualization_color_.get());
  if (from.has_groundtruth_box_visualization_color()) {
    groundtruth_box_visualization_color_.AssignWithDefault(&EvalConfig::_default_groundtruth_box_visualization_color_.get(), from.groundtruth_box_visualization_color_);
  }
  ::memcpy(&max_evals_, &from.max_evals_,
    static_cast<size_t>(reinterpret_cast<char*>(&recall_upper_bound_) -
    reinterpret_cast<char*>(&max_evals_)) + sizeof(recall_upper_bound_));
  // @@protoc_insertion_point(copy_constructor:object_detection.protos.EvalConfig)
}

void EvalConfig::SharedCtor() {
  _cached_size_ = 0;
  visualization_export_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eval_master_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  export_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groundtruth_box_visualization_color_.UnsafeSetDefault(&EvalConfig::_default_groundtruth_box_visualization_color_.get());
  ::memset(&max_evals_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recall_lower_bound_) -
      reinterpret_cast<char*>(&max_evals_)) + sizeof(recall_lower_bound_));
  num_visualizations_ = 10u;
  num_examples_ = 5000u;
  eval_interval_secs_ = 300u;
  min_score_threshold_ = 0.5f;
  max_num_boxes_to_visualize_ = 20;
  retain_original_images_ = true;
  batch_size_ = 1u;
  recall_upper_bound_ = 1;
}

EvalConfig::~EvalConfig() {
  // @@protoc_insertion_point(destructor:object_detection.protos.EvalConfig)
  SharedDtor();
}

void EvalConfig::SharedDtor() {
  visualization_export_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eval_master_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  export_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groundtruth_box_visualization_color_.DestroyNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get());
}

void EvalConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvalConfig::descriptor() {
  protobuf_object_5fdetection_2fprotos_2feval_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2feval_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvalConfig& EvalConfig::default_instance() {
  protobuf_object_5fdetection_2fprotos_2feval_2eproto::InitDefaults();
  return *internal_default_instance();
}

EvalConfig* EvalConfig::New(::google::protobuf::Arena* arena) const {
  EvalConfig* n = new EvalConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvalConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:object_detection.protos.EvalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!visualization_export_dir_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*visualization_export_dir_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!eval_master_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*eval_master_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!export_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*export_path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!groundtruth_box_visualization_color_.IsDefault(&EvalConfig::_default_groundtruth_box_visualization_color_.get()));
      (*groundtruth_box_visualization_color_.UnsafeRawStringPointer())->assign(*&EvalConfig::_default_groundtruth_box_visualization_color_.get());
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&max_evals_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_moving_averages_) -
        reinterpret_cast<char*>(&max_evals_)) + sizeof(use_moving_averages_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&eval_instance_masks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recall_lower_bound_) -
        reinterpret_cast<char*>(&eval_instance_masks_)) + sizeof(recall_lower_bound_));
    num_visualizations_ = 10u;
  }
  if (cached_has_bits & 8323072u) {
    num_examples_ = 5000u;
    eval_interval_secs_ = 300u;
    min_score_threshold_ = 0.5f;
    max_num_boxes_to_visualize_ = 20;
    retain_original_images_ = true;
    batch_size_ = 1u;
    recall_upper_bound_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvalConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:object_detection.protos.EvalConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_visualizations = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_visualizations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_visualizations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_examples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eval_interval_secs = 3 [default = 300];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_eval_interval_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eval_interval_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_evals = 4 [default = 0, deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_evals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_evals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool save_graph = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_save_graph();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_graph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string visualization_export_dir = 6 [default = ""];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visualization_export_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->visualization_export_dir().data(), static_cast<int>(this->visualization_export_dir().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.visualization_export_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string eval_master = 7 [default = ""];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eval_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eval_master().data(), static_cast<int>(this->eval_master().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.eval_master");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string metrics_set = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metrics_set()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metrics_set(this->metrics_set_size() - 1).data(),
            static_cast<int>(this->metrics_set(this->metrics_set_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.metrics_set");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string export_path = 9 [default = ""];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_export_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->export_path().data(), static_cast<int>(this->export_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.export_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_groundtruth = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ignore_groundtruth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_groundtruth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_moving_averages = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_use_moving_averages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_moving_averages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eval_instance_masks = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_eval_instance_masks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eval_instance_masks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_score_threshold = 13 [default = 0.5];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_min_score_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_score_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_num_boxes_to_visualize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_boxes_to_visualize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_scores = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_skip_scores();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_labels = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_skip_labels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_labels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visualize_groundtruth_boxes = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_visualize_groundtruth_boxes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visualize_groundtruth_boxes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groundtruth_box_visualization_color = 18 [default = "black"];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groundtruth_box_visualization_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groundtruth_box_visualization_color().data(), static_cast<int>(this->groundtruth_box_visualization_color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool keep_image_id_for_visualization_export = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_keep_image_id_for_visualization_export();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_image_id_for_visualization_export_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool retain_original_images = 23 [default = true];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_retain_original_images();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retain_original_images_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_metrics_per_category = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_include_metrics_per_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_metrics_per_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 batch_size = 25 [default = 1];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recall_lower_bound = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {
          set_has_recall_lower_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recall_lower_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recall_upper_bound = 27 [default = 1];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_recall_upper_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recall_upper_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:object_detection.protos.EvalConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:object_detection.protos.EvalConfig)
  return false;
#undef DO_
}

void EvalConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:object_detection.protos.EvalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_visualizations = 1 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_visualizations(), output);
  }

  // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_examples(), output);
  }

  // optional uint32 eval_interval_secs = 3 [default = 300];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eval_interval_secs(), output);
  }

  // optional uint32 max_evals = 4 [default = 0, deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_evals(), output);
  }

  // optional bool save_graph = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->save_graph(), output);
  }

  // optional string visualization_export_dir = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visualization_export_dir().data(), static_cast<int>(this->visualization_export_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.visualization_export_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->visualization_export_dir(), output);
  }

  // optional string eval_master = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eval_master().data(), static_cast<int>(this->eval_master().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.eval_master");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->eval_master(), output);
  }

  // repeated string metrics_set = 8;
  for (int i = 0, n = this->metrics_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_set(i).data(), static_cast<int>(this->metrics_set(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.metrics_set");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->metrics_set(i), output);
  }

  // optional string export_path = 9 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->export_path().data(), static_cast<int>(this->export_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.export_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->export_path(), output);
  }

  // optional bool ignore_groundtruth = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ignore_groundtruth(), output);
  }

  // optional bool use_moving_averages = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_moving_averages(), output);
  }

  // optional bool eval_instance_masks = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->eval_instance_masks(), output);
  }

  // optional float min_score_threshold = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->min_score_threshold(), output);
  }

  // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_num_boxes_to_visualize(), output);
  }

  // optional bool skip_scores = 15 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->skip_scores(), output);
  }

  // optional bool skip_labels = 16 [default = false];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->skip_labels(), output);
  }

  // optional bool visualize_groundtruth_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->visualize_groundtruth_boxes(), output);
  }

  // optional string groundtruth_box_visualization_color = 18 [default = "black"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundtruth_box_visualization_color().data(), static_cast<int>(this->groundtruth_box_visualization_color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->groundtruth_box_visualization_color(), output);
  }

  // optional bool keep_image_id_for_visualization_export = 19 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->keep_image_id_for_visualization_export(), output);
  }

  // optional bool retain_original_images = 23 [default = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->retain_original_images(), output);
  }

  // optional bool include_metrics_per_category = 24 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->include_metrics_per_category(), output);
  }

  // optional uint32 batch_size = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->batch_size(), output);
  }

  // optional float recall_lower_bound = 26 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->recall_lower_bound(), output);
  }

  // optional float recall_upper_bound = 27 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->recall_upper_bound(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:object_detection.protos.EvalConfig)
}

::google::protobuf::uint8* EvalConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:object_detection.protos.EvalConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_visualizations = 1 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_visualizations(), target);
  }

  // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_examples(), target);
  }

  // optional uint32 eval_interval_secs = 3 [default = 300];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eval_interval_secs(), target);
  }

  // optional uint32 max_evals = 4 [default = 0, deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_evals(), target);
  }

  // optional bool save_graph = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->save_graph(), target);
  }

  // optional string visualization_export_dir = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visualization_export_dir().data(), static_cast<int>(this->visualization_export_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.visualization_export_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->visualization_export_dir(), target);
  }

  // optional string eval_master = 7 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eval_master().data(), static_cast<int>(this->eval_master().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.eval_master");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->eval_master(), target);
  }

  // repeated string metrics_set = 8;
  for (int i = 0, n = this->metrics_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metrics_set(i).data(), static_cast<int>(this->metrics_set(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.metrics_set");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->metrics_set(i), target);
  }

  // optional string export_path = 9 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->export_path().data(), static_cast<int>(this->export_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.export_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->export_path(), target);
  }

  // optional bool ignore_groundtruth = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ignore_groundtruth(), target);
  }

  // optional bool use_moving_averages = 11 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_moving_averages(), target);
  }

  // optional bool eval_instance_masks = 12 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->eval_instance_masks(), target);
  }

  // optional float min_score_threshold = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->min_score_threshold(), target);
  }

  // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_num_boxes_to_visualize(), target);
  }

  // optional bool skip_scores = 15 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->skip_scores(), target);
  }

  // optional bool skip_labels = 16 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->skip_labels(), target);
  }

  // optional bool visualize_groundtruth_boxes = 17 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->visualize_groundtruth_boxes(), target);
  }

  // optional string groundtruth_box_visualization_color = 18 [default = "black"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groundtruth_box_visualization_color().data(), static_cast<int>(this->groundtruth_box_visualization_color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "object_detection.protos.EvalConfig.groundtruth_box_visualization_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->groundtruth_box_visualization_color(), target);
  }

  // optional bool keep_image_id_for_visualization_export = 19 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->keep_image_id_for_visualization_export(), target);
  }

  // optional bool retain_original_images = 23 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->retain_original_images(), target);
  }

  // optional bool include_metrics_per_category = 24 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->include_metrics_per_category(), target);
  }

  // optional uint32 batch_size = 25 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->batch_size(), target);
  }

  // optional float recall_lower_bound = 26 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->recall_lower_bound(), target);
  }

  // optional float recall_upper_bound = 27 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->recall_upper_bound(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:object_detection.protos.EvalConfig)
  return target;
}

size_t EvalConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:object_detection.protos.EvalConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string metrics_set = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metrics_set_size());
  for (int i = 0, n = this->metrics_set_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metrics_set(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string visualization_export_dir = 6 [default = ""];
    if (has_visualization_export_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->visualization_export_dir());
    }

    // optional string eval_master = 7 [default = ""];
    if (has_eval_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eval_master());
    }

    // optional string export_path = 9 [default = ""];
    if (has_export_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->export_path());
    }

    // optional string groundtruth_box_visualization_color = 18 [default = "black"];
    if (has_groundtruth_box_visualization_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groundtruth_box_visualization_color());
    }

    // optional uint32 max_evals = 4 [default = 0, deprecated = true];
    if (has_max_evals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_evals());
    }

    // optional bool save_graph = 5 [default = false];
    if (has_save_graph()) {
      total_size += 1 + 1;
    }

    // optional bool ignore_groundtruth = 10 [default = false];
    if (has_ignore_groundtruth()) {
      total_size += 1 + 1;
    }

    // optional bool use_moving_averages = 11 [default = false];
    if (has_use_moving_averages()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool eval_instance_masks = 12 [default = false];
    if (has_eval_instance_masks()) {
      total_size += 1 + 1;
    }

    // optional bool skip_scores = 15 [default = false];
    if (has_skip_scores()) {
      total_size += 1 + 1;
    }

    // optional bool skip_labels = 16 [default = false];
    if (has_skip_labels()) {
      total_size += 2 + 1;
    }

    // optional bool visualize_groundtruth_boxes = 17 [default = false];
    if (has_visualize_groundtruth_boxes()) {
      total_size += 2 + 1;
    }

    // optional bool keep_image_id_for_visualization_export = 19 [default = false];
    if (has_keep_image_id_for_visualization_export()) {
      total_size += 2 + 1;
    }

    // optional bool include_metrics_per_category = 24 [default = false];
    if (has_include_metrics_per_category()) {
      total_size += 2 + 1;
    }

    // optional float recall_lower_bound = 26 [default = 0];
    if (has_recall_lower_bound()) {
      total_size += 2 + 4;
    }

    // optional uint32 num_visualizations = 1 [default = 10];
    if (has_num_visualizations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_visualizations());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 num_examples = 2 [default = 5000, deprecated = true];
    if (has_num_examples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_examples());
    }

    // optional uint32 eval_interval_secs = 3 [default = 300];
    if (has_eval_interval_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eval_interval_secs());
    }

    // optional float min_score_threshold = 13 [default = 0.5];
    if (has_min_score_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 max_num_boxes_to_visualize = 14 [default = 20];
    if (has_max_num_boxes_to_visualize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num_boxes_to_visualize());
    }

    // optional bool retain_original_images = 23 [default = true];
    if (has_retain_original_images()) {
      total_size += 2 + 1;
    }

    // optional uint32 batch_size = 25 [default = 1];
    if (has_batch_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional float recall_upper_bound = 27 [default = 1];
    if (has_recall_upper_bound()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvalConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:object_detection.protos.EvalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const EvalConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvalConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:object_detection.protos.EvalConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:object_detection.protos.EvalConfig)
    MergeFrom(*source);
  }
}

void EvalConfig::MergeFrom(const EvalConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:object_detection.protos.EvalConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_set_.MergeFrom(from.metrics_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_visualization_export_dir();
      visualization_export_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visualization_export_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_eval_master();
      eval_master_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eval_master_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_export_path();
      export_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.export_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_groundtruth_box_visualization_color();
      groundtruth_box_visualization_color_.AssignWithDefault(&EvalConfig::_default_groundtruth_box_visualization_color_.get(), from.groundtruth_box_visualization_color_);
    }
    if (cached_has_bits & 0x00000010u) {
      max_evals_ = from.max_evals_;
    }
    if (cached_has_bits & 0x00000020u) {
      save_graph_ = from.save_graph_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_groundtruth_ = from.ignore_groundtruth_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_moving_averages_ = from.use_moving_averages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      eval_instance_masks_ = from.eval_instance_masks_;
    }
    if (cached_has_bits & 0x00000200u) {
      skip_scores_ = from.skip_scores_;
    }
    if (cached_has_bits & 0x00000400u) {
      skip_labels_ = from.skip_labels_;
    }
    if (cached_has_bits & 0x00000800u) {
      visualize_groundtruth_boxes_ = from.visualize_groundtruth_boxes_;
    }
    if (cached_has_bits & 0x00001000u) {
      keep_image_id_for_visualization_export_ = from.keep_image_id_for_visualization_export_;
    }
    if (cached_has_bits & 0x00002000u) {
      include_metrics_per_category_ = from.include_metrics_per_category_;
    }
    if (cached_has_bits & 0x00004000u) {
      recall_lower_bound_ = from.recall_lower_bound_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_visualizations_ = from.num_visualizations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      num_examples_ = from.num_examples_;
    }
    if (cached_has_bits & 0x00020000u) {
      eval_interval_secs_ = from.eval_interval_secs_;
    }
    if (cached_has_bits & 0x00040000u) {
      min_score_threshold_ = from.min_score_threshold_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_num_boxes_to_visualize_ = from.max_num_boxes_to_visualize_;
    }
    if (cached_has_bits & 0x00100000u) {
      retain_original_images_ = from.retain_original_images_;
    }
    if (cached_has_bits & 0x00200000u) {
      batch_size_ = from.batch_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      recall_upper_bound_ = from.recall_upper_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvalConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:object_detection.protos.EvalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalConfig::CopyFrom(const EvalConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:object_detection.protos.EvalConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalConfig::IsInitialized() const {
  return true;
}

void EvalConfig::Swap(EvalConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvalConfig::InternalSwap(EvalConfig* other) {
  using std::swap;
  metrics_set_.InternalSwap(&other->metrics_set_);
  visualization_export_dir_.Swap(&other->visualization_export_dir_);
  eval_master_.Swap(&other->eval_master_);
  export_path_.Swap(&other->export_path_);
  groundtruth_box_visualization_color_.Swap(&other->groundtruth_box_visualization_color_);
  swap(max_evals_, other->max_evals_);
  swap(save_graph_, other->save_graph_);
  swap(ignore_groundtruth_, other->ignore_groundtruth_);
  swap(use_moving_averages_, other->use_moving_averages_);
  swap(eval_instance_masks_, other->eval_instance_masks_);
  swap(skip_scores_, other->skip_scores_);
  swap(skip_labels_, other->skip_labels_);
  swap(visualize_groundtruth_boxes_, other->visualize_groundtruth_boxes_);
  swap(keep_image_id_for_visualization_export_, other->keep_image_id_for_visualization_export_);
  swap(include_metrics_per_category_, other->include_metrics_per_category_);
  swap(recall_lower_bound_, other->recall_lower_bound_);
  swap(num_visualizations_, other->num_visualizations_);
  swap(num_examples_, other->num_examples_);
  swap(eval_interval_secs_, other->eval_interval_secs_);
  swap(min_score_threshold_, other->min_score_threshold_);
  swap(max_num_boxes_to_visualize_, other->max_num_boxes_to_visualize_);
  swap(retain_original_images_, other->retain_original_images_);
  swap(batch_size_, other->batch_size_);
  swap(recall_upper_bound_, other->recall_upper_bound_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvalConfig::GetMetadata() const {
  protobuf_object_5fdetection_2fprotos_2feval_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_object_5fdetection_2fprotos_2feval_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvalConfig

// optional uint32 batch_size = 25 [default = 1];
bool EvalConfig::has_batch_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void EvalConfig::set_has_batch_size() {
  _has_bits_[0] |= 0x00200000u;
}
void EvalConfig::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00200000u;
}
void EvalConfig::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
::google::protobuf::uint32 EvalConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.batch_size)
  return batch_size_;
}
void EvalConfig::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.batch_size)
}

// optional uint32 num_visualizations = 1 [default = 10];
bool EvalConfig::has_num_visualizations() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void EvalConfig::set_has_num_visualizations() {
  _has_bits_[0] |= 0x00008000u;
}
void EvalConfig::clear_has_num_visualizations() {
  _has_bits_[0] &= ~0x00008000u;
}
void EvalConfig::clear_num_visualizations() {
  num_visualizations_ = 10u;
  clear_has_num_visualizations();
}
::google::protobuf::uint32 EvalConfig::num_visualizations() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.num_visualizations)
  return num_visualizations_;
}
void EvalConfig::set_num_visualizations(::google::protobuf::uint32 value) {
  set_has_num_visualizations();
  num_visualizations_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.num_visualizations)
}

// optional uint32 num_examples = 2 [default = 5000, deprecated = true];
bool EvalConfig::has_num_examples() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void EvalConfig::set_has_num_examples() {
  _has_bits_[0] |= 0x00010000u;
}
void EvalConfig::clear_has_num_examples() {
  _has_bits_[0] &= ~0x00010000u;
}
void EvalConfig::clear_num_examples() {
  num_examples_ = 5000u;
  clear_has_num_examples();
}
::google::protobuf::uint32 EvalConfig::num_examples() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.num_examples)
  return num_examples_;
}
void EvalConfig::set_num_examples(::google::protobuf::uint32 value) {
  set_has_num_examples();
  num_examples_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.num_examples)
}

// optional uint32 eval_interval_secs = 3 [default = 300];
bool EvalConfig::has_eval_interval_secs() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void EvalConfig::set_has_eval_interval_secs() {
  _has_bits_[0] |= 0x00020000u;
}
void EvalConfig::clear_has_eval_interval_secs() {
  _has_bits_[0] &= ~0x00020000u;
}
void EvalConfig::clear_eval_interval_secs() {
  eval_interval_secs_ = 300u;
  clear_has_eval_interval_secs();
}
::google::protobuf::uint32 EvalConfig::eval_interval_secs() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.eval_interval_secs)
  return eval_interval_secs_;
}
void EvalConfig::set_eval_interval_secs(::google::protobuf::uint32 value) {
  set_has_eval_interval_secs();
  eval_interval_secs_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.eval_interval_secs)
}

// optional uint32 max_evals = 4 [default = 0, deprecated = true];
bool EvalConfig::has_max_evals() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EvalConfig::set_has_max_evals() {
  _has_bits_[0] |= 0x00000010u;
}
void EvalConfig::clear_has_max_evals() {
  _has_bits_[0] &= ~0x00000010u;
}
void EvalConfig::clear_max_evals() {
  max_evals_ = 0u;
  clear_has_max_evals();
}
::google::protobuf::uint32 EvalConfig::max_evals() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.max_evals)
  return max_evals_;
}
void EvalConfig::set_max_evals(::google::protobuf::uint32 value) {
  set_has_max_evals();
  max_evals_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.max_evals)
}

// optional bool save_graph = 5 [default = false];
bool EvalConfig::has_save_graph() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EvalConfig::set_has_save_graph() {
  _has_bits_[0] |= 0x00000020u;
}
void EvalConfig::clear_has_save_graph() {
  _has_bits_[0] &= ~0x00000020u;
}
void EvalConfig::clear_save_graph() {
  save_graph_ = false;
  clear_has_save_graph();
}
bool EvalConfig::save_graph() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.save_graph)
  return save_graph_;
}
void EvalConfig::set_save_graph(bool value) {
  set_has_save_graph();
  save_graph_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.save_graph)
}

// optional string visualization_export_dir = 6 [default = ""];
bool EvalConfig::has_visualization_export_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EvalConfig::set_has_visualization_export_dir() {
  _has_bits_[0] |= 0x00000001u;
}
void EvalConfig::clear_has_visualization_export_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
void EvalConfig::clear_visualization_export_dir() {
  visualization_export_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_visualization_export_dir();
}
const ::std::string& EvalConfig::visualization_export_dir() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.visualization_export_dir)
  return visualization_export_dir_.GetNoArena();
}
void EvalConfig::set_visualization_export_dir(const ::std::string& value) {
  set_has_visualization_export_dir();
  visualization_export_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.visualization_export_dir)
}
#if LANG_CXX11
void EvalConfig::set_visualization_export_dir(::std::string&& value) {
  set_has_visualization_export_dir();
  visualization_export_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.EvalConfig.visualization_export_dir)
}
#endif
void EvalConfig::set_visualization_export_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_visualization_export_dir();
  visualization_export_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.EvalConfig.visualization_export_dir)
}
void EvalConfig::set_visualization_export_dir(const char* value, size_t size) {
  set_has_visualization_export_dir();
  visualization_export_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.EvalConfig.visualization_export_dir)
}
::std::string* EvalConfig::mutable_visualization_export_dir() {
  set_has_visualization_export_dir();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.EvalConfig.visualization_export_dir)
  return visualization_export_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EvalConfig::release_visualization_export_dir() {
  // @@protoc_insertion_point(field_release:object_detection.protos.EvalConfig.visualization_export_dir)
  clear_has_visualization_export_dir();
  return visualization_export_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EvalConfig::set_allocated_visualization_export_dir(::std::string* visualization_export_dir) {
  if (visualization_export_dir != NULL) {
    set_has_visualization_export_dir();
  } else {
    clear_has_visualization_export_dir();
  }
  visualization_export_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), visualization_export_dir);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.EvalConfig.visualization_export_dir)
}

// optional string eval_master = 7 [default = ""];
bool EvalConfig::has_eval_master() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EvalConfig::set_has_eval_master() {
  _has_bits_[0] |= 0x00000002u;
}
void EvalConfig::clear_has_eval_master() {
  _has_bits_[0] &= ~0x00000002u;
}
void EvalConfig::clear_eval_master() {
  eval_master_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_eval_master();
}
const ::std::string& EvalConfig::eval_master() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.eval_master)
  return eval_master_.GetNoArena();
}
void EvalConfig::set_eval_master(const ::std::string& value) {
  set_has_eval_master();
  eval_master_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.eval_master)
}
#if LANG_CXX11
void EvalConfig::set_eval_master(::std::string&& value) {
  set_has_eval_master();
  eval_master_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.EvalConfig.eval_master)
}
#endif
void EvalConfig::set_eval_master(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_eval_master();
  eval_master_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.EvalConfig.eval_master)
}
void EvalConfig::set_eval_master(const char* value, size_t size) {
  set_has_eval_master();
  eval_master_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.EvalConfig.eval_master)
}
::std::string* EvalConfig::mutable_eval_master() {
  set_has_eval_master();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.EvalConfig.eval_master)
  return eval_master_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EvalConfig::release_eval_master() {
  // @@protoc_insertion_point(field_release:object_detection.protos.EvalConfig.eval_master)
  clear_has_eval_master();
  return eval_master_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EvalConfig::set_allocated_eval_master(::std::string* eval_master) {
  if (eval_master != NULL) {
    set_has_eval_master();
  } else {
    clear_has_eval_master();
  }
  eval_master_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eval_master);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.EvalConfig.eval_master)
}

// repeated string metrics_set = 8;
int EvalConfig::metrics_set_size() const {
  return metrics_set_.size();
}
void EvalConfig::clear_metrics_set() {
  metrics_set_.Clear();
}
const ::std::string& EvalConfig::metrics_set(int index) const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.metrics_set)
  return metrics_set_.Get(index);
}
::std::string* EvalConfig::mutable_metrics_set(int index) {
  // @@protoc_insertion_point(field_mutable:object_detection.protos.EvalConfig.metrics_set)
  return metrics_set_.Mutable(index);
}
void EvalConfig::set_metrics_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.metrics_set)
  metrics_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void EvalConfig::set_metrics_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.metrics_set)
  metrics_set_.Mutable(index)->assign(std::move(value));
}
#endif
void EvalConfig::set_metrics_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  metrics_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:object_detection.protos.EvalConfig.metrics_set)
}
void EvalConfig::set_metrics_set(int index, const char* value, size_t size) {
  metrics_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.EvalConfig.metrics_set)
}
::std::string* EvalConfig::add_metrics_set() {
  // @@protoc_insertion_point(field_add_mutable:object_detection.protos.EvalConfig.metrics_set)
  return metrics_set_.Add();
}
void EvalConfig::add_metrics_set(const ::std::string& value) {
  metrics_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:object_detection.protos.EvalConfig.metrics_set)
}
#if LANG_CXX11
void EvalConfig::add_metrics_set(::std::string&& value) {
  metrics_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:object_detection.protos.EvalConfig.metrics_set)
}
#endif
void EvalConfig::add_metrics_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  metrics_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:object_detection.protos.EvalConfig.metrics_set)
}
void EvalConfig::add_metrics_set(const char* value, size_t size) {
  metrics_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:object_detection.protos.EvalConfig.metrics_set)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
EvalConfig::metrics_set() const {
  // @@protoc_insertion_point(field_list:object_detection.protos.EvalConfig.metrics_set)
  return metrics_set_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
EvalConfig::mutable_metrics_set() {
  // @@protoc_insertion_point(field_mutable_list:object_detection.protos.EvalConfig.metrics_set)
  return &metrics_set_;
}

// optional string export_path = 9 [default = ""];
bool EvalConfig::has_export_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EvalConfig::set_has_export_path() {
  _has_bits_[0] |= 0x00000004u;
}
void EvalConfig::clear_has_export_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void EvalConfig::clear_export_path() {
  export_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_export_path();
}
const ::std::string& EvalConfig::export_path() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.export_path)
  return export_path_.GetNoArena();
}
void EvalConfig::set_export_path(const ::std::string& value) {
  set_has_export_path();
  export_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.export_path)
}
#if LANG_CXX11
void EvalConfig::set_export_path(::std::string&& value) {
  set_has_export_path();
  export_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.EvalConfig.export_path)
}
#endif
void EvalConfig::set_export_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_export_path();
  export_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.EvalConfig.export_path)
}
void EvalConfig::set_export_path(const char* value, size_t size) {
  set_has_export_path();
  export_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.EvalConfig.export_path)
}
::std::string* EvalConfig::mutable_export_path() {
  set_has_export_path();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.EvalConfig.export_path)
  return export_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EvalConfig::release_export_path() {
  // @@protoc_insertion_point(field_release:object_detection.protos.EvalConfig.export_path)
  clear_has_export_path();
  return export_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EvalConfig::set_allocated_export_path(::std::string* export_path) {
  if (export_path != NULL) {
    set_has_export_path();
  } else {
    clear_has_export_path();
  }
  export_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), export_path);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.EvalConfig.export_path)
}

// optional bool ignore_groundtruth = 10 [default = false];
bool EvalConfig::has_ignore_groundtruth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EvalConfig::set_has_ignore_groundtruth() {
  _has_bits_[0] |= 0x00000040u;
}
void EvalConfig::clear_has_ignore_groundtruth() {
  _has_bits_[0] &= ~0x00000040u;
}
void EvalConfig::clear_ignore_groundtruth() {
  ignore_groundtruth_ = false;
  clear_has_ignore_groundtruth();
}
bool EvalConfig::ignore_groundtruth() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.ignore_groundtruth)
  return ignore_groundtruth_;
}
void EvalConfig::set_ignore_groundtruth(bool value) {
  set_has_ignore_groundtruth();
  ignore_groundtruth_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.ignore_groundtruth)
}

// optional bool use_moving_averages = 11 [default = false];
bool EvalConfig::has_use_moving_averages() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EvalConfig::set_has_use_moving_averages() {
  _has_bits_[0] |= 0x00000080u;
}
void EvalConfig::clear_has_use_moving_averages() {
  _has_bits_[0] &= ~0x00000080u;
}
void EvalConfig::clear_use_moving_averages() {
  use_moving_averages_ = false;
  clear_has_use_moving_averages();
}
bool EvalConfig::use_moving_averages() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.use_moving_averages)
  return use_moving_averages_;
}
void EvalConfig::set_use_moving_averages(bool value) {
  set_has_use_moving_averages();
  use_moving_averages_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.use_moving_averages)
}

// optional bool eval_instance_masks = 12 [default = false];
bool EvalConfig::has_eval_instance_masks() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EvalConfig::set_has_eval_instance_masks() {
  _has_bits_[0] |= 0x00000100u;
}
void EvalConfig::clear_has_eval_instance_masks() {
  _has_bits_[0] &= ~0x00000100u;
}
void EvalConfig::clear_eval_instance_masks() {
  eval_instance_masks_ = false;
  clear_has_eval_instance_masks();
}
bool EvalConfig::eval_instance_masks() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.eval_instance_masks)
  return eval_instance_masks_;
}
void EvalConfig::set_eval_instance_masks(bool value) {
  set_has_eval_instance_masks();
  eval_instance_masks_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.eval_instance_masks)
}

// optional float min_score_threshold = 13 [default = 0.5];
bool EvalConfig::has_min_score_threshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void EvalConfig::set_has_min_score_threshold() {
  _has_bits_[0] |= 0x00040000u;
}
void EvalConfig::clear_has_min_score_threshold() {
  _has_bits_[0] &= ~0x00040000u;
}
void EvalConfig::clear_min_score_threshold() {
  min_score_threshold_ = 0.5f;
  clear_has_min_score_threshold();
}
float EvalConfig::min_score_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.min_score_threshold)
  return min_score_threshold_;
}
void EvalConfig::set_min_score_threshold(float value) {
  set_has_min_score_threshold();
  min_score_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.min_score_threshold)
}

// optional int32 max_num_boxes_to_visualize = 14 [default = 20];
bool EvalConfig::has_max_num_boxes_to_visualize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void EvalConfig::set_has_max_num_boxes_to_visualize() {
  _has_bits_[0] |= 0x00080000u;
}
void EvalConfig::clear_has_max_num_boxes_to_visualize() {
  _has_bits_[0] &= ~0x00080000u;
}
void EvalConfig::clear_max_num_boxes_to_visualize() {
  max_num_boxes_to_visualize_ = 20;
  clear_has_max_num_boxes_to_visualize();
}
::google::protobuf::int32 EvalConfig::max_num_boxes_to_visualize() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.max_num_boxes_to_visualize)
  return max_num_boxes_to_visualize_;
}
void EvalConfig::set_max_num_boxes_to_visualize(::google::protobuf::int32 value) {
  set_has_max_num_boxes_to_visualize();
  max_num_boxes_to_visualize_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.max_num_boxes_to_visualize)
}

// optional bool skip_scores = 15 [default = false];
bool EvalConfig::has_skip_scores() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void EvalConfig::set_has_skip_scores() {
  _has_bits_[0] |= 0x00000200u;
}
void EvalConfig::clear_has_skip_scores() {
  _has_bits_[0] &= ~0x00000200u;
}
void EvalConfig::clear_skip_scores() {
  skip_scores_ = false;
  clear_has_skip_scores();
}
bool EvalConfig::skip_scores() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.skip_scores)
  return skip_scores_;
}
void EvalConfig::set_skip_scores(bool value) {
  set_has_skip_scores();
  skip_scores_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.skip_scores)
}

// optional bool skip_labels = 16 [default = false];
bool EvalConfig::has_skip_labels() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void EvalConfig::set_has_skip_labels() {
  _has_bits_[0] |= 0x00000400u;
}
void EvalConfig::clear_has_skip_labels() {
  _has_bits_[0] &= ~0x00000400u;
}
void EvalConfig::clear_skip_labels() {
  skip_labels_ = false;
  clear_has_skip_labels();
}
bool EvalConfig::skip_labels() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.skip_labels)
  return skip_labels_;
}
void EvalConfig::set_skip_labels(bool value) {
  set_has_skip_labels();
  skip_labels_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.skip_labels)
}

// optional bool visualize_groundtruth_boxes = 17 [default = false];
bool EvalConfig::has_visualize_groundtruth_boxes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void EvalConfig::set_has_visualize_groundtruth_boxes() {
  _has_bits_[0] |= 0x00000800u;
}
void EvalConfig::clear_has_visualize_groundtruth_boxes() {
  _has_bits_[0] &= ~0x00000800u;
}
void EvalConfig::clear_visualize_groundtruth_boxes() {
  visualize_groundtruth_boxes_ = false;
  clear_has_visualize_groundtruth_boxes();
}
bool EvalConfig::visualize_groundtruth_boxes() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.visualize_groundtruth_boxes)
  return visualize_groundtruth_boxes_;
}
void EvalConfig::set_visualize_groundtruth_boxes(bool value) {
  set_has_visualize_groundtruth_boxes();
  visualize_groundtruth_boxes_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.visualize_groundtruth_boxes)
}

// optional string groundtruth_box_visualization_color = 18 [default = "black"];
bool EvalConfig::has_groundtruth_box_visualization_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EvalConfig::set_has_groundtruth_box_visualization_color() {
  _has_bits_[0] |= 0x00000008u;
}
void EvalConfig::clear_has_groundtruth_box_visualization_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void EvalConfig::clear_groundtruth_box_visualization_color() {
  groundtruth_box_visualization_color_.ClearToDefaultNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get());
  clear_has_groundtruth_box_visualization_color();
}
const ::std::string& EvalConfig::groundtruth_box_visualization_color() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
  return groundtruth_box_visualization_color_.GetNoArena();
}
void EvalConfig::set_groundtruth_box_visualization_color(const ::std::string& value) {
  set_has_groundtruth_box_visualization_color();
  groundtruth_box_visualization_color_.SetNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get(), value);
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
}
#if LANG_CXX11
void EvalConfig::set_groundtruth_box_visualization_color(::std::string&& value) {
  set_has_groundtruth_box_visualization_color();
  groundtruth_box_visualization_color_.SetNoArena(
    &EvalConfig::_default_groundtruth_box_visualization_color_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
}
#endif
void EvalConfig::set_groundtruth_box_visualization_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groundtruth_box_visualization_color();
  groundtruth_box_visualization_color_.SetNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
}
void EvalConfig::set_groundtruth_box_visualization_color(const char* value, size_t size) {
  set_has_groundtruth_box_visualization_color();
  groundtruth_box_visualization_color_.SetNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
}
::std::string* EvalConfig::mutable_groundtruth_box_visualization_color() {
  set_has_groundtruth_box_visualization_color();
  // @@protoc_insertion_point(field_mutable:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
  return groundtruth_box_visualization_color_.MutableNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get());
}
::std::string* EvalConfig::release_groundtruth_box_visualization_color() {
  // @@protoc_insertion_point(field_release:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
  clear_has_groundtruth_box_visualization_color();
  return groundtruth_box_visualization_color_.ReleaseNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get());
}
void EvalConfig::set_allocated_groundtruth_box_visualization_color(::std::string* groundtruth_box_visualization_color) {
  if (groundtruth_box_visualization_color != NULL) {
    set_has_groundtruth_box_visualization_color();
  } else {
    clear_has_groundtruth_box_visualization_color();
  }
  groundtruth_box_visualization_color_.SetAllocatedNoArena(&EvalConfig::_default_groundtruth_box_visualization_color_.get(), groundtruth_box_visualization_color);
  // @@protoc_insertion_point(field_set_allocated:object_detection.protos.EvalConfig.groundtruth_box_visualization_color)
}

// optional bool keep_image_id_for_visualization_export = 19 [default = false];
bool EvalConfig::has_keep_image_id_for_visualization_export() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void EvalConfig::set_has_keep_image_id_for_visualization_export() {
  _has_bits_[0] |= 0x00001000u;
}
void EvalConfig::clear_has_keep_image_id_for_visualization_export() {
  _has_bits_[0] &= ~0x00001000u;
}
void EvalConfig::clear_keep_image_id_for_visualization_export() {
  keep_image_id_for_visualization_export_ = false;
  clear_has_keep_image_id_for_visualization_export();
}
bool EvalConfig::keep_image_id_for_visualization_export() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.keep_image_id_for_visualization_export)
  return keep_image_id_for_visualization_export_;
}
void EvalConfig::set_keep_image_id_for_visualization_export(bool value) {
  set_has_keep_image_id_for_visualization_export();
  keep_image_id_for_visualization_export_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.keep_image_id_for_visualization_export)
}

// optional bool retain_original_images = 23 [default = true];
bool EvalConfig::has_retain_original_images() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void EvalConfig::set_has_retain_original_images() {
  _has_bits_[0] |= 0x00100000u;
}
void EvalConfig::clear_has_retain_original_images() {
  _has_bits_[0] &= ~0x00100000u;
}
void EvalConfig::clear_retain_original_images() {
  retain_original_images_ = true;
  clear_has_retain_original_images();
}
bool EvalConfig::retain_original_images() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.retain_original_images)
  return retain_original_images_;
}
void EvalConfig::set_retain_original_images(bool value) {
  set_has_retain_original_images();
  retain_original_images_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.retain_original_images)
}

// optional bool include_metrics_per_category = 24 [default = false];
bool EvalConfig::has_include_metrics_per_category() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void EvalConfig::set_has_include_metrics_per_category() {
  _has_bits_[0] |= 0x00002000u;
}
void EvalConfig::clear_has_include_metrics_per_category() {
  _has_bits_[0] &= ~0x00002000u;
}
void EvalConfig::clear_include_metrics_per_category() {
  include_metrics_per_category_ = false;
  clear_has_include_metrics_per_category();
}
bool EvalConfig::include_metrics_per_category() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.include_metrics_per_category)
  return include_metrics_per_category_;
}
void EvalConfig::set_include_metrics_per_category(bool value) {
  set_has_include_metrics_per_category();
  include_metrics_per_category_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.include_metrics_per_category)
}

// optional float recall_lower_bound = 26 [default = 0];
bool EvalConfig::has_recall_lower_bound() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void EvalConfig::set_has_recall_lower_bound() {
  _has_bits_[0] |= 0x00004000u;
}
void EvalConfig::clear_has_recall_lower_bound() {
  _has_bits_[0] &= ~0x00004000u;
}
void EvalConfig::clear_recall_lower_bound() {
  recall_lower_bound_ = 0;
  clear_has_recall_lower_bound();
}
float EvalConfig::recall_lower_bound() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.recall_lower_bound)
  return recall_lower_bound_;
}
void EvalConfig::set_recall_lower_bound(float value) {
  set_has_recall_lower_bound();
  recall_lower_bound_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.recall_lower_bound)
}

// optional float recall_upper_bound = 27 [default = 1];
bool EvalConfig::has_recall_upper_bound() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void EvalConfig::set_has_recall_upper_bound() {
  _has_bits_[0] |= 0x00400000u;
}
void EvalConfig::clear_has_recall_upper_bound() {
  _has_bits_[0] &= ~0x00400000u;
}
void EvalConfig::clear_recall_upper_bound() {
  recall_upper_bound_ = 1;
  clear_has_recall_upper_bound();
}
float EvalConfig::recall_upper_bound() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.EvalConfig.recall_upper_bound)
  return recall_upper_bound_;
}
void EvalConfig::set_recall_upper_bound(float value) {
  set_has_recall_upper_bound();
  recall_upper_bound_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.EvalConfig.recall_upper_bound)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)
