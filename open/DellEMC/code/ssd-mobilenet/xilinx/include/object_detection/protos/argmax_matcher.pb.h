// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/argmax_matcher.proto

#ifndef PROTOBUF_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto__INCLUDED
#define PROTOBUF_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace object_detection {
namespace protos {
class ArgMaxMatcher;
class ArgMaxMatcherDefaultTypeInternal;
extern ArgMaxMatcherDefaultTypeInternal _ArgMaxMatcher_default_instance_;
}  // namespace protos
}  // namespace object_detection

namespace object_detection {
namespace protos {

namespace protobuf_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto

// ===================================================================

class ArgMaxMatcher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:object_detection.protos.ArgMaxMatcher) */ {
 public:
  ArgMaxMatcher();
  virtual ~ArgMaxMatcher();

  ArgMaxMatcher(const ArgMaxMatcher& from);

  inline ArgMaxMatcher& operator=(const ArgMaxMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArgMaxMatcher(ArgMaxMatcher&& from) noexcept
    : ArgMaxMatcher() {
    *this = ::std::move(from);
  }

  inline ArgMaxMatcher& operator=(ArgMaxMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxMatcher& default_instance();

  static inline const ArgMaxMatcher* internal_default_instance() {
    return reinterpret_cast<const ArgMaxMatcher*>(
               &_ArgMaxMatcher_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ArgMaxMatcher* other);
  friend void swap(ArgMaxMatcher& a, ArgMaxMatcher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArgMaxMatcher* New() const PROTOBUF_FINAL { return New(NULL); }

  ArgMaxMatcher* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArgMaxMatcher& from);
  void MergeFrom(const ArgMaxMatcher& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArgMaxMatcher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool ignore_thresholds = 3 [default = false];
  bool has_ignore_thresholds() const;
  void clear_ignore_thresholds();
  static const int kIgnoreThresholdsFieldNumber = 3;
  bool ignore_thresholds() const;
  void set_ignore_thresholds(bool value);

  // optional bool force_match_for_each_row = 5 [default = false];
  bool has_force_match_for_each_row() const;
  void clear_force_match_for_each_row();
  static const int kForceMatchForEachRowFieldNumber = 5;
  bool force_match_for_each_row() const;
  void set_force_match_for_each_row(bool value);

  // optional bool use_matmul_gather = 6 [default = false];
  bool has_use_matmul_gather() const;
  void clear_use_matmul_gather();
  static const int kUseMatmulGatherFieldNumber = 6;
  bool use_matmul_gather() const;
  void set_use_matmul_gather(bool value);

  // optional bool negatives_lower_than_unmatched = 4 [default = true];
  bool has_negatives_lower_than_unmatched() const;
  void clear_negatives_lower_than_unmatched();
  static const int kNegativesLowerThanUnmatchedFieldNumber = 4;
  bool negatives_lower_than_unmatched() const;
  void set_negatives_lower_than_unmatched(bool value);

  // optional float matched_threshold = 1 [default = 0.5];
  bool has_matched_threshold() const;
  void clear_matched_threshold();
  static const int kMatchedThresholdFieldNumber = 1;
  float matched_threshold() const;
  void set_matched_threshold(float value);

  // optional float unmatched_threshold = 2 [default = 0.5];
  bool has_unmatched_threshold() const;
  void clear_unmatched_threshold();
  static const int kUnmatchedThresholdFieldNumber = 2;
  float unmatched_threshold() const;
  void set_unmatched_threshold(float value);

  // @@protoc_insertion_point(class_scope:object_detection.protos.ArgMaxMatcher)
 private:
  void set_has_matched_threshold();
  void clear_has_matched_threshold();
  void set_has_unmatched_threshold();
  void clear_has_unmatched_threshold();
  void set_has_ignore_thresholds();
  void clear_has_ignore_thresholds();
  void set_has_negatives_lower_than_unmatched();
  void clear_has_negatives_lower_than_unmatched();
  void set_has_force_match_for_each_row();
  void clear_has_force_match_for_each_row();
  void set_has_use_matmul_gather();
  void clear_has_use_matmul_gather();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool ignore_thresholds_;
  bool force_match_for_each_row_;
  bool use_matmul_gather_;
  bool negatives_lower_than_unmatched_;
  float matched_threshold_;
  float unmatched_threshold_;
  friend struct protobuf_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArgMaxMatcher

// optional float matched_threshold = 1 [default = 0.5];
inline bool ArgMaxMatcher::has_matched_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArgMaxMatcher::set_has_matched_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArgMaxMatcher::clear_has_matched_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArgMaxMatcher::clear_matched_threshold() {
  matched_threshold_ = 0.5f;
  clear_has_matched_threshold();
}
inline float ArgMaxMatcher::matched_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ArgMaxMatcher.matched_threshold)
  return matched_threshold_;
}
inline void ArgMaxMatcher::set_matched_threshold(float value) {
  set_has_matched_threshold();
  matched_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ArgMaxMatcher.matched_threshold)
}

// optional float unmatched_threshold = 2 [default = 0.5];
inline bool ArgMaxMatcher::has_unmatched_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArgMaxMatcher::set_has_unmatched_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArgMaxMatcher::clear_has_unmatched_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArgMaxMatcher::clear_unmatched_threshold() {
  unmatched_threshold_ = 0.5f;
  clear_has_unmatched_threshold();
}
inline float ArgMaxMatcher::unmatched_threshold() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ArgMaxMatcher.unmatched_threshold)
  return unmatched_threshold_;
}
inline void ArgMaxMatcher::set_unmatched_threshold(float value) {
  set_has_unmatched_threshold();
  unmatched_threshold_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ArgMaxMatcher.unmatched_threshold)
}

// optional bool ignore_thresholds = 3 [default = false];
inline bool ArgMaxMatcher::has_ignore_thresholds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxMatcher::set_has_ignore_thresholds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxMatcher::clear_has_ignore_thresholds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxMatcher::clear_ignore_thresholds() {
  ignore_thresholds_ = false;
  clear_has_ignore_thresholds();
}
inline bool ArgMaxMatcher::ignore_thresholds() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ArgMaxMatcher.ignore_thresholds)
  return ignore_thresholds_;
}
inline void ArgMaxMatcher::set_ignore_thresholds(bool value) {
  set_has_ignore_thresholds();
  ignore_thresholds_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ArgMaxMatcher.ignore_thresholds)
}

// optional bool negatives_lower_than_unmatched = 4 [default = true];
inline bool ArgMaxMatcher::has_negatives_lower_than_unmatched() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArgMaxMatcher::set_has_negatives_lower_than_unmatched() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArgMaxMatcher::clear_has_negatives_lower_than_unmatched() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArgMaxMatcher::clear_negatives_lower_than_unmatched() {
  negatives_lower_than_unmatched_ = true;
  clear_has_negatives_lower_than_unmatched();
}
inline bool ArgMaxMatcher::negatives_lower_than_unmatched() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ArgMaxMatcher.negatives_lower_than_unmatched)
  return negatives_lower_than_unmatched_;
}
inline void ArgMaxMatcher::set_negatives_lower_than_unmatched(bool value) {
  set_has_negatives_lower_than_unmatched();
  negatives_lower_than_unmatched_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ArgMaxMatcher.negatives_lower_than_unmatched)
}

// optional bool force_match_for_each_row = 5 [default = false];
inline bool ArgMaxMatcher::has_force_match_for_each_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxMatcher::set_has_force_match_for_each_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxMatcher::clear_has_force_match_for_each_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxMatcher::clear_force_match_for_each_row() {
  force_match_for_each_row_ = false;
  clear_has_force_match_for_each_row();
}
inline bool ArgMaxMatcher::force_match_for_each_row() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ArgMaxMatcher.force_match_for_each_row)
  return force_match_for_each_row_;
}
inline void ArgMaxMatcher::set_force_match_for_each_row(bool value) {
  set_has_force_match_for_each_row();
  force_match_for_each_row_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ArgMaxMatcher.force_match_for_each_row)
}

// optional bool use_matmul_gather = 6 [default = false];
inline bool ArgMaxMatcher::has_use_matmul_gather() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxMatcher::set_has_use_matmul_gather() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxMatcher::clear_has_use_matmul_gather() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxMatcher::clear_use_matmul_gather() {
  use_matmul_gather_ = false;
  clear_has_use_matmul_gather();
}
inline bool ArgMaxMatcher::use_matmul_gather() const {
  // @@protoc_insertion_point(field_get:object_detection.protos.ArgMaxMatcher.use_matmul_gather)
  return use_matmul_gather_;
}
inline void ArgMaxMatcher::set_use_matmul_gather(bool value) {
  set_has_use_matmul_gather();
  use_matmul_gather_ = value;
  // @@protoc_insertion_point(field_set:object_detection.protos.ArgMaxMatcher.use_matmul_gather)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace protos
}  // namespace object_detection

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_object_5fdetection_2fprotos_2fargmax_5fmatcher_2eproto__INCLUDED
